<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python for Undergraduate Engineers - jupyter</title><link href="https://professorkazarinoff.github.io/staticsite/" rel="alternate"></link><link href="https://professorkazarinoff.github.io/staticsite/feeds/jupyter.atom.xml" rel="self"></link><id>https://professorkazarinoff.github.io/staticsite/</id><updated>2018-05-20T12:40:00-07:00</updated><entry><title>Creating a new Digital Ocean Droplet</title><link href="https://professorkazarinoff.github.io/staticsite/new-digital-ocean-droplet.html" rel="alternate"></link><published>2018-05-20T12:40:00-07:00</published><updated>2018-05-20T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-20:/staticsite/new-digital-ocean-droplet.html</id><summary type="html">&lt;p&gt;This is the third part of a multi-part series on how to set up Jupyter Hub for a class.  My goal is to have a running version of Jupyter Hub that students can access using a simple web link. I am primarily writing to my future self as I may need to set up Jupyter Hub again for a future class. In this post, we are going to create a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and create a non-root user with sudo privileges. Then we'll SSH into the droplet with PuTTY as the non-root user.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third part of a multi-part series on how to set up Jupyter Hub for a class.  My goal is to have a running version of Jupyter Hub that students can access using a simple web link. I am primarily writing to my future self as I may need to set up Jupyter Hub again for a future class. In this post, we are going to create a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and create a non-root user with sudo privileges. Then we'll SSH into the droplet with PuTTY as the non-root user.&lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;Create ssh key, save to documents/ssh-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Install Jupyter Hub on the server&lt;/li&gt;
&lt;li&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/li&gt;
&lt;li&gt;Connect OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to Jupyter Hub as student&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;The last post&lt;/h3&gt;
&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;previous post&lt;/a&gt;, we created a public/private SSH key pair using PuTTYgen. We saved the SSH keys in the Documents/ssh-keys directory. We also copied contents of the public SSH key to the clipboard.&lt;/p&gt;
&lt;h3&gt;Steps in this post&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Sign up for a Digital Ocean Account&lt;/li&gt;
&lt;li&gt;Create a new Digital Ocean Droplet (will be called &lt;em&gt;the server&lt;/em&gt; from here on out)&lt;/li&gt;
&lt;li&gt;Log into the server as root over SSH using PuTTY. &lt;/li&gt;
&lt;li&gt;Create a non-root sudo user&lt;/li&gt;
&lt;li&gt;Log into to the server as the non-root sudo user using PuTTY&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1. Sign up for a Digital Ocean Account&lt;/h3&gt;
&lt;p&gt;Digital Ocean is a cloud service provider like Amazon Web Services (AWS), Google Cloud, Microsoft Azure and Linode. Digital Ocean provides virtual private servers (called Droplets in Digital Ocean-speak) and online storage of static files (called Spaces in Digital Ocean-speak). We are going to run the Jupyter Hub server on a Digital Ocean Droplet. I like Digital Ocean's prices and web interface. The documentation on Digital Ocean is pretty good too. I already have a Digital Ocean account. I don't remember exactly how I did it, but going to this link:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/"&gt;https://www.digitalocean.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and selecting [Create Account --&amp;gt;] should work.&lt;/p&gt;
&lt;h3&gt;2. Create a new Digital Ocean Droplet&lt;/h3&gt;
&lt;p&gt;To create a new Digtial Ocean Droplet (a new server), log in here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.digitalocean.com/login"&gt;https://cloud.digitalocean.com/login&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Ocean Login" src="/posts/jupyterhub/digital_ocean_login.png"&gt;&lt;/p&gt;
&lt;p&gt;After logging in, I got a verify screen and had to go to my email and retrive a six digit code. Ah... the joys of two-factor authentication.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Ocean Verify" src="/posts/jupyterhub/digital_ocean_verify.png"&gt;&lt;/p&gt;
&lt;p&gt;The welcome screen looks like this. To create a new server select [Create Droplet]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Ocean Create Droplet" src="/posts/jupyterhub/digital_ocean_create_droplet.png"&gt;&lt;/p&gt;
&lt;p&gt;There are a number of choices to make. These are the ones I selected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image: Ubuntu 16.04.4 x64&lt;/li&gt;
&lt;li&gt;Size: 1 GB Memory 25GB SSD $5/month&lt;/li&gt;
&lt;li&gt;Datacenter: San Fransisco 2&lt;/li&gt;
&lt;li&gt;Add your SSH keys: New SSH Key&lt;/li&gt;
&lt;li&gt;Finalize: 1 Droplet, Hostname: jupyter-hub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_create_droplets_choices.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_size_choices.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_data_center_choices.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_ssh_key__choices.png"&gt;&lt;/p&gt;
&lt;h4&gt;Add an SSH Key&lt;/h4&gt;
&lt;div class="alert alert-warning" role="alert"&gt;
  &lt;strong&gt;Important!&lt;/strong&gt; You need to add the public SSH key BEFORE creating the droplet
&lt;/div&gt;

&lt;p&gt;The public SSH key we created needs to be shown on the list of keys and the radio box beside it needs to be checked. If the SSH key isn't listed or the SSH key box not checked, the SSH key will not be added to the server when the server is first created (and then we won't be able to log in with PuTTY). We need to add our SSH key and check the key box so we can log onto the server with PuTTY.&lt;/p&gt;
&lt;p&gt;Under Add your SSH keys, click [New SSH Key]. A dialog window pops up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_new_ssh_key_dialog.png"&gt;&lt;/p&gt;
&lt;p&gt;Paste the contents of the SSH public key into the Add SSH Keys dialog box.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplet_enter_ssh_key__details.png"&gt;&lt;/p&gt;
&lt;p&gt;Enter a name for the SSH key that will be saved on Digital Ocean. I choose the name jupyter-hub-ssh-key. Then click [Add SSH Key]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplet_ssh_key_name_and_add.png"&gt;&lt;/p&gt;
&lt;p&gt;You should then see the new SSH Key in the [Add your SSH Keys?] region of the new droplets page. Make sure that the radio box for the SSH key we just added is checked. A problem I had when I set up my first &lt;em&gt;droplet&lt;/em&gt; was that I did not have the new SSH Key was radio button selected. When that first server was created, no SSH keys were installed. I ended up going through this long process of copying the public SSH key into pastbin.com (which is definitely &lt;strong&gt;not a safe thing to do&lt;/strong&gt;), and using &lt;code&gt;wget&lt;/code&gt; to past the raw contents from the pastebin into the server file system, then using &lt;code&gt;cp&lt;/code&gt; to copy the publish SSH key into the correct file name. This required using the Digital Ocean console, which is sort of like a bash terminal that pops up in a web browser. I couldn't figure out a way to copy and paste into the Digital Ocean console and the console is slow and laggy. It is &lt;em&gt;way easier&lt;/em&gt; to insert the SSH key into the server when the server is created. It is &lt;em&gt;way harder&lt;/em&gt; to add an SSH key after the server is created.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_see_new_ssh_key.png"&gt;&lt;/p&gt;
&lt;p&gt;I think it's time to actually create the droplet. Click the long green [Create] button at the bottom of the page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplet_create.png"&gt;&lt;/p&gt;
&lt;p&gt;This will bring you back the the Digital Ocean main dashboard and you should see your new droplet under [Resources] --&amp;gt; [Droplets]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplets_1.png"&gt;&lt;/p&gt;
&lt;p&gt;Copy the IP address of the new droplet onto the clipboard. We need to IP address to log into the server with PuTTY.&lt;/p&gt;
&lt;h3&gt;3. Log into the server as root over SSH using PuTTY.&lt;/h3&gt;
&lt;p&gt;Open PuTTY from the Windows start menu. A couple other parameters need to be set before we log onto the server.&lt;/p&gt;
&lt;table class="table table-striped table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IP Address&lt;/td&gt;
&lt;td&gt;IP of &lt;em&gt;droplet&lt;/em&gt; ex: 168.97.14.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; SSH --&amp;gt; Auth --&amp;gt; Private key file&lt;/td&gt;
&lt;td&gt;private SSH key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; Data --&amp;gt; Auto-login username&lt;/td&gt;
&lt;td&gt;root&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/putty_in_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;Under Connect --&amp;gt; SSH --&amp;gt; Auth --&amp;gt; Private key file for authentication:, click [Browse]. &lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTY Auth SSH private key" src="/posts/jupyterhub/putty_Auth_SSH_private_key.png"&gt;&lt;/p&gt;
&lt;p&gt;Navigate to the SSH private key in Documents/ssh-keys. The private key ends in a .ppk extension. I had trouble finding the key when I first set up PuTTY. It turned out that when the key was saved in Programfiles/PuTTY. The key was not visible in the Windows file browser because I don't have administrator permissions on my machine at work. I ended up having to create a new SSH key and save the new key in Documents/ssh-key (I can access Documents/ssh-key without administrator privaleges).&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTY browse to private SSH key" src="/posts/jupyterhub/putty_browse_private_ssh_key.png"&gt;&lt;/p&gt;
&lt;p&gt;Under Connection --&amp;gt; Data --&amp;gt; Auto-login username: &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty login details" src="/posts/jupyterhub/putty_login_details.png"&gt;&lt;/p&gt;
&lt;p&gt;Back in [Sessions] (the top-most menu item or main page), add the IP address and Port = 22, click [Open]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty IP address and Port" src="/posts/jupyterhub/puTTY_IP_and_Port.png"&gt;&lt;/p&gt;
&lt;p&gt;This should bring up a new window that is a terminal for our server:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyTTY SSH window open" src="/posts/jupyterhub/putty_ssh_window_open.png"&gt;&lt;/p&gt;
&lt;h3&gt;4. Create a non-root sudo user&lt;/h3&gt;
&lt;p&gt;Digital Ocean recommends that the servers are run by non-root user that have sudo access. So one of the first things we'll do on our server is create a non-root sudo user. First though let's make sure everything is up to date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I followed &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart"&gt;this tutorial&lt;/a&gt; at Digital Ocean to create a non-root sudo user.&lt;/p&gt;
&lt;p&gt;Create the new user with the &lt;code&gt;adduser&lt;/code&gt; command. I called my new user &lt;code&gt;peter&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adduser &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set a new password and confirm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The user details can be skipped by pressing [Enter]. Then [Y] to complete the new user setup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Changing the user information for username
Enter the new value, or press ENTER for the default
    Full Name []:
    Room Number []:
    Work Phone []:
    Home Phone []:
    Other []:
Is the information correct? [Y/n]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's give our new user sudo privaleges:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ usermod -aG sudo &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new user account is created and the new user has sudo privalges. We can switch accounts and become the new user with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo su - &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new user should have &lt;code&gt;sudo&lt;/code&gt; privileges. That means when acting as &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; we should be able to look in the &lt;code&gt;/root&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ls -la /root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you can see the contents of &lt;code&gt;/root&lt;/code&gt; then the new user is set up with sudo access.&lt;/p&gt;
&lt;h4&gt;Add SSH keys to new user's profile&lt;/h4&gt;
&lt;p&gt;Before we log off, we need to add our SSH keys to our new user's profile on the server. The second time I set up JupyterHub, I had trouble logging in as the non-root user using PuTTY. I could log in as &lt;code&gt;root&lt;/code&gt; just fine, but I couldn't log in as the newly created user &lt;code&gt;peter&lt;/code&gt;. When Digital Ocean created the server, the SSH keys (specified on the creation page) were added to the &lt;code&gt;root&lt;/code&gt; profile. The new user &lt;code&gt;peter&lt;/code&gt; didn't exist when the server was created. The only user was &lt;code&gt;root&lt;/code&gt; at creation time. Therefore no SSH keys were added to the &lt;code&gt;peter&lt;/code&gt; profile at server creation time, because the user &lt;code&gt;peter&lt;/code&gt; didn't exist yet. Since we want to log into our server as the new non-root user &lt;code&gt;peter&lt;/code&gt;, we need to add the same SSH keys saved in the &lt;code&gt;root&lt;/code&gt; profile to the &lt;code&gt;peter&lt;/code&gt; profile. The SSH keys belong in a file located at &lt;code&gt;/home/peter/.ssh/authorized_keys&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I followed &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-ssh-keys-with-putty-to-connect-to-a-vps"&gt;this tutorial&lt;/a&gt; from Digital Ocean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/.ssh
$ chmod &lt;span class="m"&gt;0700&lt;/span&gt; ~/.ssh
$ touch ~/.ssh/authorized_keys
$ chmod &lt;span class="m"&gt;0644&lt;/span&gt; ~/.ssh/authorized_keys
$ nano /home/peter/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the right mouse button to paste in the public SSH key from the clipboard. If the SSH key is not saved in the clipboard, then you can retrieve it with PuTTYgen --&amp;gt; load or go to Digital Ocean, click in the upper right on the profile picture --&amp;gt; settings --&amp;gt; security --&amp;gt; ssh-key --&amp;gt; edit dropdown --&amp;gt; edit. You can paste into the PuTTY window using the right mouse button. Use [Ctrl-x] and [Y] to save and exit. &lt;/p&gt;
&lt;p&gt;I tried to use &lt;code&gt;cp&lt;/code&gt; to copy the &lt;code&gt;authorized_keys&lt;/code&gt; file from &lt;code&gt;/root/.ssh/&lt;/code&gt; to &lt;code&gt;/home/peter/.ssh&lt;/code&gt; but there was a problem with permissions and write access to the &lt;code&gt;authorized_keys&lt;/code&gt; file. I couldn't get PuTTY to login as &lt;code&gt;peter&lt;/code&gt; until I removed the file, recreated an empty one and pasted in the SSH key. This is probably also possible with &lt;code&gt;cat file1 &amp;gt;&amp;gt; file2&lt;/code&gt;. Manually copying and pasting with the right mouse button was the way I got it to work. &lt;/p&gt;
&lt;p&gt;Now we can exit out of the &lt;code&gt;peter&lt;/code&gt; profile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should bring you back to the &lt;code&gt;root&lt;/code&gt; user. Restart the server to enact the changes with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might need to wait a minute or two for the server to restart.&lt;/p&gt;
&lt;h3&gt;4. Connect to the server as the non-root sudo user using PuTTY&lt;/h3&gt;
&lt;p&gt;Now that the non-root sudo user is set up and our ssh keys are in /home/&lt;user&gt;/.ssh/authorized_keys, let's start a new PuTTY session and log into the server as the new user. Like before, open PuTTY from the Windows Start menu and add the following settings, but this time the Auto-login user name is the name of our new non-root sudo user:&lt;/p&gt;
&lt;table class="table table-striped table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IP Address&lt;/td&gt;
&lt;td&gt;IP of &lt;em&gt;droplet&lt;/em&gt; ex: 168.97.14.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; SSH --&amp;gt; Auth --&amp;gt; Private key file&lt;/td&gt;
&lt;td&gt;private SSH key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; Data --&amp;gt; Auto-login username&lt;/td&gt;
&lt;td&gt;peter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I also saved the PuTTY session details at this point so that I wouldn't have to re-enter all of the parameters each time I want to log into the server. Enter a name into [Saved Sessions] and click [Save]. Once the parameters are saved in PuTTY, you can simply double-click the profile name and you will log into the server.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTY save profile" src="/posts/jupyterhub/putty_save_session.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Log into the server with Sessions --&amp;gt; [Open]&lt;/p&gt;
&lt;p&gt;You should see the Digital Ocean login screen again. Note the prompt, it should have the new users name before the &lt;code&gt;@&lt;/code&gt; symbol. &lt;/p&gt;
&lt;p&gt;&lt;img alt="server terminal as peter" src="/posts/jupyterhub/putty_ssh_window_open_as_peter.png"&gt;&lt;/p&gt;
&lt;p&gt;Check to see which directory you land it. It should be &lt;code&gt;/home/&amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/&amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see the non-root user's home directory. Let's make sure we can also see into the &lt;code&gt;root&lt;/code&gt; user's home directory to ensure we have sudo privileges as the non-root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ls -la /root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To log out of the server simply type &lt;code&gt;exit&lt;/code&gt;. This should close the PuTTY session.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post we created a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and made sure to add our public SSH key to the setup options before we hit [Create]. Then we logged into the server as &lt;code&gt;root&lt;/code&gt;  with our private SSH key. As &lt;code&gt;root&lt;/code&gt;, we set up a new user with sudo privileges and added our public SSH key to the new user's profile in &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;. Then we logged into the server as the new user and checked the new user's home directory and ensured the new user has sudo privileges.&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;In the next post, we will get to the fun stuff: installing &lt;strong&gt;Anaconda and jupyterhub&lt;/strong&gt; on our new server and starting Jupyter Hub for the first time! (but only keep it open for a couple seconds because we don't have SSL set up yet).&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Create an SSH Key with PuTTYgen</title><link href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html" rel="alternate"></link><published>2018-05-19T12:40:00-07:00</published><updated>2018-05-19T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-19:/staticsite/ssh-keys-with-putty.html</id><summary type="html">&lt;p&gt;This is the second part of a multi-part series on how to set up Jupyter Hub for a class. This is my first time setting up a Jupyter Hub server. I am primarily writing to my future self as I may need to set up Jupyter Hub again for another class. In this post, we are going to create an SSH key on a Windows 10 machine using PuTTYgen.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part of a multi-part series on how to set up Jupyter Hub for a class. This is my first time setting up a Jupyter Hub server. I am primarily writing to my future self as I may need to set up Jupyter Hub again for another class. In this post, we are going to create an SSH key on a Windows 10 machine using PuTTYgen.&lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create ssh key, save to documents/ssh-keys&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/li&gt;
&lt;li&gt;Install Jupyter Hub on the server&lt;/li&gt;
&lt;li&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/li&gt;
&lt;li&gt;Connect OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to Jupyter Hub as student&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Steps in this post&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download PuTTY for Windows&lt;/li&gt;
&lt;li&gt;Start PuTTYgen and create SSH key&lt;/li&gt;
&lt;li&gt;Save SSH public and private keys to Documents folder&lt;/li&gt;
&lt;li&gt;Copy the public key to clipboard&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Why SSH keys, PuTTYgen and why do this first?&lt;/h3&gt;
&lt;p&gt;When I set up the server on Digital Ocean the first time, one of the initial server setup steps was to add SSH keys so the server has them when it initialized. &lt;/p&gt;
&lt;p&gt;I tried to create and save the keys to the Digital Ocean dashboard so the SSH keys would be on the server when it first started. But I goofed up somehow and the server started without any SSH keys. It was a BIG PAIN adding SSH keys after the server started for the first time. &lt;/p&gt;
&lt;p&gt;I ended up copying the public key into pastebin.com, logging onto the server with the Digital Ocean console and using &lt;code&gt;wget&lt;/code&gt; to bring a textfile of the SSH key from pastebin.com onto the server and then &lt;code&gt;mv&lt;/code&gt; to copy the key name into the right location.&lt;/p&gt;
&lt;p&gt;I'm pretty sure that pasting a public SSH key into pastebin.com is not the best way to initially set up a server. So to make sure that doesn't happen again, I am going to generate the SSH keys first and set up the server second. &lt;/p&gt;
&lt;p&gt;SSH keys are needed to use PuTTY (regular PuTTY not PuTTYgen) to log into the server. Since I'm working on Windows, using PuTTYgen (a program that comes with PuTTY that generates SSH keys) seems like the easiest solution. &lt;/p&gt;
&lt;h4&gt;1. Download PuTTY&lt;/h4&gt;
&lt;p&gt;I already have PuTTY installed on my Windows 10 machines at home and at work. The download link is below:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.putty.org/"&gt;Download PuTTY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PuTTY seems to want you to install lots of extra stuff when you run the installer. I didn't install any of the "offers" that popped up during installation.&lt;/p&gt;
&lt;h4&gt;2. Start PuTTYgen and create SSH key&lt;/h4&gt;
&lt;p&gt;I went through this tutorial to about setting SSH key on Windows for Digital Ocean when I created the first SSH key:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users"&gt;How To Use SSH Keys with PuTTY on DigitalOcean Droplets (Windows users)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using the Windows start menu, open PuTTYgen (not regular PuTTY):&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen in Windows Start Menu" src="/posts/jupyterhub/puttygen_in_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/puttygen_key_generator.png"&gt;&lt;/p&gt;
&lt;p&gt;Use the following parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of key to generate: RSA&lt;/li&gt;
&lt;li&gt;Number of bits in generated key: 2048&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then click [generate]&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen generate" src="/posts/jupyterhub/puttygen_generate.png"&gt;&lt;/p&gt;
&lt;p&gt;This will bring up a dialog to move the mouse around the empty area to generate some randomness. This is my favorite part. Just move the mouse around the dialog box until the progress bar ends. Fun.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen key generator" src="/posts/jupyterhub/puttygen_key_generator.png"&gt;&lt;/p&gt;
&lt;p&gt;When the next screen pops up, right-click and copy the contents of the Public Key. We'll need the public key contents available to paste into the server's SSH &lt;code&gt;authorized_keys&lt;/code&gt; file. Include the rsa line in the text copied to the clipboard.&lt;/p&gt;
&lt;h4&gt;3. Save SSH public and private keys to Documents folder&lt;/h4&gt;
&lt;p&gt;In the [Actions] section click [Save public key] and click [Save private key]&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen save public and private keys" src="/posts/jupyterhub/puttygen_save_public_private_key.png"&gt;&lt;/p&gt;
&lt;p&gt;Make sure to save both the public and the private keys. Save these keys to an accessible folder. The first time I generated SSH keys, I saved the keys in the default location and couldn't access them later. The second time I created SSH keys, I created a folder in the Documents folder called ssh-keys and saved the public and private keys in Documents/ssh-keys. I saved the public key with the name: &lt;code&gt;public_key_jupyter_hub.txt&lt;/code&gt;. The Digital Ocean documentation recommends a .txt file extension for the public key (so you can open it and copy the contents). The private key should have a .ppk file extension.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen save public key name" src="/posts/jupyterhub/puttygen_public_key_save_name.png"&gt;&lt;/p&gt;
&lt;h4&gt;4. Copy the public key to clipboard&lt;/h4&gt;
&lt;p&gt;Before closing PuTTYgen, make sure to copy the contents of the Public Key to the clipboard. We'll need this when we create the server. Copy all of the contents including the rsa line. &lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;After completing these steps, we have a public and private SSH key pair saved in Documents/ssh-keys. We also have the contents of the public SSH key saved to the clipboard.&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;Next, we'll create a new server on Digital Ocean (called a &lt;em&gt;droplet&lt;/em&gt;). Then we'll use the SSH keys we just created to log into the server and create a non-root sudo user.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Why Jupyter Hub?</title><link href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html" rel="alternate"></link><published>2018-05-17T12:40:00-07:00</published><updated>2018-05-17T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-17:/staticsite/why-jupyter-hub.html</id><summary type="html">&lt;p&gt;This is the first part of a multi-part series that shows how to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for an engineering programming class. This is my first time setting up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. I am primarily writing to my future self as I may need to set up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server again for a different class in another quarter. I hope the lessons learned will also help other instructors tackle the same problem if they want to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for their own class or team.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of a multi-part series that shows how to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for an engineering programming class. This is my first time setting up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. I am primarily writing to my future self as I may need to set up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server again for a different class in another quarter. I hope the lessons learned will also help other instructors tackle the same problem if they want to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for their own class or team.&lt;/p&gt;
&lt;h3&gt;Why Jupyter Hub?&lt;/h3&gt;
&lt;p&gt;Why &lt;strong&gt;Jupyter Hub&lt;/strong&gt;? I am teaching an intro engineering course this summer. The course has a lab component and three of the labs are devoted to computer programming. In previous quarters, I've taught MATLAB for the three computer programming labs. But this summer, I want to try teaching &lt;strong&gt;Python&lt;/strong&gt; and cover the same concepts and learning outcomes.&lt;/p&gt;
&lt;p&gt;If we use &lt;strong&gt;Python&lt;/strong&gt; in the three programming labs this summer, I would like to spend the lab time coding and solving problems. I don't want to spend time during the class downloading Python, creating virtual environments, troubleshooting installs, dealing with system vs. non-system versions of Python, installing packages, dealing with folder structure, explaining the difference between conda and pip, teaching command-line commands, going over Python on Windows compared to Python on MacOSX... &lt;/p&gt;
&lt;p&gt;I imagine the first programming lab of the quarter runs like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is a .pdf or google doc posted on a shared google drive folder with a link to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Students click the link and bring up the login page&lt;/li&gt;
&lt;li&gt;Students log-in with their college usernames and passwords&lt;/li&gt;
&lt;li&gt;Students type &lt;code&gt;import this&lt;/code&gt; press [Shift+Enter] and their first code cell just runs.&lt;/li&gt;
&lt;li&gt;Students can use &lt;strong&gt;Jupyter Hub&lt;/strong&gt; from any computer with a web browser and an internet connection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jupyter Hub&lt;/strong&gt; looks and runs the same on all student computers&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;This is theoretically possible with Jupyter Hub&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Jupyter Hub&lt;/strong&gt; can be installed on a Digital Ocean droplet (a cloud server, like AWS or Google Cloud). The version of &lt;strong&gt;Python&lt;/strong&gt; running the notebooks created by &lt;strong&gt;Jupyter Hub&lt;/strong&gt; can contain the full &lt;strong&gt;Anaconda&lt;/strong&gt; distribution of packages plus some extra packages like &lt;strong&gt;pint&lt;/strong&gt; and &lt;strong&gt;pyserial&lt;/strong&gt;. All of the notebooks will use the same environment. The installed packages will be the same for each student. One Digital Ocean droplet will be able to run all of the notebooks at the same time (hopefully, there will be about 24 students). Student's work will be saved on the server under their user account. Students can download the .ipynb files and upload them to google drive or save the .ipynb files on a thumb drive. After the students login, folders and notebooks can be in place and used as starting points in lab and as lab exercises. After the course ends, students will still be able to log in and use &lt;strong&gt;Jupyter Hub&lt;/strong&gt; and practice writing and running Python code to solve engineering problems.&lt;/p&gt;
&lt;h3&gt;What will it take to make Jupyter Hub a reality?&lt;/h3&gt;
&lt;p&gt;This list will surely change as I go through the process of setting up the &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. Below are the steps I expect to take and software/hardware needed at each step.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sign up for a Digital Ocean Account (already done)&lt;/li&gt;
&lt;li&gt;Create a new Digital Ocean Droplet (will be called &lt;em&gt;the server&lt;/em&gt; from here on out)&lt;/li&gt;
&lt;li&gt;Connect to the server over SSH and set up SSH keys&lt;/li&gt;
&lt;li&gt;Create a non-root sudo user on the server&lt;/li&gt;
&lt;li&gt;Get a public url, hook up the server DNS record to the public URL&lt;/li&gt;
&lt;li&gt;Install Anaconda on the server&lt;/li&gt;
&lt;li&gt;Install the other packages on the server like jupyter hub, node, pyserial and pint&lt;/li&gt;
&lt;li&gt;Edit permissions of files and directories on the server&lt;/li&gt;
&lt;li&gt;Create and implement SSL certificates on the server&lt;/li&gt;
&lt;li&gt;Run Jupyter Hub as a non-root sudo user&lt;/li&gt;
&lt;li&gt;Connect google OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to the server as student and celebrate teaching &lt;strong&gt;Python&lt;/strong&gt; without worrying about installation and virtual environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Will this work? How much time will it take?&lt;/h3&gt;
&lt;p&gt;Will this work? I hope so. Other people have done it. There was a JupyterCon talk about it, there are &lt;a href="http://jupyterhub.readthedocs.io/en/latest/gallery-jhub-deployments.html"&gt;example implementations&lt;/a&gt; up on github. A large data science class at UC Berkeley ran &lt;strong&gt;Jupyter Hub&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;I don't really know how long it will take. The only real step that takes time is the DNS connection. The rest of the steps are in the minute time frame of computing time and probably days if not weeks of troubleshooting time. I'm just going to try and complete a step per day or a step per week and see if I can get the server going by the end of the spring quarter.&lt;/p&gt;
&lt;h3&gt;Next Steps:&lt;/h3&gt;
&lt;p&gt;The next step is really the first step:&lt;/p&gt;
&lt;p&gt;Create SSH keys. We'll need a public/private SSH key pair to be able to log into the &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server over SSH.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry></feed>