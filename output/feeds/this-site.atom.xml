<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python for Undergraduate Engineers - This site</title><link href="https://professorkazarinoff.github.io/staticsite/" rel="alternate"></link><link href="/feeds/this-site.atom.xml" rel="self"></link><id>https://professorkazarinoff.github.io/staticsite/</id><updated>2017-12-14T12:40:00-08:00</updated><entry><title>How I Build This Site - Part 7</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-7.html" rel="alternate"></link><published>2017-12-14T12:40:00-08:00</published><updated>2017-12-14T12:40:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-12-14:/staticsite/how-i-built-this-site-7.html</id><summary type="html">&lt;p&gt;This is the seventh part of a multi-part series on how I built this site. In &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-6.html"&gt;last post&lt;/a&gt;, we added two new &lt;em&gt;pages&lt;/em&gt; to our site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page.  In this post, we are going to deploy the site to &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;. Github pages is a place on github were documentation and static sites can be hosted.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the seventh part of a multi-part series on how I built this site. In &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-6.html"&gt;last post&lt;/a&gt;, we added two new &lt;em&gt;pages&lt;/em&gt; to our site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page.  In this post, we are going to deploy the site to &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;. Github pages is a place on github were documentation and static sites can be hosted.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;By the end of the post we are going to have a working static website hosted on github pages. To accomplish this, we will complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pull the most recent version of the site from gitub&lt;/li&gt;
&lt;li&gt;Run pelican's &lt;code&gt;make html&lt;/code&gt; command to build the site and preview it with &lt;code&gt;make serve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify the &lt;strong&gt;&lt;em&gt;publishconf.py&lt;/em&gt;&lt;/strong&gt; file to include our github pages url and relative links&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pelican content -s publishconf.py&lt;/code&gt; to build a published version of the site in the &lt;strong&gt;output&lt;/strong&gt; directory&lt;/li&gt;
&lt;li&gt;Add, commit and push the published contents to our &lt;strong&gt;master&lt;/strong&gt; branch on github&lt;/li&gt;
&lt;li&gt;Make a &lt;strong&gt;gh-pages&lt;/strong&gt; branch in our &lt;strong&gt;staticsite&lt;/strong&gt; repo on github&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;ghp-import output&lt;/code&gt; and &lt;code&gt;git push origin gh-pages&lt;/code&gt; to push the &lt;strong&gt;output&lt;/strong&gt; directory to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch&lt;/li&gt;
&lt;li&gt;View the freshly published site! &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, let's get started. Can't wait to see the published site live on github pages.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="pull-to-the-most-recent-version-of-the-site-from-github"&gt;Pull to the most recent version of the site from github&lt;/h3&gt;
&lt;p&gt;Open a terminal and &lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;staticsite&lt;/code&gt; directory. Then activate the &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment with &lt;code&gt;source activate staticsite&lt;/code&gt;. Once in the &lt;code&gt;(staticsite)&lt;/code&gt; environment, pull the most recent version of the site down from github with &lt;code&gt;git pull origin master&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Documents/staticsite
&lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;staticsite directory&lt;/strong&gt; should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── _nb_header.html
├── content
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
├── pelican-themes
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we use the &lt;code&gt;make html&lt;/code&gt; command to build a demo version of the site. This will place the static files (&lt;em&gt;html&lt;/em&gt;, &lt;em&gt;css&lt;/em&gt;, &lt;em&gt;javascript&lt;/em&gt;) that forms the site in the &lt;strong&gt;output&lt;/strong&gt; folder.  We preview the site with &lt;code&gt;make serve&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ make html
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The demo version of our site can now be viewed by pointing a browser to:&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;ctr-c&lt;/code&gt; to stop the server.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="modify-the-publishconfpy-file-to-use-the-github-pages-url"&gt;Modify the &lt;strong&gt;&lt;em&gt;publishconf.py&lt;/em&gt;&lt;/strong&gt; file to use the github pages url&lt;/h3&gt;
&lt;p&gt;We need to edit the &lt;strong&gt;&lt;em&gt;publishconf.py&lt;/em&gt;&lt;/strong&gt; file to add our github pages url to &lt;code&gt;SITEURL&lt;/code&gt; and set &lt;code&gt;RELATIVE_URLS&lt;/code&gt; to True. The lines to change are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#publishconf.py&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://username.github.io/staticsite&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure to set &lt;code&gt;username&lt;/code&gt; to your github user name. Setting &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt; is necessary for the links on the site to work and for the &lt;em&gt;css&lt;/em&gt; and &lt;em&gt;javascript&lt;/em&gt; files run on github pages. When I initially set &lt;code&gt;RELATIVE_URLS = False&lt;/code&gt;, the site looked terrible, had no formatting or css and none of the links worked. Setting &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt; fixed the problem.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="create-a-published-version-of-the-site"&gt;Create a published version of the site&lt;/h3&gt;
&lt;p&gt;Up to this point, we used the &lt;code&gt;make html&lt;/code&gt; command to build a demo version of the site. Now we are ready to &lt;em&gt;publish&lt;/em&gt; the site. We publish the site by running the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content -s publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a published version of the site with relative url's in the &lt;strong&gt;output&lt;/strong&gt; directory. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="add-commit-push-to-the-master-branch-on-github"&gt;Add, commit, push to the master branch on github&lt;/h3&gt;
&lt;p&gt;Before we can put the published version of the site up on github pages, we need to push the current version of the site up to the master branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git add .
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git commit -m &lt;span class="s2"&gt;&amp;quot;first published version&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="create-a-gh-pages-branch-in-our-staticsite-repo-on-github"&gt;Create a &lt;strong&gt;gh-pages&lt;/strong&gt; branch in our staticsite repo on github&lt;/h3&gt;
&lt;p&gt;Up to this point, we saved our work to the &lt;strong&gt;master&lt;/strong&gt; branch of the staticsite repository on github. To host the site on github pages, we need to create a new branch in the &lt;strong&gt;staticsite&lt;/strong&gt; repo called &lt;strong&gt;gh-pages&lt;/strong&gt;. The &lt;strong&gt;master&lt;/strong&gt; branch still houses the code,settings, markup files, notebooks, images, etc. to build the site. However, in the &lt;strong&gt;gh-pages&lt;/strong&gt; branch of the &lt;strong&gt;staticsite&lt;/strong&gt; repo any html, css and javascript files  will be served like a regular website. To create the new branch, go the main &lt;strong&gt;staticsite&lt;/strong&gt; repository page on github and click the [Branch: Master] drop down menu on the upper left hand side. Enter the name of the new branch: &lt;strong&gt;gh-pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="use-ghp-import-to-post-the-contents-of-the-output-directory-to-the-gh-pages-branch"&gt;Use &lt;code&gt;ghp-import&lt;/code&gt; to post the contents of the &lt;strong&gt;output&lt;/strong&gt; directory to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch&lt;/h3&gt;
&lt;p&gt;As shown in the &lt;a href="http://docs.getpelican.com/en/stable/tips.html"&gt;Pelican documentation&lt;/a&gt;, you can use a Python package called &lt;code&gt;ghp-import&lt;/code&gt; to help posting the contents of the output directory to the gh-pages branch of our repo on github. If &lt;code&gt;ghp-import&lt;/code&gt; isn't installed yet, use &lt;code&gt;pip&lt;/code&gt;. Make sure you are in the &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment when you run &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll use the ghp-import package to help us post the site. The command &lt;code&gt;ghp-import output&lt;/code&gt; will assign the contents of the &lt;strong&gt;output&lt;/strong&gt; directory to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch of our local git repository. The we &lt;code&gt;push&lt;/code&gt; the contents of the local &lt;strong&gt;gh-pages&lt;/strong&gt; branch up to the remote &lt;strong&gt;gh-pages&lt;/strong&gt; branch on github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ ghp-import output
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git push origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had trouble with this set of commands. Depending on which computer I was using, I would get the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ! &lt;span class="o"&gt;[&lt;/span&gt;rejected&lt;span class="o"&gt;]&lt;/span&gt;        gh-pages -&amp;gt; gh-pages &lt;span class="o"&gt;(&lt;/span&gt;fetch first&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;&amp;#39;https://github.com/professorkazarinoff/staticsite.git&amp;#39;&lt;/span&gt;
hint: Updates were rejected because the remote contains work that you &lt;span class="k"&gt;do&lt;/span&gt;
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: &lt;span class="o"&gt;(&lt;/span&gt;e.g., &lt;span class="s1"&gt;&amp;#39;git pull ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; before pushing again.
hint: See the &lt;span class="s1"&gt;&amp;#39;Note about fast-forwards&amp;#39;&lt;/span&gt; in &lt;span class="s1"&gt;&amp;#39;git push --help&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; details.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I tried &lt;code&gt;git stash&lt;/code&gt; and that didn't work.  I also tried &lt;code&gt;git pull origin gh-pages&lt;/code&gt; but this ended up putting everything from the &lt;strong&gt;output&lt;/strong&gt; directory into my root &lt;strong&gt;staticsite&lt;/strong&gt; directory which made a big old mess. &lt;/p&gt;
&lt;p&gt;The way I got around it was to use the &lt;code&gt;-f&lt;/code&gt; (force) flag. I don't think this is the most elegant or preferred way to get the contents of the &lt;strong&gt;output&lt;/strong&gt; directory up to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch. I just don't really understand how &lt;code&gt;git&lt;/code&gt; works well enough to know how to get around the problem without a &lt;em&gt;forced&lt;/em&gt; commit. If you get the error above try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;published&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;

&lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That has worked so far for me.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="view-the-site-on-github-pages"&gt;View the site on github pages.&lt;/h3&gt;
&lt;p&gt;Awesome! The site is now hosted for everyone to see on github pages! Pretty cool right? Point a browser to the github pages url and take a look:&lt;/p&gt;
&lt;p&gt;https://username.github.io/staticsite&lt;/p&gt;
&lt;p&gt;Change &lt;em&gt;username&lt;/em&gt; to your github user name. My site (the one that you are reading) is hosted here: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite"&gt;https://professorkazarinoff.github.io/staticsite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading to the end! It was quite a bit of work to get the site up and running, but I am pleased with the results. Now I need to read up on git . . . &lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="git"></category><category term="github"></category><category term="github pages"></category></entry><entry><title>How I Build This Site - Part 6</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-6.html" rel="alternate"></link><published>2017-12-12T18:50:00-08:00</published><updated>2017-12-12T18:50:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-12-12:/staticsite/how-i-built-this-site-6.html</id><summary type="html">&lt;p&gt;This is the sixth part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-5.html"&gt;last post&lt;/a&gt;, we put a search bar at the top right of each page and some css and javascript in order to make tables on the site look better. In this post we are going to add two new &lt;em&gt;pages&lt;/em&gt; to our static site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page. These new pages will have menu entries at the top of our site.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the sixth part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-5.html"&gt;last post&lt;/a&gt;, we put a search bar at the top right of each page and some css and javascript in order to make tables on the site look better. In this post we are going to add two new &lt;em&gt;pages&lt;/em&gt; to our static site: an &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page. These new pages will have menu entries at the top of our site.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post we are going to have a site with two new pages and two new menu items.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;Pull the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Add two new &lt;em&gt;pages&lt;/em&gt;  (&lt;strong&gt;&lt;em&gt;.md&lt;/em&gt;&lt;/strong&gt; files) to our &lt;strong&gt;content&lt;/strong&gt; folder&lt;/li&gt;
&lt;li&gt;Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to use the new pages&lt;/li&gt;
&lt;li&gt;Build and preview the site with Pelican&lt;/li&gt;
&lt;li&gt;Add, commit and push the changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;
&lt;h3 id="activate-our-virtual-environment-and-pull-the-most-recent-version-of-the-site-down-from-github"&gt;Activate our virtual environment and pull the most recent version of the site down from github&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Documents/staticsite
$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;staticsite&lt;/strong&gt; directory should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
│   ├── posts
│       ├── first_post.md
│       ├── second_post.md
│       ├── third_post.md
│       ├── fourth_post.md
│   ├── code
│       ├── sample_notebook.ipynb
│   ├── extra
│       ├── custom.css
│       ├── custom.js
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
│   ├── i18n_subsites
│   ├── liquid_tags
│   ├── pelican-ipynb
│   ├── tipue_search
├── pelican-themes
│   ├── pelican-bootstrap3
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="create-two-new-pages-md-files"&gt;Create two new &lt;em&gt;pages&lt;/em&gt; (&lt;strong&gt;&lt;em&gt;.md&lt;/em&gt;&lt;/strong&gt; files)&lt;/h3&gt;
&lt;p&gt;Up to this point, the top of our site has a menu item for [This site], which isn't very useful.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-bootstrap3_this_site_menu.png" src="https://professorkazarinoff.github.io/staticsite/images/pelican-bootstrap3_this_site_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;We are going to add two new menu items that link to two new &lt;em&gt;pages&lt;/em&gt;. These new menu items will be [About] and [Book]. First we'll create a &lt;strong&gt;pages&lt;/strong&gt; folder in the &lt;strong&gt;staticsite/content&lt;/strong&gt; directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ cd ~/Documents/staticsite/content
(staticsite) $ mkdir pages
(staticsite) $ cd pages
(staticsite) $ pwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we create two new &lt;strong&gt;&lt;em&gt;.md&lt;/em&gt;&lt;/strong&gt; files. Note that the header in this file is different from the other posts we've written. It has a very simple header; just one line: Title. We don't need to put in a date or a slug in the header of &lt;em&gt;pages&lt;/em&gt;, just in the header of &lt;em&gt;posts&lt;/em&gt;. The first markdown file is the &lt;strong&gt;about&lt;/strong&gt; page&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;about.md&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt;

&lt;span class="n"&gt;Why&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;


&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt;


&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt;


&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;hobbies&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second page is for the book I am writing, &lt;strong&gt;Python Programming for Undergraduate Engineers&lt;/strong&gt;. The text for the page is going to look something like:&lt;/p&gt;
&lt;p&gt;book.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;

&lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Coming&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Fall&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;

&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Programming&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Undergraduate&lt;/span&gt; &lt;span class="n"&gt;Engineers&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;undergraduate&lt;/span&gt; &lt;span class="n"&gt;engineers&lt;/span&gt; &lt;span class="n"&gt;learning&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;focused&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;programming&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt; &lt;span class="n"&gt;engineering&lt;/span&gt; &lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; 

&lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Preface&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Orientation&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Engineering&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Statics&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Circuits&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Strengths&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Circuits&lt;/span&gt; &lt;span class="n"&gt;II&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dynamics&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Circuits&lt;/span&gt; &lt;span class="n"&gt;III&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Chapter&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Capstone&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Appendix&lt;/span&gt;

&lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;soon&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the pages are saved, our &lt;strong&gt;staticsite directory&lt;/strong&gt; should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
│   ├── pages
│       ├── about.md
│       ├── book.md
│   ├── posts
│       ├── first_post.md
│       ├── second_post.md
│       ├── third_post.md
│       ├── fourth_post.md
│   ├── code
│       ├── sample_notebook.ipynb
│   ├── extra
│       ├── custom.css
│       ├── custom.js
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
│   ├── i18n_subsites
│   ├── liquid_tags
│   ├── pelican-ipynb
│   ├── tipue_search
├── pelican-themes
│   ├── pelican-bootstrap3
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="modify-pelicanconfpy-to-include-the-two-new-pages"&gt;Modify &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; to include the two new pages.&lt;/h3&gt;
&lt;p&gt;Pelican needs to know about the two "pages" files. Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to include the lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

# Paths
PATH = &amp;#39;content&amp;#39;
PAGE_PATHS = [&amp;#39;pages&amp;#39;]
ARTICLE_PATHS = [&amp;#39;posts&amp;#39;]

# Top menus
DISPLAY_CATEGORIES_ON_MENU = False
DISPLAY_PAGES_ON_MENU = True
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="build-and-preview-the-site-with-pelican"&gt;Build and preview the site with Pelican&lt;/h3&gt;
&lt;p&gt;With the two new page &lt;strong&gt;&lt;em&gt;.md&lt;/em&gt;&lt;/strong&gt; files created and the changes to &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; in place, let's preview the site again.  We build the site and serve up the contents in the &lt;strong&gt;output&lt;/strong&gt; folder with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view the site, point a browser to &lt;em&gt;localhost:8000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;ctrl-c&lt;/code&gt; to stop the server.&lt;/p&gt;
&lt;h3 id="add-and-commit-the-changes-then-push-them-to-github"&gt;Add and commit the changes then push them to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the the site, we add &lt;strong&gt;all of the changes&lt;/strong&gt; to our local git repo using &lt;code&gt;git add .&lt;/code&gt;. Commit those changes with &lt;code&gt;git commit&lt;/code&gt; and add the &lt;code&gt;-m "added about and book pages"&lt;/code&gt; flag to supply a commit message (make sure to use double quotes "commit message"). Push the changes up to github with &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;added about and book pages&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the next post we will publish the site to github pages. Once the site is published, it will be live and public. Available to any one with an internet connection. An actual, real, published, live static site!&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="git"></category><category term="github"></category></entry><entry><title>How I Build This Site - Part 5</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-5.html" rel="alternate"></link><published>2017-12-09T18:50:00-08:00</published><updated>2017-12-09T18:50:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-12-09:/staticsite/how-i-built-this-site-5.html</id><summary type="html">&lt;p&gt;This is the fifth part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-4.html"&gt;last post&lt;/a&gt;, we installed a couple of plugins to add extra functionality to the site. These plugins enabled embedded jupyter notebooks and posts in a series. In this post we'll put a search bar at the top right of each page and add some css and javascript in order to make tables on the site look better.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the fifth part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-4.html"&gt;last post&lt;/a&gt;, we installed a couple of plugins to add extra functionality to the site. These plugins enabled embedded jupyter notebooks and posts in a series. In this post we'll put a search bar at the top right of each page and add some css and javascript in order to make tables on the site look better.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post we are going to have a site with a working search bar and nice looking tables.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;Pull the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to use the &lt;strong&gt;'tipue_search'&lt;/strong&gt; plugin&lt;/li&gt;
&lt;li&gt;Add custom css and javascript to make tables look better&lt;/li&gt;
&lt;li&gt;Build and preview the site with Pelican&lt;/li&gt;
&lt;li&gt;Add, commit and push the changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's get started.&lt;/p&gt;
&lt;h3 id="activate-our-virtual-environment-and-pull-the-most-recent-version-of-the-site-down-from-github"&gt;Activate our virtual environment and pull the most recent version of the site down from github&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Documents/staticsite
$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;staticsite&lt;/strong&gt; directory should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
│   ├── posts
│       ├── first_post.md
│       ├── second_post.md
│       ├── third_post.md
│   ├── code
│       ├── sample_notebook.ipynb
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
│   ├── i18n_subsites
│   ├── liquid_tags
│   ├── pelican-ipynb
├── pelican-themes
│   ├── pelican-bootstrap3
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="add-the-tipue_search-plugin-to-the-pelicanconfpy-file"&gt;Add the &lt;strong&gt;'tipue_search'&lt;/strong&gt; plugin to the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file&lt;/h3&gt;
&lt;p&gt;Now we need to modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to use the &lt;strong&gt;'tipue_search'&lt;/strong&gt; plugin. This plugin will give us the ability to add a search bar to our site menu at the top right of each page. &lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;'tipue_search'&lt;/code&gt; to the &lt;code&gt;PLUGINS = [ ]&lt;/code&gt; list in the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file. Make sure each plugin is separated with commas and surrounded by quotes .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

PLUGINS = [
    &amp;#39;i18n_subsites&amp;#39;,
    &amp;#39;series&amp;#39;,
    &amp;#39;tag_cloud&amp;#39;,
    &amp;#39;liquid_tags.youtube&amp;#39;,
    &amp;#39;liquid_tags.notebook&amp;#39;,
    &amp;#39;liquid_tags.include_code&amp;#39;,
    &amp;#39;render_math&amp;#39;,
    &amp;#39;pelican-ipynb.markup&amp;#39;,
    &amp;#39;tipue_search&amp;#39; ] 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use the &lt;strong&gt;'tipue_search'&lt;/strong&gt; plugin, we also need to add the following line to the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

# for Tique Search Plugin
DIRECT_TEMPLATES = (&amp;#39;index&amp;#39;,&amp;#39;tags&amp;#39;, &amp;#39;categories&amp;#39;, &amp;#39;authors&amp;#39;, &amp;#39;archives&amp;#39;, &amp;#39;search&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="add-some-custom-css-and-javascript-to-make-tables-look-good"&gt;Add some custom css and javascript to make tables look good.&lt;/h3&gt;
&lt;p&gt;Even with a great theme like pelican-bootstrap3, there are some changes to make to the look of the site. One of these changes is to make tables look better, like the tables on github readme pages look. &lt;/p&gt;
&lt;p&gt;Let's make a new post in the &lt;strong&gt;content/posts&lt;/strong&gt; directory. This post will contain a markdown table using the &lt;code&gt;|&lt;/code&gt; (pipe) character and a header row with pipes separated by three dashes &lt;code&gt;---&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;fourth_post.md&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fourth&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fourth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Peter&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Kazarinoff&lt;/span&gt;
&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;
&lt;span class="n"&gt;Series_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;fourth&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;demonstrate&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;fourth&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;demonstrate&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;---|&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the post is saved, our &lt;strong&gt;staticsite directory&lt;/strong&gt; should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
│   ├── posts
│       ├── first_post.md
│       ├── second_post.md
│       ├── third_post.md
│       ├── fourth_post.md
│   ├── code
│       ├── sample_notebook.ipynb
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
│   ├── i18n_subsites
│   ├── liquid_tags
│   ├── pelican-ipynb
│   ├── tipue_search
├── pelican-themes
│   ├── pelican-bootstrap3
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To change the way that tables are rendered, we will add some custom css and javascript that is not included with the pelican-bootstrap3 theme. First create a new folder in the &lt;strong&gt;staticsite/content&lt;/strong&gt; directory called &lt;strong&gt;extra&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Dcouments/staticsite/content
mkdir extra &amp;amp;&amp;amp; cd extra
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the &lt;strong&gt;extra&lt;/strong&gt; folder, create a new &lt;strong&gt;&lt;em&gt;.css&lt;/em&gt;&lt;/strong&gt; file called &lt;strong&gt;&lt;em&gt;custom.css&lt;/em&gt;&lt;/strong&gt;. Insert the following style changes in &lt;strong&gt;&lt;em&gt;custom.css&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now create a new javascript file in the &lt;strong&gt;content/extra&lt;/strong&gt; directory called &lt;strong&gt;&lt;em&gt;custom.js&lt;/em&gt;&lt;/strong&gt;. This file contains extra javascript that will be injected into pages when the &lt;em&gt;.html&lt;/em&gt; is generated by Pelican.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var tables, i;
tables = document.getElementsByTagName(&amp;#39;table&amp;#39;);
for (i=0;i&amp;lt;tables.length;i++) {
  tables[i].className = &amp;#39;table table-bordered table-hover table-striped table-responsive&amp;#39;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the addition of these two new files, the contents of the &lt;strong&gt;staticsite&lt;/strong&gt; directory will look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
│   ├── posts
│       ├── first_post.md
│       ├── second_post.md
│       ├── third_post.md
│       ├── fourth_post.md
│   ├── code
│       ├── sample_notebook.ipynb
│   ├── extra
│       ├── custom.css
│       ├── custom.js
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
│   ├── i18n_subsites
│   ├── liquid_tags
│   ├── pelican-ipynb
│   ├── tipue_search
├── pelican-themes
│   ├── pelican-bootstrap3
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican needs to know about the two new "custom" files. Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to include the lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

CUSTOM_CSS = &amp;#39;static/css/custom.css&amp;#39;
CUSTOM_JS = &amp;#39;static/js/custom.js&amp;#39;

STATIC_PATHS = [ &amp;#39;extra&amp;#39; ]

EXTRA_PATH_METADATA = {
    &amp;#39;extra/custom.css&amp;#39;: {&amp;#39;path&amp;#39;: &amp;#39;static/css/custom.css&amp;#39;},
    &amp;#39;extra/custom.js&amp;#39;: {&amp;#39;path&amp;#39;: &amp;#39;static/js/custom.js&amp;#39;}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the site is built, Pelican will read in &lt;strong&gt;&lt;em&gt;custom.css&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;custom.js&lt;/em&gt;&lt;/strong&gt; siting in the &lt;strong&gt;extra&lt;/strong&gt; folder. Pelican will then copy these two files in the appropriate places in the &lt;strong&gt;output&lt;/strong&gt; directory (static/css/custom.css and static/css/custom.js) for the theme to use. Then the code from the css and javascript files will be used by the &lt;em&gt;.html&lt;/em&gt; pages in the output directory along with the other css and javascript from the bootstrap3 theme. This will make tables look more like tables in github readme pages. &lt;/p&gt;
&lt;h3 id="build-and-preview-the-site-with-pelican"&gt;Build and preview the site with Pelican&lt;/h3&gt;
&lt;p&gt;With the search plugin configured, a new posts containing a table written, plus our &lt;strong&gt;&lt;em&gt;custom.js&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;custom.css&lt;/em&gt;&lt;/strong&gt; in place, let's preview the site again.  We build the site and serve up the contents in the &lt;strong&gt;output&lt;/strong&gt; folder with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view the site, point a browser to &lt;em&gt;localhost:8000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;ctrl-c&lt;/code&gt; to stop the server.&lt;/p&gt;
&lt;h3 id="add-and-commit-the-changes-then-push-them-to-github"&gt;Add and commit the changes then push them to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the the site, we add &lt;strong&gt;all of the changes&lt;/strong&gt; to our local git repo using &lt;code&gt;git add .&lt;/code&gt;. Commit those changes with &lt;code&gt;git commit&lt;/code&gt; and add the &lt;code&gt;-m "added search and tables"&lt;/code&gt; flag to supply a commit message (make sure to use double quotes "commit message"). Push the changes up to github with &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;added search and tables&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the next post we will add two new menu items across the top of our site. These new menu items will link to an [About] page and a [Book] page.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="css"></category><category term="javascript"></category></entry><entry><title>How I Build This Site - Part 4</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-4.html" rel="alternate"></link><published>2017-12-08T18:50:00-08:00</published><updated>2017-12-08T18:50:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-12-08:/staticsite/how-i-built-this-site-4.html</id><summary type="html">&lt;p&gt;This is the fourth part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-3.html"&gt;last post&lt;/a&gt;, we installed the pelican-bootstrap3 theme and made our site mobile responsive. Now the site looks good on all devices.  In this post we are going to install a couple of plugins to add extra functionality to our site. These plugins will allow our site to have a series of post that are linked together, create a working search bar, add youtube videos to posts, view LaTeX math and add embedded jupyter notebooks in posts.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the fourth part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-3.html"&gt;last post&lt;/a&gt;, we installed the pelican-bootstrap3 theme and made our site mobile responsive. Now the site looks good on all devices.  In this post we are going to install a couple of plugins to add extra functionality to our site. These plugins will allow our site to have a series of post that are linked together, create a working search bar, add youtube videos to posts, view LaTeX math and add embedded jupyter notebooks in posts.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post we are going to have a great looking website that contains a two-part series, a post with an embedded youtube video and a post that contains an embedded jupyter notebook.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;Pull the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;jupyter&lt;/code&gt; in our &lt;code&gt;staticsite&lt;/code&gt; environment&lt;/li&gt;
&lt;li&gt;Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to use new plugins&lt;/li&gt;
&lt;li&gt;Build some posts that will allow us to view the new plugins&lt;/li&gt;
&lt;li&gt;Build and preview the site with Pelican&lt;/li&gt;
&lt;li&gt;Add and commit the changes then push those changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Seems like a lot to do, so let's get started.&lt;/p&gt;
&lt;h3 id="activate-our-virtual-environment-and-pull-the-most-recent-version-of-the-site-down-from-github"&gt;Activate our virtual environment and pull the most recent version of the site down from github&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Documents/staticsite
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ &lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="install-the-jupyter-package-in-our-staticsite-virtual-environment"&gt;Install the &lt;code&gt;jupyter&lt;/code&gt; package in our &lt;code&gt;staticsite&lt;/code&gt; virtual environment.&lt;/h3&gt;
&lt;p&gt;I like using &lt;strong&gt;jupyter notebooks&lt;/strong&gt; to build code and solve engineering problems with Python. A &lt;strong&gt;jupyter notebook&lt;/strong&gt; can contain Python code, the output produced when this code is run and markup text (used for documentation).  &lt;strong&gt;Jupyter notebooks&lt;/strong&gt; can also easily display &lt;code&gt;matplotlib&lt;/code&gt; plots and &lt;code&gt;pandas&lt;/code&gt; data frames. These two Python packages are very useful for engineers solving problems in teams. As the &lt;code&gt;jupyter&lt;/code&gt; package is in the main conda channel, we can install it into our virtual environment using the &lt;code&gt;conda install&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ conda install jupyter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see all of the modules installed in our &lt;code&gt;(staticsite)&lt;/code&gt; environment with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ pip freeze
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;appnope==0.1.0
bleach==2.1.1
blinker==1.4
certifi==2017.11.5
decorator==4.1.2
docutils==0.14
entrypoints==0.2.3
feedgenerator==1.9
html5lib==0.999999999
ipykernel==4.6.1
ipython==6.2.1
ipython-genutils==0.2.0
ipywidgets==7.0.5
jedi==0.11.0
Jinja2==2.10
jsonschema==2.6.0
jupyter-client==5.1.0
jupyter-console==5.2.0
jupyter-core==4.4.0
Markdown==2.6.9
MarkupSafe==1.0
mistune==0.8.1
nbconvert==5.3.1
nbformat==4.4.0
notebook==5.2.2
pandocfilters==1.4.2
parso==0.1.0
pelican==3.7.1
pexpect==4.3.0
pickleshare==0.7.4
prompt-toolkit==1.0.15
ptyprocess==0.5.2
Pygments==2.2.0
python-dateutil==2.6.1
pytz==2017.3
pyzmq==16.0.3
qtconsole==4.3.1
simplegeneric==0.8.1
six==1.11.0
terminado==0.6
testpath==0.3.1
tornado==4.5.2
traitlets==4.3.2
Unidecode==0.4.21
wcwidth==0.1.7
webencodings==0.5.1
widgetsnbextension==3.0.8
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="add-new-plugins-to-the-pelicanconfpy-file"&gt;Add new plugins to the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file&lt;/h3&gt;
&lt;p&gt;Now we need to modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to use a couple new plugins. The plugins we will add are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;'series'&lt;/li&gt;
&lt;li&gt;'tag_cloud',&lt;/li&gt;
&lt;li&gt;'liquid_tags.youtube'&lt;/li&gt;
&lt;li&gt;'liquid_tags.notebook',&lt;/li&gt;
&lt;li&gt;'liquid_tags.include_code',&lt;/li&gt;
&lt;li&gt;'render_math'&lt;/li&gt;
&lt;li&gt;'pelican-ipynb.markup'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We add these to the &lt;code&gt;PLUGINS = [ ]&lt;/code&gt; list in the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file and separate them with commas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

PLUGINS = [
    &amp;#39;i18n_subsites&amp;#39;,
    &amp;#39;series&amp;#39;,
    &amp;#39;tag_cloud&amp;#39;,
    &amp;#39;liquid_tags.youtube&amp;#39;,
    &amp;#39;liquid_tags.notebook&amp;#39;,
    &amp;#39;liquid_tags.include_code&amp;#39;,
    &amp;#39;render_math&amp;#39;,
    &amp;#39;pelican-ipynb.markup&amp;#39; ] 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="build-some-posts-that-use-the-newly-installed-plugins"&gt;Build some posts that use the newly installed plugins&lt;/h3&gt;
&lt;p&gt;Now we will build a couple of posts which use our newly installed plugins. First we'll modify our content directory with a new folder called &lt;strong&gt;posts&lt;/strong&gt;.  We'll keep all the posts in this directory. Then we'll make a couple of new &lt;strong&gt;&lt;em&gt;.md&lt;/em&gt;&lt;/strong&gt; files. I'll copy our first post to this new directory with the &lt;code&gt;cp&lt;/code&gt; (copy) shell command and then remove the old &lt;strong&gt;&lt;em&gt;.md&lt;/em&gt;&lt;/strong&gt; file with the &lt;code&gt;rm&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pwd
cd content
mkdir posts
cp first_post.md posts/first_post.md
rm first_post.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's modify the &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt; file with a couple new lines in the header.  The &lt;code&gt;Series:&lt;/code&gt; and &lt;code&gt;Series_index:&lt;/code&gt; lines will put this first post in series of posts using the &lt;strong&gt;series&lt;/strong&gt; plugin. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Peter&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Kazarinoff&lt;/span&gt;
&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;
&lt;span class="n"&gt;Series_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;demonstration&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;demonstration&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the post is saved, we can go back to the terminal and copy it to create our second post. The contents of our &lt;strong&gt;staticsite directory&lt;/strong&gt; should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
│   ├── posts
│       ├── first_post.md
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
│   ├── i18n_subsites
│   ├── liquid_tags
│   ├── pelican-ipynb
│   ├── tipue_search
├── pelican-themes
│   ├── pelican-bootstrap3
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's make two new posts in the &lt;strong&gt;content/posts&lt;/strong&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Documents/staticsite/content/posts
cp first_post.md second_post.md
cp first_post.md third_post.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll edit &lt;strong&gt;&lt;em&gt;second_post.md&lt;/em&gt;&lt;/strong&gt; so it's part of a series and contains an embedded YouTube video.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;second_post.md&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Second&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Peter&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Kazarinoff&lt;/span&gt;
&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;
&lt;span class="n"&gt;Series_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;embeded&lt;/span&gt; &lt;span class="n"&gt;youtube&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;embedded&lt;/span&gt; &lt;span class="n"&gt;youtube&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;{%&lt;/span&gt; &lt;span class="n"&gt;youtube&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;youtube&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Qq&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;frjUfK0&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;560&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;315&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll create a sample &lt;strong&gt;jupyter notebook&lt;/strong&gt; in a new folder called &lt;strong&gt;code&lt;/strong&gt; in our &lt;strong&gt;content&lt;/strong&gt; folder. The &lt;strong&gt;jupyter notebook&lt;/strong&gt; will go in our third post. To create the &lt;strong&gt;code&lt;/strong&gt; folder and bring up a new &lt;strong&gt;jupyter notebook&lt;/strong&gt; in our web browser use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ pwd
(staticsite) $ mkdir content/code
(staticsite) $ cd content/code
(staticsite) $ jupyter notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's put one markdown cell, one code cell and produce one output cell in our &lt;strong&gt;jupyter notebook&lt;/strong&gt;. We'll save it as &lt;strong&gt;&lt;em&gt;example_notebook.ipynb&lt;/em&gt;&lt;/strong&gt;. My &lt;strong&gt;&lt;em&gt;sample_notebook.ipynb&lt;/em&gt;&lt;/strong&gt; looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="example jupyter notebook" src="https://professorkazarinoff.github.io/staticsite/images/jupyter_notebook_sample_example.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we will put our &lt;strong&gt;&lt;em&gt;example_notebook.ipynb&lt;/em&gt;&lt;/strong&gt; into our third post. Including a &lt;strong&gt;juypter notebook&lt;/strong&gt; requires the use of the line &lt;code&gt;notebook path/to/notebook.ipynb&lt;/code&gt; surrounded with a &lt;code&gt;{&lt;/code&gt; &lt;code&gt;%&lt;/code&gt;   &lt;code&gt;%&lt;/code&gt; &lt;code&gt;}&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;third_post.md&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Third&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Peter&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Kazarinoff&lt;/span&gt;
&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;
&lt;span class="n"&gt;Series_index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;jupyter&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;


&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;jupyter&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;{%&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;../&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample_notebook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ipynb&lt;/span&gt; &lt;span class="o"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="build-and-preview-the-site-with-pelican"&gt;Build and preview the site with Pelican&lt;/h3&gt;
&lt;p&gt;With a couple new &lt;strong&gt;pelican-plugins&lt;/strong&gt; configured and three new posts written, it is time to preview our site again.  We can build the site and can view it with a web browser using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view the site, point a browser to &lt;em&gt;localhost:8000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;ctrl-c&lt;/code&gt; to stop the server.&lt;/p&gt;
&lt;h3 id="add-and-commit-the-changes-then-push-them-to-github"&gt;Add and commit the changes then push them to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the the site, we add &lt;strong&gt;all of the changes&lt;/strong&gt; to our local git repo using &lt;code&gt;git add .&lt;/code&gt;. Then we commit those changes with &lt;code&gt;git commit&lt;/code&gt; and add the &lt;code&gt;-m "added plugins"&lt;/code&gt; flag to give supply a commit message (make sure to use double quotes "commit message"). To push those changes up to github use &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;added plugins&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the next post we will customize the site. We'll add some css in order to make tables on the site look better and put a search bar at the top of the page.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="jupyter"></category></entry><entry><title>How I Build This Site - Part 3</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-3.html" rel="alternate"></link><published>2017-12-04T14:15:00-08:00</published><updated>2017-12-04T14:15:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-12-04:/staticsite/how-i-built-this-site-3.html</id><summary type="html">&lt;p&gt;This is the third part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html"&gt;last post&lt;/a&gt;, we used &lt;code&gt;pelican-quickstart&lt;/code&gt; to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile responsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html"&gt;last post&lt;/a&gt;, we used &lt;code&gt;pelican-quickstart&lt;/code&gt; to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile reponsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post we are going to have a a static site with a great looking bootstrap3 theme which is mobile responsive and looks great on desktops, tablets and phones.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;Pull the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Add a git submodule to our &lt;strong&gt;staticsite&lt;/strong&gt; folder and bring in the pelican-themes repo from github&lt;/li&gt;
&lt;li&gt;Add a git submodule to our &lt;strong&gt;staticsite&lt;/strong&gt; folder and bring in the pelican-plugins repo from github&lt;/li&gt;
&lt;li&gt;Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file to point to our new theme, and add a new plugin&lt;/li&gt;
&lt;li&gt;Build and preview the site with Pelican&lt;/li&gt;
&lt;li&gt;Add and commit the changes then push those changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Big steps, it's really going to look like a website when we are done.&lt;/p&gt;
&lt;h3 id="activate-our-virtual-environment-and-pull-from-github"&gt;Activate our virtual environment and pull from github&lt;/h3&gt;
&lt;p&gt;Open the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; and activate the &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then cd into the &lt;strong&gt;staticsite&lt;/strong&gt; directory and bring in the most up to date version of the site stored on github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ cd ~
(staticsite) $ cd Documents/staticsite
(staticsite) $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="use-git-submodule-add-to-pull-all-of-the-themes-into-our-local-staticsitepelican-themes-directory"&gt;Use git submodule add to pull all of the themes into our local &lt;strong&gt;staticsite/pelican-themes&lt;/strong&gt; directory&lt;/h3&gt;
&lt;p&gt;There are a bunch of different themes available for static site built with Pelican. The three I was most interested in were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;material&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;voidy_bootstrap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pelican-bootstrap3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can bring in all of the Pelican themes stored on github by creating a &lt;em&gt;git submodule&lt;/em&gt;. A git submodule is a sub-repository within a git repository that is linked to another repository. It is a way to bring in something else from github within a local repository and not have to keep a local copy up to date. Each time we "pull" from the submodule, we get the newest version of the pelican-themes repo on github. We don't have to manually track any changes to these themes and incorporate them to our local version. When the changes are made to the themes on github, we just pull those changes down to our local version. The lines &lt;code&gt;git submodule init&lt;/code&gt; and &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; are important to call. If those two commands are not moved we'll end up with empty folders within the &lt;strong&gt;staticsite/pelican-themes&lt;/strong&gt; directory. A lot of the themes are submodules themselves so the &lt;code&gt;--recursive&lt;/code&gt; option has to be used to pull all of these submodules down. Without &lt;code&gt;--recursive&lt;/code&gt; you can end up with empty folders.&lt;/p&gt;
&lt;p&gt;To create the folder for our pelican-themes git submodule, ensure you are in the staticsite folder, then call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;

$ git submodule add https://github.com/getpelican/pelican-themes.git
$ git submodule init
$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ensure that we are still in the &lt;strong&gt;staticsite&lt;/strong&gt; directory and pull down the pelican-plugins repo form github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;

$ git submodule add https://github.com/getpelican/pelican-plugins.git
$ git submodule init
$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the contents of the &lt;strong&gt;staticsite&lt;/strong&gt; folder should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
├── pelican-themes
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="modify-the-pelicanconfpy-file-so-that-we-can-use-a-new-theme"&gt;Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file, so that we can use a new theme.&lt;/h3&gt;
&lt;p&gt;So far our &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file contains only default lines of code that Pelican built for us. In order to use a new theme, we need to edit this configuration file. After we edit the configuration file, the &lt;code&gt;make html&lt;/code&gt; command will produce new .html pages in the &lt;strong&gt;output&lt;/strong&gt; directory. The relevant lines to add and modify in the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

PLUGIN_PATHS = [&amp;#39;pelican-plugins&amp;#39;]

THEME = &amp;#39;pelican-themes/pelican-bootstrap3&amp;#39;
BOOTSTRAP_THEME = &amp;#39;flatly&amp;#39;

PLUGIN_PATHS = [&amp;#39;/path/to/git/pelican-plugins&amp;#39;]
JINJA_ENVIRONMENT = {&amp;#39;extensions&amp;#39;: [&amp;#39;jinja2.ext.i18n&amp;#39;]}
PLUGINS = [
    &amp;#39;i18n_subsites&amp;#39;]

I18N_TEMPLATES_LANG = &amp;#39;en&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Taken directly from the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelicin-bootstrap3 README.md&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... this template can be translated (see Translations below). You also need to activate a plugin that initializes the i18n jinja extension. One possibility is an up to date version of the i18n_subsites plugin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we need to make sure to include the &lt;strong&gt;i18n&lt;/strong&gt; plugin in our &lt;strong&gt;&lt;em&gt;pelicanonf.py&lt;/em&gt;&lt;/strong&gt; file. Again from the from the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelicin-bootstrap3 README.md&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are using i18n_subsites and you are not using English as your default language, make sure to also correctly specify the default language of the theme. Otherwise the translations will not be used on your default site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="build-and-preview-the-site-with-pelican"&gt;Build and preview the site with Pelican&lt;/h3&gt;
&lt;p&gt;With the &lt;strong&gt;pelican-plugins&lt;/strong&gt; and &lt;strong&gt;pelican-themes&lt;/strong&gt; repos downloaded and the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file edited, we can build the site and take a look at it with a web browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view the site, point a brower to &lt;em&gt;localhost:8000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, the site should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-boostrap3-basic-site.png" src="https://professorkazarinoff.github.io/staticsite/images/simple_pelican-bootstrap3_theme.png"&gt;&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;ctrl-c&lt;/code&gt; to shut down the server.&lt;/p&gt;
&lt;h3 id="add-and-commit-the-changes-then-push-those-changes-to-github"&gt;Add and commit the changes then push those changes to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the the site, we add &lt;strong&gt;all of the changes&lt;/strong&gt; to our local git repo using &lt;code&gt;git add .&lt;/code&gt;. Then we commit those changes with &lt;code&gt;git commit&lt;/code&gt; and add the &lt;code&gt;-m "added pelican_bootstrap3 theme"&lt;/code&gt; flag to give supply a commit message (make sure to use double quotes "commit message"). To push those changes up to github use &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;added pelican_bootstrap3 theme&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-4.html"&gt;next post&lt;/a&gt; we will add some additional &lt;em&gt;pelican-plugins&lt;/em&gt; to bring extra functionality to the site and add the ability to include &lt;strong&gt;jupyter notebooks&lt;/strong&gt; in posts.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="markdown"></category></entry><entry><title>How I Build This Site - Part 2</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html" rel="alternate"></link><published>2017-11-28T14:15:00-08:00</published><updated>2017-11-28T14:15:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-28:/staticsite/how-i-built-this-site-2.html</id><summary type="html">&lt;p&gt;This is the second part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-1.html"&gt;last post&lt;/a&gt;, we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground. We are also going to create a &lt;strong&gt;first_post.md&lt;/strong&gt; file and serve up the website locally so we can take a look at it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-1.html"&gt;last post&lt;/a&gt;, we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground. We are also going to create a &lt;strong&gt;first_post.md&lt;/strong&gt; file and serve up the website locally so we can take a look at it.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post, we will have a working website with one blog post served up locally and an updated github repo with all the changes saved.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pull&lt;/em&gt; the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to make a first version of the site&lt;/li&gt;
&lt;li&gt;Write a first post in markup language (.md)&lt;/li&gt;
&lt;li&gt;Build the site using the &lt;code&gt;make html&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Serve the site locally using &lt;code&gt;make serve&lt;/code&gt; and view with a web browser&lt;/li&gt;
&lt;li&gt;Add and commit the changes then push those changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's a lot to do, so let's get started.&lt;/p&gt;
&lt;h3 id="activate-our-staticsite-virtual-environment"&gt;Activate our &lt;strong&gt;staticsite&lt;/strong&gt; virtual environment&lt;/h3&gt;
&lt;p&gt;I highly recommend installing the Anaconda distribution of python. If you followed along with the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-1.html"&gt;previous post&lt;/a&gt;, you already installed Anaconda and can pull up the Anaconda prompt. Open the Anaconda Prompt and see which virtual environments are available.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda info --envs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a list of all the virtual environments conda has created on your machine. It should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite                  C:\Users\user.name\AppData\Local\Continuum\Anaconda3\envs\staticsite
root                     *  C:\Users\user.name\AppData\Local\Continuum\Anaconda3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;staticsite&lt;/code&gt; virtual environment is the one we set up to create our site. Activate it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see &lt;code&gt;(staticsite)&lt;/code&gt; before the command prompt. This means we are operating in the &lt;code&gt;staticsite&lt;/code&gt; virtual environment. &lt;/p&gt;
&lt;h3 id="view-installed-packages"&gt;View installed packages&lt;/h3&gt;
&lt;p&gt;We installed pelican, markdown and fabric in the last post. Let's make sure they are installed in our &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ pip freeze
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you see the following modules are installed: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;beautifulsoup4==4.6.0
Jinja2==2.9.6
Fabric==1.14.0
Markdown==2.6.9
pelican==3.7.1
Pygments==2.2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pelican-quickstart-make-the-site"&gt;Pelican Quickstart - make the site!&lt;/h3&gt;
&lt;p&gt;We are now going to build the site! Exciting stuff. With the virtual environment and packages in place, we just need to make sure we are in a directory where we want our site to live.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ cd ~
(staticsite)$ cd Documents
(staticsite)$ cd staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can confirm you are working in the staticsite directory by typing &lt;code&gt;pwd&lt;/code&gt; which stands for &lt;em&gt;print working directory&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(staticsite)$ pwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can spin up the settings and structure of our pelican build. Start the process with the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican will ask us a bunch of questions at the start. The initial settings I used are below. Make sure to change the title, author, URL prefix, and timezone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? Python Programming for Undergraduate Engineers
&amp;gt; Who will be the author of this web site? Peter D. Kazarinoff
&amp;gt; What will be the default language of this web site? [English]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) Y
&amp;gt; What is your URL prefix? (see above example; no trailing slash) https://username.github.io/staticsite
&amp;gt; Do you want to enable article pagination? (Y/n) Y
&amp;gt; How many articles per page do you want? [10] 5
&amp;gt; What is your time zone? [Europe/Paris] America/Los_Angeles
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) Y
&amp;gt; Do you want to upload your website using FTP? (y/N) N
&amp;gt; Do you want to upload your website using SSH? (y/N) N
&amp;gt; Do you want to upload your website using Dropbox? (y/N) N
&amp;gt; Do you want to upload your website using S3? (y/N) N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can create and view the site. The command &lt;code&gt;make html&lt;/code&gt; will create the site and the command &lt;code&gt;make serve&lt;/code&gt; will spin up a local webserver that allows us to view the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ make html
(staticsite)$ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Point a web browser to: &lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="local host in browser" src="https://professorkazarinoff.github.io/staticsite/images/browser_to_localhost8000.png"&gt;&lt;/p&gt;
&lt;p&gt;The site will look something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="default pelican site" src="https://professorkazarinoff.github.io/staticsite/images/default_site_no_posts.png"&gt;&lt;/p&gt;
&lt;p&gt;We can shut down the server by typing &lt;code&gt;ctrl-c&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="write-a-first-post-in-markup-language-md"&gt;Write a first post in markup language (.md)&lt;/h3&gt;
&lt;p&gt;Time to write our first post. The contents of the &lt;strong&gt;staticsite&lt;/strong&gt; directory should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
│   develop_server.sh
│   fabfile.py
│   Makefile
│   pelicanconf.py
│   publishconf.py
│
├───content
├───output
└───__pycache__
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make a new post, we need to add a markup file (.md file) to the &lt;strong&gt;content&lt;/strong&gt; folder. Let's call our first post &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt;. Depending on the computer I'm using, I create .md files with different programs. One Windows 10, I have been using Code Writer. On Mac OSX and Linux, I use &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;. The &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt; file saved in the content folder needs to have the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Peter&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Kazarinoff&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After saving the file &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt; in the &lt;strong&gt;content&lt;/strong&gt; folder, the static site folder should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
│   develop_server.sh
│   fabfile.py
│   Makefile
│   pelicanconf.py
│   publishconf.py
│
├───content
│       first_post.md
│
├───output
└───__pycache__
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's build the site again and take a look at our new post&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ make html
(staticsite)$ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, point a web browser to: &lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="local host in browser" src="https://professorkazarinoff.github.io/staticsite/images/browser_to_localhost8000.png"&gt;&lt;/p&gt;
&lt;p&gt;The site will look something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="default pelican site" src="https://professorkazarinoff.github.io/staticsite/images/default_site_1_post.png"&gt;&lt;/p&gt;
&lt;p&gt;It works! I can see the first post!&lt;/p&gt;
&lt;p&gt;We can shut down the server by typing &lt;code&gt;ctrl-c&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="add-and-commit-the-changes-then-push-the-changes-to-github"&gt;Add and commit the changes then push the changes to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the posts and the site, we &lt;strong&gt;add all&lt;/strong&gt; of the changes to our local git repo using &lt;code&gt;git add .&lt;/code&gt; Then we commit these changes with &lt;code&gt;git commit&lt;/code&gt; and use the &lt;code&gt;-m "created pelcian static site"&lt;/code&gt; flag to supply a commit message (make sure to use double quotes "commit message"). Push those changes up to github with &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;created pelican static site&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-3.html"&gt;next post&lt;/a&gt;, we will customize the site with a &lt;em&gt;pelican-theme&lt;/em&gt; called &lt;strong&gt;pelican-bootstrap3&lt;/strong&gt;.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="markdown"></category></entry><entry><title>How I Build This Site - Part 1</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-1.html" rel="alternate"></link><published>2017-11-22T12:40:00-08:00</published><updated>2017-11-22T12:40:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-22:/staticsite/how-i-built-this-site-1.html</id><summary type="html">&lt;p&gt;This is the first part of a multi-part series on how I built this site. In this first post, I'll review the development environment, Python, virtual environments, installing the necessary packages and setting up git.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environment, installing Python, virtual environments, installing the necessary packages and setting up git.&lt;/p&gt;
&lt;h3 id="setting-up-the-development-environment"&gt;Setting up the development environment&lt;/h3&gt;
&lt;p&gt;What does that even mean? Before I started building this site I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a &lt;em&gt;development environment&lt;/em&gt;. To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An operating system: This website was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS).&lt;/li&gt;
&lt;li&gt;Python: Python 3.6 (legacy Python is version 2.7)&lt;/li&gt;
&lt;li&gt;Anaconda: The Anaconda Prompt and the Anaconda Python distribution&lt;/li&gt;
&lt;li&gt;Github.com and git: Four different computers were used build the site. Github is the central place where the most up-to-date version of the site is kept. &lt;/li&gt;
&lt;li&gt;Pelican: A static site generator written in Python. Pelican will build the site from a settings file (pelicanconf.py) and posts written in markdown (.md files)&lt;/li&gt;
&lt;li&gt;Markdown: the posts on this website are written in markdown, or .md format&lt;/li&gt;
&lt;li&gt;fabric and make: fabric is a Python package to automate builds and tasks. Fabric works on Windows. Make is used on MacOSX and Linux to build the site and serve up a demo version of the site.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="installing-python-the-anaconda-distribution"&gt;Installing Python (the Anaconda distribution)&lt;/h3&gt;
&lt;p&gt;I highly recommend installing the Anaconda distribution of Python. I have the Anaconda distribution installed on all the computers I used to build this site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows 10 Desktop at work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac OSX laptop at work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac OSX laptop at home&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux (Ubuntu 16.04 LTS) Desktop at home. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. &lt;/p&gt;
&lt;p&gt;Download the latest release at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.anaconda.com/download/"&gt;https://www.anaconda.com/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Anaconda distribution of Python comes with an up-to-date and stable version of Python (Python 3.6) and the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. The &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; is useful because it allows me to run shell commands on my Windows 10 machine at work. These are the same commands I would run in the terminal on my Mac OSX or Linux boxes. The &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; makes creating and logging into virtual environments easy and allows me to use git on Windows 10. Follow this post to &lt;a href="https://professorkazarinoff.github.io/staticsite/installing-anaconda-on-windows.html"&gt;install the Anaconda on Windows 10.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="create-a-new-virtual-environment"&gt;Create a new virtual environment&lt;/h3&gt;
&lt;p&gt;Before downloading Pelican, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment &lt;strong&gt;&lt;em&gt;staticsite&lt;/em&gt;&lt;/strong&gt;. The &lt;code&gt;conda create&lt;/code&gt; command creates the environment and the &lt;code&gt;-n staticsite&lt;/code&gt; flag adds the name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda create -n staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a new virtual environment called &lt;strong&gt;&lt;em&gt;staticsite&lt;/em&gt;&lt;/strong&gt;. Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment &lt;strong&gt;&lt;em&gt;staticsite&lt;/em&gt;&lt;/strong&gt; is created, we need to activate it and start using it with the command:&lt;/p&gt;
&lt;p&gt;On Mac OSX or Linux&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or on Windows 10&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should now see &lt;code&gt;(staticsite)&lt;/code&gt; before the terminal prompt. This means we are using the &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment.&lt;/p&gt;
&lt;h3 id="install-pelican"&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;Time for some fun! Installing Pelican. Pelican is a Python package that creates static websites. Static sites are websites that only have html, css and javascript. A static site is not connected to a database and there is no code run on the server side. The server just serves static files (html, css, javascript) to the client when the client requests them. In order to install Pelican, we need to install &lt;code&gt;pip&lt;/code&gt; first. On my Linux and Mac OSX machines, the command line tool &lt;strong&gt;git&lt;/strong&gt; is already installed. If using Windows 10, &lt;strong&gt;git&lt;/strong&gt; may not be available. To keep the development environments the same when using Windows 10, you will also need &lt;code&gt;conda&lt;/code&gt; to &lt;code&gt;install git&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ conda install pip
(staticsite)$ conda install git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once &lt;code&gt;pip&lt;/code&gt; is installed, we can install &lt;code&gt;pelican&lt;/code&gt; and &lt;code&gt;markdown&lt;/code&gt;. These are two of the core pieces we need to build the website. &lt;code&gt;fabric3&lt;/code&gt; is also installed because we'll use it to build and demo the site on Windows. &lt;code&gt;bs4&lt;/code&gt; is the beautiful soup package. Some of the pelican plugins to be installed later will depend on &lt;code&gt;bs4&lt;/code&gt; to function properly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ pip install pelican
(staticsite)$ pip install markdown
(staticsite)$ pip install fabric3
(staticsite)$ pip install bs4
(staticsite)$ pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="create-a-github-account-and-create-a-new-repository"&gt;Create a github account and create a new repository&lt;/h3&gt;
&lt;p&gt;While I was making the site, it became clear that I had to keep track of &lt;strong&gt;&lt;em&gt;version control&lt;/em&gt;&lt;/strong&gt;. I would make some changes to the site on my computer at work, then come home and make more changes to the site. Bringing a USB thumb drive back and forth was hard. I would forget the thumb drive at work or home and then could not edit the site. Or worse, I'd edit the site in both places and try to remember which changes were made where and which was the best version. Ah!&lt;/p&gt;
&lt;p&gt;The solution is to use &lt;strong&gt;git&lt;/strong&gt; and &lt;strong&gt;github&lt;/strong&gt;. Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. Github.com is the where the site content and settings are remotely stored and integrates easily with git. &lt;/p&gt;
&lt;p&gt;To sign up for a github.com account go here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/join"&gt;https://github.com/join&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The account activation screen looks something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github.com Join" src="../images/join_github.png"&gt;&lt;/p&gt;
&lt;p&gt;Once the account is set up, log in and create a new repository. Use the + button on the upper right-hand menu:&lt;/p&gt;
&lt;p&gt;&lt;img alt="new github repo" src="../images/new_github_repo.png"&gt;&lt;/p&gt;
&lt;p&gt;I named the new repository: &lt;strong&gt;staticsite&lt;/strong&gt; and included both a &lt;strong&gt;README.md&lt;/strong&gt; and a &lt;strong&gt;GNU General Public License v3.0&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="new github repo details" src="../images/create_a_new_repo_details.png"&gt;&lt;/p&gt;
&lt;h3 id="make-a-directory-for-the-site-and-link-it-to-github"&gt;Make a directory for the site and link it to github&lt;/h3&gt;
&lt;p&gt;Once the github repo (short for repository, basically a folder with files on github.com) is set up, the last step to complete the development environment is to link the remote repo on github to the local version of the site on my computer. &lt;/p&gt;
&lt;p&gt;The local version is in a folder call &lt;code&gt;staticsite&lt;/code&gt; in the &lt;code&gt;Documents&lt;/code&gt; folder. The &lt;code&gt;staticsite&lt;/code&gt; folder will contain all the files used to build the site and the output files created by Pelican that &lt;em&gt;are&lt;/em&gt; the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ cd ~
(staticsite)$ cd Documents
(staticsite)$ mkdir staticsite
(staticsite)$ cd staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can set up git to keep the contents of the local staticsite folder in sync with the contents of the staticsite repo on github.com. The command &lt;code&gt;git init&lt;/code&gt; will initiate or create the local repository. The command &lt;code&gt;git remote add origin&lt;/code&gt; followed by the url of our github repo links local folder to the remote repo on github. Note the web address ends in &lt;code&gt;.git&lt;/code&gt;. If you are following along and want to build your own static site, make sure to change &lt;code&gt;username&lt;/code&gt; to your github username and &lt;code&gt;reponame&lt;/code&gt; to your github repo name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git remote add origin https://github.com/username/reponame.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now for the git magic. On github.com we have a README.md file and a licence. But the local staticsite folder on the computer is empty. So the two folders aren't in sync. To make the contents of each folder identical, we &lt;strong&gt;&lt;em&gt;pull&lt;/em&gt;&lt;/strong&gt; the files from github onto the local computer. A &lt;strong&gt;&lt;em&gt;pull&lt;/em&gt;&lt;/strong&gt; "pulls" or gets the files from github and copies them to the local staticsite folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you look in the local staticsite folder you should now see the following two files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite
├── LICENSE
├── README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The development environment is set! On to building the site!&lt;/p&gt;
&lt;p&gt;Now each time I work on the site, I navigate to the &lt;strong&gt;staticsite&lt;/strong&gt; folder on whatever computer I am using. Before any editing, I key in the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the &lt;em&gt;pull&lt;/em&gt;, the staticsite folder is up-to-date with the newest version of all the files on github. Then I go about editing files, writing posts, changing settings, etc. After the edits, the last thing I do before shutting down the computer for the day is add all the changes to git with &lt;code&gt;git add .&lt;/code&gt; (note there is a space between the &lt;code&gt;add&lt;/code&gt; and the period &lt;code&gt;.&lt;/code&gt;). Then commit those changes locally with the line &lt;code&gt;git commit -m "commit message"&lt;/code&gt; (note there are double quotes &lt;code&gt;"commit message"&lt;/code&gt; used around the commit message), and finally push the changes up to github.com with &lt;code&gt;git push origin master&lt;/code&gt;. Now the version of the site up on github.com is the same as the version of the site on my local machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;commit message&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ensures all of my computers and the github repo contain the same version of the site.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html"&gt;next post&lt;/a&gt; we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground, write our first post and view a demo version of the site.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="staticsite"></category></entry></feed>