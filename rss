<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Python for Undergraduate Engineers</title><link>https://pythonforundergradengineers.com/</link><description></description><lastBuildDate>Mon, 20 Jun 2022 09:15:00 -0700</lastBuildDate><item><title>How to do Trig with Python</title><link>https://pythonforundergradengineers.com%5Chow-to-do-trig-with-Python.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/how-to-do-trig-with-Python.html"&gt;&lt;img alt="math-image" src="https://pythonforundergradengineers.com/posts/math/images/trig-image.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Python can be used to complete trigonometric calculations. You can calculate sine, cosine, and tangent as well as use other trig functions using Python's &lt;code&gt;math&lt;/code&gt; module, which is part of the Python Standard Library and comes included with all Python installations. (This post is adapted from my book &lt;a href="https://www.amazon.com/Problem-Solving-Python-3-7-open-source/dp/1693405415/"&gt;Problem Solving …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 20 Jun 2022 09:15:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-to-do-trig-with-python.html,2022-06-20:</guid><category>math</category><category>python</category><category>math</category><category>standard library</category></item><item><title>How to do Math with Python</title><link>https://pythonforundergradengineers.com%5Chow-to-do-math-with-Python.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/how-to-do-math-with-Python.html"&gt;&lt;img alt="math-image" src="https://pythonforundergradengineers.com/posts/math/images/math-image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Python can be used like a calculator to do math.  Operations like addition, subtraction, multiplication, and division can be done with Python. In this post, you'll learn how to do math with Python.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Arithmetic"&gt;Arithmetic&lt;a class="anchor-link" href="#Arithmetic"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Python can be used as a calculator to make arithmetic calculations.&lt;/p&gt;
&lt;p&gt;Try the following commands in …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 12 Jun 2022 09:15:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-to-do-math-with-python.html,2022-06-12:</guid><category>math</category><category>python</category><category>math</category></item><item><title>Top 5 Python Tools</title><link>https://pythonforundergradengineers.com%5Ctop-5-python-tools.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/top-5-python-tools.html"&gt;&lt;img alt="Top 5 Python Tools" src="https://pythonforundergradengineers.com/posts/top_five/images/five_tools_logos_composition.png"&gt;&lt;/a&gt; This post contains my top 5 Python tools. These 5 tools are the ones I use the most and recommend for Python programmers. These tools help me write, run and revise code and they make me a more productive programmer.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 10 Feb 2022 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\top-5-python-tools.html,2022-02-10:</guid><category>tools</category><category>top five</category><category>anaconda</category><category>jupyter notebook</category><category>conda</category></item><item><title>How to add an Inset Curve with Matplotlib and Python</title><link>https://pythonforundergradengineers.com%5Cadd-inset-curve-to-matplotlib-plot.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/add-inset-curve-to-matplotlib-plot.html"&gt;&lt;img alt="stress strain curve" src="https://pythonforundergradengineers.com/posts/matplotlib/images/stress_strain_curve_with_inset.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, you'll see how to add an inset curve to a Matplotlib plot. An inset curve is a small plot laid on top of a main larger plot. The inset curve is smaller than the main plot and typically shows a "zoomed in" region of the main plot …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 02 Nov 2021 09:15:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\add-inset-curve-to-matplotlib-plot.html,2021-11-02:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>jupyter</category><category>notebook</category></item><item><title>Crank and Rocker Motion with Python and Matplotlib</title><link>https://pythonforundergradengineers.com%5Ccrank-and-rocker-motion-with-python-and-matplotlib.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/crank-and-rocker-motion-with-python-and-matplotlib.html"&gt;&lt;img alt="crank and rocker still" src="https://pythonforundergradengineers.com/posts/matplotlib_animations/images/crank_and_rocker_animation.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Crank and rocker motion is one of the classic types of motion that belongs to a category of 4-bar motion. Crank and rocker motion is the type of motion that a pumpjack goes through when pumping a fluid. In this post, you'll learn how to create an animation of crank …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 27 Sep 2021 09:21:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\crank-and-rocker-motion-with-python-and-matplotlib.html,2021-09-27:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>animation</category></item><item><title>What is Ansible?</title><link>https://pythonforundergradengineers.com%5Cwhat-is-ansible.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/what-is-ansible.html"&gt;&lt;img alt="conductor" src="https://pythonforundergradengineers.com/posts/ansible/images/conductor.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ansible is an orchestration tool that can be used to configure cloud servers. This post is about what Ansible is, what Ansible is not, and demystify the vocabulary used to describe what Ansible does.&lt;/p&gt;
&lt;h2 id="ansible-is-an-it-orchestration-tool"&gt;Ansible is an IT Orchestration Tool&lt;/h2&gt;
&lt;p&gt;Ansible is a tool to automate IT orchestration. What does …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 30 May 2021 14:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\what-is-ansible.html,2021-05-30:</guid><category>Python</category><category>python</category><category>jupyterhub</category><category>ansible</category><category>automation</category><category>dev ops</category><category>depolyment</category></item><item><title>How to change a GitHub repo from master to main</title><link>https://pythonforundergradengineers.com%5Chow-to-change-a-github-repo-from-master-to-main.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/how-to-change-a-github-repo-from-master-to-main.html"&gt;&lt;img alt="GitHub Cover Image" src="https://pythonforundergradengineers.com/posts/git/images/cover_master_to_main.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is for anyone who wants to change their &lt;strong&gt;GitHub repos from master to main&lt;/strong&gt;. GitHub changed the default repo branch name to &lt;strong&gt;main&lt;/strong&gt;. I want to change all my GitHub repo's default branch from master to main.&lt;/p&gt;
&lt;h2 id="the-short-version"&gt;The short version&lt;/h2&gt;
&lt;p&gt;If you are comfortable with git and the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 23 May 2021 08:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-to-change-a-github-repo-from-master-to-main.html,2021-05-23:</guid><category>git</category><category>git</category><category>version control</category><category>GitHub</category></item><item><title>Git and GitHub for Undergrad Engineers</title><link>https://pythonforundergradengineers.com%5Cgit-and-github-for-undergrad-engineers.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/git-and-github-for-undergrad-engineers.html"&gt;&lt;img alt="Git and GitHub Logo" src="https://pythonforundergradengineers.com/posts/git/images/git_and_github_logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is for first-time users of git. Git is a command-line version control system that allows programmers and engineers to manage file versions and share code. Git can be tricky to use. This post contains solutions to some of the most common problems you may encounter when using Git …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 15 May 2021 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\git-and-github-for-undergrad-engineers.html,2021-05-15:</guid><category>git</category><category>git</category><category>python</category><category>version control</category></item><item><title>How to make animated plots with Matplotlib and Python</title><link>https://pythonforundergradengineers.com%5Clive-plotting-with-matplotlib.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/live-plotting-with-matplotlib.html"&gt;&lt;img alt="animated sensor plot" src="https://pythonforundergradengineers.com/posts/matplotlib_animations/images/animated_sensor_plot.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python and Matplotlib can be used to create static 2D plots. But it &lt;strong&gt;Matplotlib can also be used to create dynamic auto-updating animated plots&lt;/strong&gt;. In this post, you learn how to create a live auto-updating animated plot using Python and Matplotlib.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pre-requisits"&gt;Pre-requisits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-up-a-python-virtual-environment"&gt;Set up a Python virtual …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 02 May 2021 13:00:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\live-plotting-with-matplotlib.html,2021-05-02:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>animation</category><category>arduino</category><category>api</category></item><item><title>Calculating Vacancy Concentration with Python</title><link>https://pythonforundergradengineers.com%5Ccalculating-vacancy-concentration-with-python.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/calculating-vacancy-concentration-with-python.html"&gt;&lt;img alt="crystal structure with vacancy" src="https://pythonforundergradengineers.com/posts/engr231/images/crystal_structure_with_vacancy.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, we will complete a problem that might come up in an introductory Materials Science and Engineering class. We'll calculate the number of vacancy defects in a material using Python.&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The following is a calculation of the number of vacancy defects in a material. All crystalline and poly-crystalline …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 26 Apr 2021 09:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\calculating-vacancy-concentration-with-python.html,2021-04-26:</guid><category>material science</category><category>python</category><category>engineering</category><category>materials science</category><category>jupyter notebook</category></item><item><title>Offset Piston Motion with Python and Matplotlib</title><link>https://pythonforundergradengineers.com%5Coffset-piston-motion-animation-matplotlib.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/offset-piston-motion-animation-matplotlib.html"&gt;&lt;img alt="Offset piston motion still" src="https://pythonforundergradengineers.com/posts/matplotlib_animations/images/offset_piston_motion.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Offset piston motion is one of the classic types of engineering dynamics motion that belong to a category of 4-bar motion. Piston motion is the type of motion that the piston in a cylinder of a car engine goes through as the crankshaft rotates.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Offset&lt;/em&gt; piston motion has the same …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 22 Apr 2021 08:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\offset-piston-motion-animation-matplotlib.html,2021-04-22:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>animation</category><category>engineering</category></item><item><title>My Linux PC Build</title><link>https://pythonforundergradengineers.com%5Cmy-linux-pc-build.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/my-linux-pc-build.html"&gt;&lt;img alt="desktop computer" src="https://pythonforundergradengineers.com/pages/gear/images/desktop_computer.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, I am going to describe my PC build. This is the computer that I use for a lot of programming work as well as some live streams. The computer I built runs Linux (Ubuntu 20.04).&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-am-i-building-a-new-linux-pc"&gt;Why am I building a new Linux PC …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 09 Apr 2021 08:21:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\my-linux-pc-build.html,2021-04-09:</guid><category>DIY</category><category>hardware</category><category>DIY</category></item><item><title>How to install pytesseract</title><link>https://pythonforundergradengineers.com%5Chow-to-install-pytesseract.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/how-to-install-pytesseract.html"&gt;&lt;img alt="tesseract and python" src="https://pythonforundergradengineers.com/posts/tesseract/images/tesseract_plus_python.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, you'll see how to install pytesseract. You can use pytesseract to convert images into text. Pytesseract is a Python package that works with &lt;strong&gt;tesseract&lt;/strong&gt;, which is a command-line optical character recognition (OCR) program.  It's a super cool package that can read the text contained in pictures. Let's …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 31 Mar 2021 06:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-to-install-pytesseract.html,2021-03-31:</guid><category>python</category><category>python</category><category>tesseract</category><category>pytesseract</category><category>ocr</category></item><item><title>How to install MicroPython on an ESP32 microcontroller</title><link>https://pythonforundergradengineers.com%5Chow-to-install-micropython-on-an-esp32.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/how-to-install-micropython-on-an-esp32.html"&gt;&lt;img alt="micropython and esp32" src="https://pythonforundergradengineers.com/posts/micropython/images/micropython_plus_esp32.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, you'll learn how to install MicroPython on an ESP32 microcontroller. &lt;a href="http://micropython.org/"&gt;Micropython&lt;/a&gt; is a port, or version of Python designed to run on small, inexpensive, low-power microcontrollers. Examples of microcontrollers that MicroPython can run on include the &lt;a href="https://store.micropython.org/"&gt;pyboard&lt;/a&gt;, the &lt;a href="https://pycom.io/webshop/#dev"&gt;WiPy&lt;/a&gt; and ESP8266-based boards like the &lt;a href="https://learn.adafruit.com/adafruit-feather-huzzah-esp8266"&gt;Adafruit Feather Huzzah …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 24 Mar 2021 06:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-to-install-micropython-on-an-esp32.html,2021-03-24:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp32</category><category>microcontroller</category></item><item><title>Using Python and an Arduino to Read a Sensor</title><link>https://pythonforundergradengineers.com%5Cpython-arduino-potentiometer.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/python-arduino-potentiometer.html"&gt;&lt;img alt="python logo and arduino with potentiometer" src="https://pythonforundergradengineers.com/posts/arduino/images/python_logo_and_redboard_and_potentiometer.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this post, you will see how to use &lt;strong&gt;Python&lt;/strong&gt; to communicate with an &lt;strong&gt;Arduino&lt;/strong&gt; and read a &lt;strong&gt;sensor&lt;/strong&gt;. In particular, the sensor we'll use is a &lt;em&gt;potentiometer&lt;/em&gt;.  The potentiometer will connect to an Arduino microcontroller and the Arduino will communicate with a Python script using the &lt;strong&gt;PySerial&lt;/strong&gt; package. Python …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 11 Mar 2021 11:00:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\python-arduino-potentiometer.html,2021-03-11:</guid><category>python and arduino</category><category>python</category><category>Arduino</category><category>serial</category><category>hardware</category><category>sensor</category><category>matplotlib</category></item><item><title>How to make y-y plots with Matplotlib</title><link>https://pythonforundergradengineers.com%5Chow-to-make-y-y-plots-with-matplotlib.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/how-to-make-y-y-plots-with-matplotlib.html"&gt;&lt;img alt="yy-plot" src="https://pythonforundergradengineers.com/posts/matplotlib/images/y-y_plot.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, you will learn how to create y-y plots with Python and Matplotlib.  y-y plots are a type of line plot where one line corresponds to one y-axis and another line on the same plot corresponds to a different y-axis. y-y plots typically have one vertical y-axis on …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 02 Mar 2021 08:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-to-make-y-y-plots-with-matplotlib.html,2021-03-02:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Writing Tests for Scientific Code</title><link>https://pythonforundergradengineers.com%5Cwriting-tests-for-scientific-code.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/writing-tests-for-scientific-code.html"&gt;&lt;img alt="science lab" src="https://pythonforundergradengineers.com/posts/testing_science_code/images/lab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In a &lt;a href="https://pythonforundergradengineers.com/thoughts-on-software-design-in-scientific-code.html"&gt;previous blog post&lt;/a&gt;, I wrote about how to incorporate a few software design principals into the code written by scientists. This post is a follow up on one specific software design principle that can be used by scientists: &lt;strong&gt;testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below are some practical ideas about how to incorporate …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 25 Feb 2021 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\writing-tests-for-scientific-code.html,2021-02-25:</guid><category>Python</category><category>engineering</category><category>testing</category></item><item><title>Thoughts on Software Design in Scientific Code</title><link>https://pythonforundergradengineers.com%5Cthoughts-on-software-design-in-scientific-code.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/thoughts-on-software-design-in-scientific-code.html"&gt;&lt;img alt="fishing net" src="https://pythonforundergradengineers.com/posts/testing_science_code/images/fishing-net.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I listened to a few podcasts (TalkPython, Test and Code) that had a theme of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"How do we bring software design principles into science?"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This got me thinking... There are a couple of ways software design could be incorporated into science and the code scientists write. The science I'm thinking …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 19 Feb 2021 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\thoughts-on-software-design-in-scientific-code.html,2021-02-19:</guid><category>Python</category><category>engineering</category><category>testing</category></item><item><title>My first Twitch Stream: S01-E01 JupyterHub Intro and Tools</title><link>https://pythonforundergradengineers.com%5Cstream-S01-E01-jupyterhub-intro.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/stream-S01-E01-jupyterhub-intro.html"&gt;&lt;img alt="stream lead image" src="https://pythonforundergradengineers.com/posts/stream/images/stream_lead_image.png"&gt;&lt;/a&gt;&lt;br&gt;I'm trying live streaming code. I did my first stream this week on Twitch. I'm going to try and stream on Tuesday night at 8:30pm-9:30pm PST for the next 8 weeks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 25 Apr 2020 09:10:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\stream-s01-e01-jupyterhub-intro.html,2020-04-25:</guid><category>stream</category><category>python</category><category>jupyter</category><category>jupyterhub</category><category>streaming</category><category>twitch</category></item><item><title>Hear my story about deploying JupyterHub on the Running in Production Podcast</title><link>https://pythonforundergradengineers.com%5Cjupyterhub-deployment-on-running-in-production.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/jupyterhub-deployment-on-running-in-production.html"&gt;&lt;img alt="Running in Production Banner" src="https://pythonforundergradengineers.com/posts/podcast/images/running_in_production_banner.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;I was a guest on the &lt;a href="https://runninginproduction.com/"&gt;Running in Production&lt;/a&gt; podcast with Nick Janetakis!&lt;/strong&gt; We talked about how a Community College professor deployed JupyterHub online using a Digital Ocean cloud server. Check out the podcast episode &lt;a href="https://runninginproduction.com/podcast/27-a-college-professor-self-hosts-jupyter-hub-for-his-students"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 22 Apr 2020 08:11:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\jupyterhub-deployment-on-running-in-production.html,2020-04-22:</guid><category>podcasts</category><category>python</category><category>jupyter</category><category>jupyterhub</category><category>jupyter notebook</category></item><item><title>Deploy a Jupyter Notebook Online with Voila and Heroku</title><link>https://pythonforundergradengineers.com%5Cdeploy-jupyter-notebook-voila-heroku.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/deploy-jupyter-notebook-voila-heroku.html"&gt;&lt;img alt="Voila Logo" src="https://pythonforundergradengineers.com/posts/voila/images/jupyter_voila_heroku.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jupyter notebooks are a great way to write and run Python code. Jupyter notebooks can produce text output, plots, and animations. Static Jupyter notebooks can be shared on GitHub.com and &lt;a href="https://nbviewer.jupyter.org/"&gt;nbviewer&lt;/a&gt;. Another way to share Jupyter notebooks is a great Python package called &lt;a href="https://voila.readthedocs.io/en/stable/"&gt;&lt;strong&gt;Voila&lt;/strong&gt;&lt;/a&gt;. Voila turns Jupyter notebooks into …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 08 Apr 2020 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\deploy-jupyter-notebook-voila-heroku.html,2020-04-08:</guid><category>jupyter</category><category>python</category><category>jupyter</category><category>jupyter notebook</category><category>voila</category><category>heroku</category><category>deploy</category></item><item><title>Python Resources for Instructors</title><link>https://pythonforundergradengineers.com%5Cpython-resources-for-instructors-2020.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/python-resources-for-instructors-2020.html"&gt;&lt;img alt="Library Computer and Bookshelf" src="https://pythonforundergradengineers.com/posts/resources/images/college_class.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post is a list of my recommended Python teaching resources for instructors in 2020. I received an email from a college instructor who was thinking about moving from MATLAB to Python in one of their courses. I wanted to share my email more broadly in case anyone else is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 27 Feb 2020 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\python-resources-for-instructors-2020.html,2020-02-27:</guid><category>introduction</category><category>python</category><category>resources</category></item><item><title>Deploy a Serverless Web App on AWS Lambda with Zappa</title><link>https://pythonforundergradengineers.com%5Cdeploy-serverless-web-app-aws-lambda-zappa.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/deploy-serverless-web-app-aws-lambda-zappa.html"&gt;&lt;img alt="Zappa Icon" src="https://pythonforundergradengineers.com/posts/zappa/images/zappa_flask_lambda.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zappa is a way to deploy serverless web apps on AWS Lambda. In this post, we will build a simple Flask web app with Python and run the web app on AWS Lambda using Zappa in only a few steps.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-zappa"&gt;What is Zappa?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-zappa-and-flask"&gt;Install Zappa and Flask …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 14 Jan 2020 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\deploy-serverless-web-app-aws-lambda-zappa.html,2020-01-14:</guid><category>web</category><category>python</category><category>flask</category><category>zappa</category><category>deployment</category><category>heroku</category></item><item><title>Top 5 posts of 2019</title><link>https://pythonforundergradengineers.com%5C2019-top-five.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/2019-top-five.html"&gt;&lt;img alt="Top Five Megaphone" src="https://pythonforundergradengineers.com/posts/top_five/images/megaphone_five.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post contains the top 5 &lt;a href="https://pythonforundergradengineers.com/"&gt;Python for Undergraduate Engineers&lt;/a&gt; (this blog) posts of 2019. These posts are ranked in terms of the number of page views. Of the 15 blog posts published on this site in 2019, these five posts were the most popular.&lt;/p&gt;
&lt;h2 id="5-calculating-the-probability-under-a-normal-curve-with-python"&gt;&lt;a href="https://pythonforundergradengineers.com/probability-under-normal-curve-with-python.html"&gt;#5. Calculating the probability under …&lt;/a&gt;&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 02 Jan 2020 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\2019-top-five.html,2020-01-02:</guid><category>this site</category><category>top five</category><category>pelican</category><category>blog</category></item><item><title>Matplotlib Animation to Demonstrate Piston Motion</title><link>https://pythonforundergradengineers.com%5Cpiston-motion-with-python-matplotlib.html</link><description>&lt;p&gt;&lt;img alt="still of piston motion" src="https://pythonforundergradengineers.com/posts/matplotlib_animations/images/piston_motion_still.png"&gt; &lt;/p&gt;
&lt;p&gt;Piston motion is one of the classic types of motion in engineering dynamics that belong to a category of 4-bar motion. Piston motion is the type of motion that the piston in a cylinder of a car engine goes through as the engine's crankshaft rotates. In this post, we'll review …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 18 Dec 2019 08:40:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\piston-motion-with-python-matplotlib.html,2019-12-18:</guid><category>Python</category><category>python</category><category>matplotlib</category><category>animation</category><category>dynamics</category></item><item><title>How to Build a Streamlit App in Python</title><link>https://pythonforundergradengineers.com%5Cstreamlit-app-with-bokeh.html</link><description>&lt;p&gt;&lt;img alt="streamlit bokeh heroku" src="https://pythonforundergradengineers.com/posts/streamlit/images/bokeh_streamlit_heroku.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://streamlit.io/docs/"&gt;&lt;strong&gt;Streamlit&lt;/strong&gt;&lt;/a&gt; is a web app-building framework for Python. Streamlit is a way to create mostly simple single-page web apps that are easy to deploy. Streamlit is useful for engineers and data scientists who have some app functionality, like a plot that dynamically changes based on user interaction, but don't want …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 16 Dec 2019 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\streamlit-app-with-bokeh.html,2019-12-16:</guid><category>Python</category><category>streamlit</category><category>bokeh</category><category>engineering</category></item><item><title>Slides from my PyDataPDX Presentaion</title><link>https://pythonforundergradengineers.com%5Cslides-from-pydata-pdx-presentation.html</link><description>&lt;p&gt;&lt;img alt="Intro Slide" src="https://pythonforundergradengineers.com/posts/pydatapdx/images/image0.png"&gt;I gave a presentation about &lt;strong&gt;JupyterHub in Engineering Education&lt;/strong&gt; at the &lt;a href="https://www.meetup.com/PyData-PDX/"&gt;PyData PDX&lt;/a&gt; Meetup in Portland, OR on November 12, 2019. This post contains the slides from my presentation.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 13 Nov 2019 08:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\slides-from-pydata-pdx-presentation.html,2019-11-13:</guid><category>jupyterhub</category><category>python</category><category>jupyter</category><category>jupyterhub</category></item><item><title>Convert a PDF to Multiple Images with Python</title><link>https://pythonforundergradengineers.com%5Cpdf-to-multiple-images.html</link><description>&lt;p&gt;&lt;img alt="pdf to dir" src="https://pythonforundergradengineers.com/posts/pdf/images/pdf_to_dir.png"&gt;&lt;/p&gt;
&lt;p&gt;I had one of those "&lt;a href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff&lt;/a&gt;" problems this week. &lt;strong&gt;How do you convert a multi-page PDF into a folder of images?&lt;/strong&gt; One image for each page in the PDF? Read on to see how to solve this problem with Python.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-python"&gt;Install Python …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 18 Oct 2019 08:11:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\pdf-to-multiple-images.html,2019-10-18:</guid><category>Python</category><category>python</category><category>pdf</category><category>images</category></item><item><title>Slides from my PyPDX West Presentaion</title><link>https://pythonforundergradengineers.com%5Cslides-from-pypdx-west-presentation.html</link><description>&lt;p&gt;&lt;img alt="Intro Slide" src="https://pythonforundergradengineers.com/posts/pypdx_west/images/image0.png"&gt;I gave a presentation at the first PyPDX West Meetup held in Hillsboro, OR. This post contains the slides from my presentation on JupyterHub and how JupyterHub is used to teach Python at our college.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 09 Oct 2019 15:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\slides-from-pypdx-west-presentation.html,2019-10-09:</guid><category>jupyterhub</category><category>python</category><category>jupyter</category><category>jupyterhub</category></item><item><title>My book Problem Solving with Python is available on Amazon</title><link>https://pythonforundergradengineers.com%5Cproblem-solving-with-python-37-edition-book-on-amazon.html</link><description>&lt;p&gt;&lt;img alt="Problem Solving with Python 3.7 Edition cover" src="https://pythonforundergradengineers.com/posts/pswp_book/images/pswp37_book_cover.jpg"&gt;&lt;/p&gt;
&lt;p&gt;My book: &lt;a href="https://amazon"&gt;Problem Solving with Python 3.7 Edition&lt;/a&gt; is available on Amazon. This is the second edition of the book. The 3.7 Edition has a bunch of updates and improvments and is tested to work with Python 3.7: &lt;a href="https://www.amazon.com/Problem-Solving-Python-3-7-open-source/dp/1693405415"&gt;Link to Amazon&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The 3.7 Edition of the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 18 Sep 2019 08:11:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\problem-solving-with-python-37-edition-book-on-amazon.html,2019-09-18:</guid><category>books</category><category>python</category><category>resources</category></item><item><title>Estimating the Deflection of a Truncated Cone using Python</title><link>https://pythonforundergradengineers.com%5Cdeflection-of-a-truncated-cone-with-python.html</link><description>&lt;p&gt;&lt;img alt="segmented cone" src="https://pythonforundergradengineers.com/posts/engr213/images/segmented_cone.png"&gt; &lt;/p&gt;
&lt;p&gt;In this post, we will complete a problem that might come up in a Strength of Materials class. We'll estimate the deflection of a truncated cone given an applied load using Python.&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="The-Problem"&gt;The Problem&lt;a class="anchor-link" href="#The-Problem"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Below is an engineering mechanics problem that can be solved in Python. Follow along this post …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 02 Jul 2019 09:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\deflection-of-a-truncated-cone-with-python.html,2019-07-02:</guid><category>strengths</category><category>python</category><category>strengths</category><category>engineering</category><category>materials science</category><category>jupyter notebook</category></item><item><title>Plotting a Stress Strain Curve with Python and Matplotlib</title><link>https://pythonforundergradengineers.com%5Cstress-strain-curve-with-python-and-matpotlib.html</link><description>&lt;p&gt;&lt;img alt="stress strain curve" src="https://pythonforundergradengineers.com/posts/matplotlib/images/stress_strain_curve_two_metals.png"&gt; &lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, we'll use data from a tensile test to build a stress strain curve with Python and Matplotlib.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;A tensile test is a type of mechanical test performed by engineers used to determine the mechanical properties of a material. Engineering metal alloys such as steel and aluminum alloys …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 17 May 2019 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\stress-strain-curve-with-python-and-matpotlib.html,2019-05-17:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>jupyter</category><category>notebook</category></item><item><title>Plotting Bond Energy vs. Distance with Python and Matplotlib</title><link>https://pythonforundergradengineers.com%5Cplotting-bond-energy-with-matplotlib-and-python.html</link><description>&lt;p&gt;&lt;img alt="bond energy vs. distance curve" src="https://pythonforundergradengineers.com/posts/matplotlib/images/energy_vs_distance_curve.png"&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Atoms in solid materials like steel and aluminum are held together with chemical bonds. Atoms of solid materials are more stable when they are chemically bonded together, and it takes energy to separate atoms which are joined together with a chemical bond. The &lt;em&gt;bonding energy&lt;/em&gt; associated with a chemical bond …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 03 Apr 2019 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\plotting-bond-energy-with-matplotlib-and-python.html,2019-04-03:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>plotting</category><category>jupyter notebook</category></item><item><title>How to upload .py-files onto an ESP8266 running MicroPython</title><link>https://pythonforundergradengineers.com%5Cupload-py-files-to-esp8266-running-micropython.html</link><description>&lt;p&gt;&lt;img alt="fritzing ESP8266 image" src="https://pythonforundergradengineers.com/posts/micropython/images/fritzing_esp8266.png"&gt;&lt;/p&gt;
&lt;p&gt;This is an update to the sixth part of a &lt;a href="https://pythonforundergradengineers.com/what-is-micropython.html"&gt;multi-part series&lt;/a&gt; on Micropython. I had trouble in class today uploading a .py-file to an ESP8266 microcontroller running MicroPython using a command line tool called &lt;strong&gt;ampy&lt;/strong&gt;. There was a trick getting &lt;strong&gt;ampy&lt;/strong&gt; to work on with the ESP8266 microcontroller that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 09 Mar 2019 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\upload-py-files-to-esp8266-running-micropython.html,2019-03-09:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>ampy</category></item><item><title>Taylor Series in Python</title><link>https://pythonforundergradengineers.com%5Ccreating-taylor-series-functions-with-python.html</link><description>&lt;p&gt;&lt;img alt="plot of Taylor Series" src="https://pythonforundergradengineers.com/posts/functions/images/taylor.png"&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, we will review how to create a Taylor Series with Python and for loops. Then we will refactor the Taylor Series into functions and compare the output of our Taylor Series functions to functions from Python's Standard Library.&lt;/p&gt;
&lt;p&gt;A Taylor Series is an infinite series of mathematical …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 06 Mar 2019 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\creating-taylor-series-functions-with-python.html,2019-03-06:</guid><category>functions</category><category>python</category><category>matplotlib</category><category>math</category><category>plotting</category><category>functions</category><category>loops</category></item><item><title>Hear my story about moving from MATLAB to Python on TalkPython</title><link>https://pythonforundergradengineers.com%5Cmoving-from-matlab-to-python-on-talkpython.html</link><description>&lt;p&gt;&lt;strong&gt;I was a guest on the &lt;a href="https://talkpython.fm"&gt;TalkPython&lt;/a&gt; podcast with Michael Kennedy!&lt;/strong&gt; We talked about teaching Python at a Community College and how I moved a college engineering class from MATLAB to Python using JupyterHub. &lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/582253734&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"&gt; &lt;/iframe&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 27 Feb 2019 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\moving-from-matlab-to-python-on-talkpython.html,2019-02-27:</guid><category>podcasts</category><category>python</category><category>jupyter</category><category>jupyterhub</category><category>jupyter notebook</category></item><item><title>Plotting a Gaussian normal curve with Python and Matplotlib</title><link>https://pythonforundergradengineers.com%5Cplotting-normal-curve-with-python.html</link><description>&lt;p&gt;&lt;img alt="Area Under Normal Curve Plot" src="https://pythonforundergradengineers.com/images/normal_curve.png"&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://pythonforundergradengineers.com/posts/statistics/probability_under_a_normal_curve_with_python.md"&gt;previous post&lt;/a&gt;, we calculated the area under the standard normal curve using Python and the &lt;code&gt;erf()&lt;/code&gt; function from the &lt;code&gt;math&lt;/code&gt; module in Python's Standard Library. In this post, we will construct a plot that illustrates the standard normal curve and the area we calculated. To build the Gaussian …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 02 Feb 2019 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\plotting-normal-curve-with-python.html,2019-02-02:</guid><category>matplotlib</category><category>python</category><category>engineering</category><category>statistics</category><category>matplotlib</category><category>scipy</category></item><item><title>Calculate the Probability Under a Normal Curve</title><link>https://pythonforundergradengineers.com%5Cprobability-under-normal-curve-with-python.html</link><description>&lt;p&gt;&lt;a href="https://pythonforundergradengineers.com/probability-under-normal-curve-with-python.html"&gt;&lt;img alt="gaussian_curve" src="https://pythonforundergradengineers.com/images/gaussian_curve.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Calculating the probability under a normal curve is useful for engineers. This type of calculation can be helpful to predict the likely hood of a part coming off an assembly line being within a given specification. The probability can be calculated when the statistical properties of all the parts that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 24 Jan 2019 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\probability-under-normal-curve-with-python.html,2019-01-24:</guid><category>statistics</category><category>python</category><category>engineering</category><category>statistics</category></item><item><title>My book Problem Solving with Python is available on Amazon</title><link>https://pythonforundergradengineers.com%5Cproblem-solving-with-python-book-on-amazon.html</link><description>&lt;p&gt;&lt;img alt="Library Computer and Bookshelf" src="https://pythonforundergradengineers.com/posts/pswp_book/images/pswp_book_cover.jpg"&gt;&lt;/p&gt;
&lt;p&gt;My first book: &lt;a href="https://www.amazon.com/Problem-Solving-Python-3-6-open-source/dp/179381404X/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;amp;qid=1548391706&amp;amp;sr=8-4"&gt;Problem Solving with Python 3.6 Edition&lt;/a&gt; is available on Amazon. So excited about publishing my first book! Pick it up here: &lt;a href="https://www.amazon.com/Problem-Solving-Python-3-6-open-source/dp/179381404X/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;amp;qid=1548391706&amp;amp;sr=8-4"&gt;Link to Amazon&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The book has been over a year in the making. Many long nights writing and revising. Without the support of my awesome …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 11 Jan 2019 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\problem-solving-with-python-book-on-amazon.html,2019-01-11:</guid><category>books</category><category>python</category><category>resources</category></item><item><title>Using Python to control an Arduino</title><link>https://pythonforundergradengineers.com%5Cpython-arduino-LED.html</link><description>&lt;p&gt;&lt;img alt="Python Logo and Arduino" src="https://pythonforundergradengineers.com/posts/arduino/images/python_logo_and_redboard_bb.png"&gt;&lt;/p&gt;
&lt;p&gt;Python is used in many applications including data science, machine learning, and web development. Another area where we can use Python is external hardware control. What do I mean by external hardware? A piece of external hardware could be a light or a sensor. External hardware includes multimeters or spectral …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 20 Dec 2018 13:07:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\python-arduino-led.html,2018-12-20:</guid><category>python and arduino</category><category>python</category><category>arduino</category><category>serial</category><category>hardware</category><category>anaconda prompt</category></item><item><title>A List of Python Learning Resources</title><link>https://pythonforundergradengineers.com%5Clist-of-python-learning-resources.html</link><description>&lt;p&gt;&lt;img alt="Library Computer and Bookshelf" src="https://pythonforundergradengineers.com/posts/resources/images/computer_in_library.png"&gt;&lt;/p&gt;
&lt;p&gt;This post is a short list of my recommended Python learning resources. I received an email from someone who found this blog and &lt;a href="https://github.com/ProfessorKazarinoff"&gt;my GitHub repo&lt;/a&gt; and asked about the right place to go to start learning Python. The list of resources in this post comes from the email I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 10 Dec 2018 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\list-of-python-learning-resources.html,2018-12-10:</guid><category>introduction</category><category>python</category><category>resources</category></item><item><title>Quiver plots using Python, matplotlib and Jupyter notebooks</title><link>https://pythonforundergradengineers.com%5Cquiver-plot-with-matplotlib-and-jupyter-notebooks.html</link><description>&lt;p&gt;&lt;img alt="3 quiver plots" src="https://pythonforundergradengineers.com/posts/matplotlib/images/3_quiver_plots.png"&gt; A quiver plot is a type of 2D plot that shows vector lines as arrows. Quiver plots are useful in electrical engineering to visualize electrical potential and valuable in mechanical engineering to show stress gradients. In this post, we will build three quiver plots using Python, matplotlib, numpy, and Jupyter notebooks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 14 Nov 2018 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\quiver-plot-with-matplotlib-and-jupyter-notebooks.html,2018-11-14:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Plotting a stress-strain curve with four libraries: matplotlib, pandas, altair and bokeh</title><link>https://pythonforundergradengineers.com%5Cstress-strain-curve-with-4-libraries.html</link><description>&lt;p&gt;&lt;img alt="four plotting library logos" src="https://pythonforundergradengineers.com/posts/matplotlib/images/four_logos.png"&gt; After watching a great webinar about plotting with different python libraries, I wanted to see what it was like to make a stress strain curve using four different modules: pandas, matplotlib, altair and bokeh (with holoviews).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 21 Oct 2018 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\stress-strain-curve-with-4-libraries.html,2018-10-21:</guid><category>Plotting</category><category>python</category><category>matplotlib</category><category>engineering</category><category>jupyter</category><category>notebook</category><category>bokeh</category><category>altair</category><category>pandas</category></item><item><title>Plotting Histograms with matplotlib and Python</title><link>https://pythonforundergradengineers.com%5Chistogram-plots-with-matplotlib-and-python.html</link><description>&lt;p&gt;&lt;img alt="histogram" src="https://pythonforundergradengineers.com/posts/matplotlib/histogram.png"&gt;&lt;/p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Histograms are a useful type of statistics plot for engineers. A histogram is a type of bar plot that shows the frequency or number of values compared to a set of value ranges. Histogram plots can be created with Python and the plotting package &lt;strong&gt;matplotlib&lt;/strong&gt;. The &lt;code&gt;plt.hist()&lt;/code&gt; function creates …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 08 Oct 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\histogram-plots-with-matplotlib-and-python.html,2018-10-08:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>statistics</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Statistics in Python using the statistics module</title><link>https://pythonforundergradengineers.com%5Cstatistics-in-python-using-the-statistics-module.html</link><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, we'll look at a couple of statistics functions in Python. These statistics functions are part of the Python Standard Library in the &lt;strong&gt;statistics&lt;/strong&gt; module. The four functions we'll use in this post are common in statistics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mean - average value&lt;/li&gt;
&lt;li&gt;median - middle value&lt;/li&gt;
&lt;li&gt;mode - most often value&lt;/li&gt;
&lt;li&gt;standard …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 05 Oct 2018 06:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\statistics-in-python-using-the-statistics-module.html,2018-10-05:</guid><category>statistics</category><category>python</category><category>statistics</category></item><item><title>Solving Two Equations for Two Unknowns and a Statics Problem with SymPy and Python</title><link>https://pythonforundergradengineers.com%5Csympy-two-equations-for-two-unknows-and-statics-problem.html</link><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;SymPy&lt;/strong&gt; &lt;a href="http://www.sympy.org"&gt;(http://www.sympy.org)&lt;/a&gt; is a Python library for &lt;strong&gt;symbolic math&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In symbolic math, symbols represent mathematical expressions. In a &lt;em&gt;numerical calculation&lt;/em&gt;, the value of &lt;code&gt;pi&lt;/code&gt; is stored as an estimate of &lt;code&gt;pi&lt;/code&gt;, a floating point number close to &lt;code&gt;3.14...&lt;/code&gt;. In a &lt;em&gt;symbolic math expression&lt;/em&gt;, the value of …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 03 Oct 2018 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\sympy-two-equations-for-two-unknows-and-statics-problem.html,2018-10-03:</guid><category>sympy</category><category>python</category><category>sympy</category><category>symbolic math</category></item><item><title>Solving Equations and Writing Expressions with SymPy and Python</title><link>https://pythonforundergradengineers.com%5Csympy-expressions-and-equations.html</link><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;SymPy&lt;/strong&gt; &lt;a href="http://www.sympy.org"&gt;(http://www.sympy.org)&lt;/a&gt; is a Python library for &lt;strong&gt;symbolic math&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In symbolic math, symbols are used to represent mathematical expressions. An example of a symbolic math expression is below:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
$$ x^{2} + y^{2} = z $$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the expression above, we have the variables $x$, $y$ and $z$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If we …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 02 Oct 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\sympy-expressions-and-equations.html,2018-10-02:</guid><category>sympy</category><category>python</category><category>sympy</category><category>symbolic math</category></item><item><title>Building an IoT Server with flask and Python - Part 6 - upload code to ESP8266-based WiFi weather stations</title><link>https://pythonforundergradengineers.com%5Cflask-iot-server-upload-code-to-esp8266.html</link><description>&lt;p&gt;&lt;img alt="ESP8266 with sensor" src="https://pythonforundergradengineers.com/posts/flask/esp8266-based_wifi_weather_station.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the sixth part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post, we'll add some code to our ESP8266-based weather stations. The code we upload to the ESP8266 microcontrollers programs the WiFi weather stations to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 19 Sep 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-iot-server-upload-code-to-esp8266.html,2018-09-19:</guid><category>flask</category><category>python</category><category>flask</category><category>IoT</category><category>sensor</category></item><item><title>Building an IoT Server with flask and Python - Part 5 Adding a Database</title><link>https://pythonforundergradengineers.com%5Cflask-iot-server-database.html</link><description>&lt;p&gt;&lt;img alt="two temps shown" src="https://pythonforundergradengineers.com/posts/flask/updated_double_temp.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the fifth part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post, we'll add a sqlite3 database to our &lt;strong&gt;flask&lt;/strong&gt; IoT server to store all the temperature data points that come in from our ESP8266-based …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 12 Sep 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-iot-server-database.html,2018-09-12:</guid><category>flask</category><category>python</category><category>flask</category><category>web API</category><category>IoT</category><category>sensor</category><category>esp8266</category></item><item><title>Building an IoT Server with flask and Python - Part 4 Validation and Timestamps</title><link>https://pythonforundergradengineers.com%5Cflask-iot-server-validation-time-stamps.html</link><description>&lt;p&gt;This is the fourth part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In the last post of the series, we reviewed how to build a web API with &lt;strong&gt;flask&lt;/strong&gt; which accepts temperature measurements. In this post, we'll build …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 27 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-iot-server-validation-time-stamps.html,2018-08-27:</guid><category>flask</category><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category><category>sensor</category></item><item><title>Solving a Circuit Diagram Problem with Python and SchemDraw</title><link>https://pythonforundergradengineers.com%5Ccircuit-diagram-problem-with-schemdraw.html</link><description>&lt;p&gt;In this post we will solve a circuit diagram problem using a Python package called &lt;strong&gt;SchemDraw&lt;/strong&gt; &lt;img alt="circuit diagram 7 resistors 3 loops" src="https://pythonforundergradengineers.com/posts/schemdraw/7_resistors_3_loops.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 26 Aug 2018 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\circuit-diagram-problem-with-schemdraw.html,2018-08-26:</guid><category>matplotlib</category><category>python</category><category>jupyter</category><category>notebook</category><category>matplotlib</category><category>schemdraw</category><category>engineering</category></item><item><title>Building an IoT Server with flask and Python - Part 3 Web API</title><link>https://pythonforundergradengineers.com%5Cflask-iot-server-web-API.html</link><description>&lt;p&gt;This is the third part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In the last post, we reviewed server and hardware setup. In this post, we'll build a web API with &lt;strong&gt;flask&lt;/strong&gt; and push temperature data to our …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 24 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-iot-server-web-api.html,2018-08-24:</guid><category>flask</category><category>python</category><category>flask</category><category>webapi</category><category>IoT</category><category>sensor</category><category>micropython</category><category>microcontroller</category></item><item><title>First Live Results Running Jupyter Hub in a College Class</title><link>https://pythonforundergradengineers.com%5Cfirst-live-results-running-jupyter-hub.html</link><description>&lt;p&gt;This is the eighth part of a multi-part series settting up Jupyter Hub for a college class. The Jupyter Hub Server is live and running! Students are logging in! In this quick post, I'll share my initial impressions running Jupyter Hub in the wild of a college engineering classroom.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 08 Aug 2018 10:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\first-live-results-running-jupyter-hub.html,2018-08-08:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Building an IoT Server with flask and Python - Part 2 Set Up</title><link>https://pythonforundergradengineers.com%5Cflask-iot-server-setup.html</link><description>&lt;p&gt;This post is the second part of a series of posts which detail building an Internet-of-Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post, we'll describe server setup and microcontroller hardware used in the project.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#server"&gt;Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hardware"&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-starting-place"&gt;The starting place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 05 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-iot-server-setup.html,2018-08-05:</guid><category>flask</category><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category><category>sensor</category></item><item><title>Building an IoT Server with Flask and Python - Part 1 Motivation</title><link>https://pythonforundergradengineers.com%5Cflask-iot-server-motivation.html</link><description>&lt;p&gt;This post is the first part of a series of blog posts about building an Internet-of-Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post we'll I'll discuss the problem I'm trying to solve and the issues I have with the current solution. We'll also review what the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 04 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-iot-server-motivation.html,2018-08-04:</guid><category>flask</category><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category><category>sensor</category></item><item><title>Building a single page Flask App on Digital Ocean</title><link>https://pythonforundergradengineers.com%5Cflask-app-on-digital-ocean.html</link><description>&lt;p&gt;In this post, we'll run through how to set up a single page &lt;a href="http://flask.pocoo.org/docs/1.0/"&gt;&lt;strong&gt;flask&lt;/strong&gt;&lt;/a&gt; app that shows a temperature pulled from &lt;a href="https://thingspeak.com/"&gt;ThingSpeak.com&lt;/a&gt;. ThingSpeak has nice looking graphs, but on ThingSpeak it is actually kind of hard to see the value of an individual data point. I want to be able to see the most recent temperature point recorded by my &lt;a href="https://pythonforundergradengineers.com/posts/micropython/micropython_upload_code.md"&gt;ESP8266 WiFi weather station project&lt;/a&gt; on a phone or tablet. By building a flask app and hosting it on Digital Ocean, I can now view the current temperature in a nice big font from anywhere.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 02 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\flask-app-on-digital-ocean.html,2018-08-02:</guid><category>flask</category><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category></item><item><title>Upload Micropython Code to an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com%5Cmicropython-upload-code.html</link><description>&lt;p&gt;This is the sixth part of a multi-part series on Micropython. In this post, we will upload &lt;strong&gt;&lt;em&gt;.py&lt;/em&gt;&lt;/strong&gt; files to an Adafruit Feather Huzzah ESP8266 board using Python and a Python package called &lt;strong&gt;ampy&lt;/strong&gt;. At the end of the post we will have a working WiFi weather station that will …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 27 Jul 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\micropython-upload-code.html,2018-07-27:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>sensor</category></item><item><title>Using Micropython to connect an Adafruit Feather Huzzah ESP8266 to WiFi</title><link>https://pythonforundergradengineers.com%5Cmicropython-wifi.html</link><description>&lt;p&gt;This is the fifth part of a multipart series on Micropython. In the &lt;a href="https://pythonforundergradengineers.com/micropython-temp-sensor.html"&gt;last post&lt;/a&gt; we used the Micropython REPL (the Microcpython prompt) running on the Adafruit Feather Huzzah ESP8266 board to read the temperature off a temperature sensor. In this post, we are going to connect the Feather board to WiFi and post the temperature to ThingSpeak.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 20 Jul 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\micropython-wifi.html,2018-07-20:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>WiFi</category></item><item><title>Add a custom login page and assignments directory for each user on a Jupyter Hub server</title><link>https://pythonforundergradengineers.com%5Cassignments-dir-and-custom-login-page-to-jupyterhub.html</link><description>&lt;p&gt;This is the seventh part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we build a pre-spawn hook that creates an "assignments" and "notes" directory with pre-constructed assignments and notes for each &lt;strong&gt;JupyterHub&lt;/strong&gt; user. We also build a custom login pages that looks much more like our college login page and contains helpful links.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 14 Jun 2018 10:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\assignments-dir-and-custom-login-page-to-jupyterhub.html,2018-06-14:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Adding Google OAuth and system service to a Jupyter Hub server</title><link>https://pythonforundergradengineers.com%5Cadd-google-oauth-and-system-service-to-jupyterhub.html</link><description>&lt;p&gt;This is the sixth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we will set up &lt;strong&gt;jupyterhub&lt;/strong&gt; to run as a system service in the background which will allow us to work on the server and run &lt;strong&gt;jupyterhub&lt;/strong&gt; at the same time. Then we will add an authentication system so that users can log into our Jupyter Hub server using github usernames and passwords. Finally we will modify the authentication system so that users can log into our Jupyer Hub server using their google usernames and passwords. The same user name and password a student uses to access their college email.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 27 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\add-google-oauth-and-system-service-to-jupyterhub.html,2018-05-27:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Adding SSL and a domain name to Jupyter Hub</title><link>https://pythonforundergradengineers.com%5Cadd-ssl-and-domain-name-to-jupyterhub.html</link><description>&lt;p&gt;This is the fifth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we are going to link a domain name to our server IP address, add SSL security and configure nginx to run as a proxy in between users and &lt;strong&gt;jupyterhub&lt;/strong&gt;. Then we'll run &lt;strong&gt;jupyterhub&lt;/strong&gt; over https using the SSL security we created.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 25 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\add-ssl-and-domain-name-to-jupyterhub.html,2018-05-25:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Installing Jupyterhub</title><link>https://pythonforundergradengineers.com%5Cinstalling-jupyter-hub.html</link><description>&lt;p&gt;This is the fourth part of a multi-part series that shows how to set up Jupyter Hub for a college class. The goal is to have a running version of Jupyter Hub that students in the class can log into when given a simple web link. In this post, we'll get to the fun stuff: installing &lt;strong&gt;jupyterhub&lt;/strong&gt; on the server, installing &lt;strong&gt;Python&lt;/strong&gt; packages and spinning up Jupyter Hub for the first time.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 24 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\installing-jupyter-hub.html,2018-05-24:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Creating a new Digital Ocean Droplet</title><link>https://pythonforundergradengineers.com%5Cnew-digital-ocean-droplet.html</link><description>&lt;p&gt;This is the third part of a multi-part series on how to set up Jupyter Hub for a class.  My goal is to have a running version of Jupyter Hub that students can access using a simple web link. I am primarily writing to my future self as I may need to set up Jupyter Hub again for a future class. In this post, we are going to create a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and create a non-root user with sudo privileges. Then we'll SSH into the droplet with PuTTY as the non-root user.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 20 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\new-digital-ocean-droplet.html,2018-05-20:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Create an SSH Key with PuTTYgen</title><link>https://pythonforundergradengineers.com%5Cssh-keys-with-putty.html</link><description>&lt;p&gt;This is the second part of a multi-part series on how to set up Jupyter Hub for a class. This is my first time setting up a Jupyter Hub server. I am primarily writing to my future self as I may need to set up Jupyter Hub again for another class. In this post, we are going to create an SSH key on a Windows 10 machine using PuTTYgen.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 19 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\ssh-keys-with-putty.html,2018-05-19:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Why Jupyter Hub?</title><link>https://pythonforundergradengineers.com%5Cwhy-jupyter-hub.html</link><description>&lt;p&gt;This is the first part of a multi-part series that shows how to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for an engineering programming class. This is my first time setting up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. I am primarily writing to my future self as I may need to set up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server again for a different class in another quarter. I hope the lessons learned will also help other instructors tackle the same problem if they want to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for their own class or team.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 17 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\why-jupyter-hub.html,2018-05-17:</guid><category>jupyter</category><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Diffusion Calculation with Python and Pint</title><link>https://pythonforundergradengineers.com%5Cdiffusion-problem-python-pint.html</link><description>&lt;p&gt;I was working on an engineering problem involving diffusion that involved a couple of different units including joules, grams, kilograms, meters, centimeters, moles, megapascals and weight percent. To make sure that I kept track of all the units and unit conversions throughout the problem, I thought I'd try using &lt;strong&gt;pint&lt;/strong&gt;, a &lt;strong&gt;Python&lt;/strong&gt; package for unit conversions.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 04 May 2018 09:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\diffusion-problem-python-pint.html,2018-05-04:</guid><category>engineering</category><category>python</category><category>jupyter</category><category>notebook</category><category>pint</category><category>units</category><category>unit conversion</category><category>engineering</category></item><item><title>Opening a Jupyter Notebook on Windows</title><link>https://pythonforundergradengineers.com%5Copening-a-jupyter-notebook-on-windows.html</link><description>&lt;p&gt;In this post, we will run through how to open a &lt;strong&gt;Jupyter notebook&lt;/strong&gt; on Windows 10.  &lt;strong&gt;Jupyter notebooks&lt;/strong&gt; are one way engineers can write and execute &lt;strong&gt;Python&lt;/strong&gt; code. &lt;strong&gt;Jupyter notebooks&lt;/strong&gt; contain &lt;strong&gt;Python&lt;/strong&gt; code, the output of that code produces when it is run and markdown cells to explain what the code means. A &lt;strong&gt;Jupyter notebook&lt;/strong&gt; can be started from the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;, the Windows start menu or by using the &lt;strong&gt;Anaconda Navigator&lt;/strong&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 01 May 2018 09:20:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\opening-a-jupyter-notebook-on-windows.html,2018-05-01:</guid><category>Orientation</category><category>jupyter</category><category>python</category><category>anaconda</category><category>windows</category><category>jupyter notebook</category></item><item><title>Bar charts with error bars using Python, jupyter notebooks and matplotlib</title><link>https://pythonforundergradengineers.com%5Cbar-plot-with-error-bars-jupyter-matplotlib.html</link><description>&lt;p&gt;Bar charts with error bars are useful in engineering to show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence. In this post, we will build a bar plot using Python, the statistics module and matplotlib. The plot will show the tensile strength of two different 3-D printer filament materials, ABS and HIPS. We will then add error bars to the plot based on the standard deviation of the data.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 27 Apr 2018 10:15:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\bar-plot-with-error-bars-jupyter-matplotlib.html,2018-04-27:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>materials science</category><category>statistics</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Using a Temperature Sensor with Micropython running on an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com%5Cmicropython-temp-sensor.html</link><description>&lt;p&gt;This is the fourth part of a multipart series on Micropython. In this last post of the series, we blinked an LED on and off using Micropython. In this post, we will connect a temperature sensor to an Adafruit Feather Huzzah and use the Micropython REPL to read the temperature …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 28 Mar 2018 08:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\micropython-temp-sensor.html,2018-03-28:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>sensor</category></item><item><title>Using the Micropython REPL on an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com%5Cmicropython-REPL.html</link><description>&lt;p&gt;This is the third part of a multipart series on Micropython. In &lt;a href="https://pythonforundergradengineers.com/micropython-install.html"&gt;last post of the series&lt;/a&gt;, we installed Micropython on an Adafruit Feather Huzzah ESP8266 microcontroller using Python and a package called &lt;strong&gt;esptool&lt;/strong&gt;. In this post, we are going to write commands to the Micropython REPL (the Micropython prompt …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 12 Mar 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\micropython-repl.html,2018-03-12:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>REPL</category></item><item><title>Installing Micropython on an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com%5Cmicropython-install.html</link><description>&lt;p&gt;This is the second part of a multipart series on Micropython. Micropython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this post, we will install Micropython on an Adafruit Feather Huzzah ESP8266 board using Python and a package called esptool. In subsequent posts …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 01 Mar 2018 14:20:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\micropython-install.html,2018-03-01:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>REPL</category></item><item><title>What is Micropython?</title><link>https://pythonforundergradengineers.com%5Cwhat-is-micropython.html</link><description>&lt;p&gt;This is the first part of a multipart series on Micropython. In this post we'll review what Micropython is, what it is used for and how it is both similar and different from "regular" Python. We'll also discuss why Micropython is relevant to undergraduate engineers.&lt;/p&gt;
&lt;h3 id="1-what-is-micropython"&gt;1. What is Micropython?&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://micropython.org/"&gt;Micropython …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 26 Feb 2018 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\what-is-micropython.html,2018-02-26:</guid><category>micropython</category><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>REPL</category></item><item><title>Plotting sine and cosine with Matplotlib and Python</title><link>https://pythonforundergradengineers.com%5Cplotting-sin-cos-with-matplotlib.html</link><description>&lt;p&gt;In this post we will create a plot using matplotlib and Python. The plot will show two trig functions, sine and cosine on the same set of axes.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 05 Feb 2018 10:30:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\plotting-sin-cos-with-matplotlib.html,2018-02-05:</guid><category>Plotting</category><category>python</category><category>jupyter</category><category>matplotlib</category><category>numpy</category><category>plots</category></item><item><title>Python Data Types</title><link>https://pythonforundergradengineers.com%5Cpython-data-types.html</link><description>&lt;p&gt;Python has many useful built in data types. Python variables can store different types of data and can be created dynamically, without first defining a data type. It's useful for engineers to understand a couple of Python's core data types in order to write well constructed code. Below we will discuss a few different data types.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 18 Jan 2018 10:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\python-data-types.html,2018-01-18:</guid><category>Orientation</category><category>python</category><category>data types</category></item><item><title>Unit conversions with Python and Pint</title><link>https://pythonforundergradengineers.com%5Cunit-conversions-with-pint.html</link><description>&lt;p&gt;Units and unit conversions are &lt;strong&gt;BIG&lt;/strong&gt; in engineering. Engineers solve the world's problems in teams. Any problem that is solved has to have a context that it is solved in. How heavy can a rocket be and still make it off the ground? What thickness body panels should be used to keep occupants save during a crash? In engineering, a number without a unit is like a fish without water. It just flops around hopelessly without context and is useless. How can we get help using units? Programming is one way. In this post, we are going to use Python and Pint, a python package used for unit conversions, to do a couple of sample unit conversion problems.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 14 Jan 2018 10:30:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\unit-conversions-with-pint.html,2018-01-14:</guid><category>engineering</category><category>python</category><category>jupyter</category><category>notebook</category><category>pint</category><category>units</category><category>unit conversion</category><category>engineering</category></item><item><title>Bar charts with error bars using Python and matplotlib</title><link>https://pythonforundergradengineers.com%5Cpython-matplotlib-error-bars.html</link><description>&lt;p&gt;Bar charts with error bars are useful in engineering to show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence. In this post, we will build a bar plot using Python and &lt;a href="https://matplotlib.org/index.html"&gt;matplotlib&lt;/a&gt;. The plot will show the coefficient of thermal expansion (CTE) of three different materials based on a small data set. Then we'll add error bars to this chart based on the standard deviation of the data.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 07 Jan 2018 10:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\python-matplotlib-error-bars.html,2018-01-07:</guid><category>matplotlib</category><category>python</category><category>matplotlib</category><category>engineering</category><category>materials science</category><category>statistics</category><category>plotting</category></item><item><title>Unicode characters for engineers in Python</title><link>https://pythonforundergradengineers.com%5Cunicode-characters-in-python.html</link><description>&lt;p&gt;Unicode characters are very useful for engineers. A couple commonly used symbols in engineers include Omega and Delta. We can print these in python using unicode characters. From the Python interpreter we can type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Omega: \u03A9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Omega&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;Ω&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Delta: \u0394&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;Δ&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sigma: \u03C3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;σ&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 29 Dec 2017 10:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\unicode-characters-in-python.html,2017-12-29:</guid><category>python</category><category>python</category><category>engineering</category><category>utf-8</category></item><item><title>Python Virtual Environments in OS X, Linux and Windows 10</title><link>https://pythonforundergradengineers.com%5Cvirtualenv-in-osx-linux-windows.html</link><description>&lt;p&gt;In this post, I'll review creating virtual environments on three different operating systems: Windows 10, Linux and Mac OSX. Using virtual environments is good programming practice when using Python. A virtual environment will separate the Python interpreter and installed modules from the main Python installation.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 22 Dec 2017 14:36:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\virtualenv-in-osx-linux-windows.html,2017-12-22:</guid><category>Orientation</category><category>python</category><category>Windows 10</category><category>virtualenv</category><category>OSX</category><category>Linux</category><category>Ubuntu</category><category>pip</category><category>conda</category><category>anaconda</category><category>anaconda prompt</category></item><item><title>How I Build This Site - Part 7</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-7.html</link><description>&lt;p&gt;This is the seventh part of a multi-part series on how I built this site. In &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-6.html"&gt;last post&lt;/a&gt;, we added two new &lt;em&gt;pages&lt;/em&gt; to our site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page.  In this post, we are going to deploy the site to &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;. Github pages is a place on GitHub.com were documentation and static sites can be hosted.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 14 Dec 2017 12:40:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-7.html,2017-12-14:</guid><category>This site</category><category>python</category><category>pelican</category><category>blog</category><category>git</category><category>github</category><category>github pages</category></item><item><title>How I Build This Site - Part 6</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-6.html</link><description>&lt;p&gt;This is the sixth part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-5.html"&gt;last post&lt;/a&gt;, we put a search bar at the top right of each page and some css and javascript in order to make tables on the site look better. In this post we are going to add two new &lt;em&gt;pages&lt;/em&gt; to our static site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page. These new pages will have menu entries at the top of our site.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 12 Dec 2017 18:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-6.html,2017-12-12:</guid><category>This site</category><category>python</category><category>pelican</category><category>blog</category><category>git</category><category>github</category></item><item><title>How I Build This Site - Part 5</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-5.html</link><description>&lt;p&gt;This is the fifth part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-4.html"&gt;last post&lt;/a&gt;, we installed a couple of plugins to add extra functionality to the site. These plugins enabled embedded jupyter notebooks and posts in a series. In this post we'll put a search bar at the top right of each page and add some css and javascript in order to make tables on the site look better.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 09 Dec 2017 18:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-5.html,2017-12-09:</guid><category>This site</category><category>python</category><category>pelican</category><category>blog</category><category>css</category><category>javascript</category></item><item><title>How I Build This Site - Part 4</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-4.html</link><description>&lt;p&gt;This is the fourth part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-3.html"&gt;last post&lt;/a&gt;, we installed the pelican-bootstrap3 theme and made our site mobile responsive. Now the site looks good on all devices.  In this post we are going to install a couple of plugins to add extra functionality to our site. These plugins will allow our site to have a series of post that are linked together, create a working search bar, add youtube videos to posts, view LaTeX math and add embedded jupyter notebooks in posts.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 08 Dec 2017 18:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-4.html,2017-12-08:</guid><category>This site</category><category>python</category><category>pelican</category><category>blog</category><category>jupyter</category></item><item><title>How I Build This Site - Part 3</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-3.html</link><description>&lt;p&gt;This is the third part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/posts/how_i_built_this_site/how_I_built_this_site2.md"&gt;last post&lt;/a&gt;, we used &lt;code&gt;pelican-quickstart&lt;/code&gt; to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile responsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 04 Dec 2017 14:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-3.html,2017-12-04:</guid><category>This site</category><category>python</category><category>pelican</category><category>blog</category><category>markdown</category></item><item><title>How I Build This Site - Part 2</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-2.html</link><description>&lt;p&gt;This is the second part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-1.html"&gt;last post&lt;/a&gt;, we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground. We are also going to create a &lt;strong&gt;first_post.md&lt;/strong&gt; file and serve up the website locally so we can take a look at it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 28 Nov 2017 14:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-2.html,2017-11-28:</guid><category>This site</category><category>python</category><category>pelican</category><category>blog</category><category>markdown</category></item><item><title>How I Build This Site - Part 1</title><link>https://pythonforundergradengineers.com%5Chow-i-built-this-site-1.html</link><description>&lt;p&gt;This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environments, Python, virtual environments, installing Python packages and set up git.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 22 Nov 2017 12:40:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\how-i-built-this-site-1.html,2017-11-22:</guid><category>this site</category><category>python</category><category>pelican</category><category>staticsite</category></item><item><title>Create a new virtual environment with Conda</title><link>https://pythonforundergradengineers.com%5Cnew-virtual-environment-with-conda.html</link><description>&lt;p&gt;To start a new Python project, it is best practice to create a new virtual environment. I have the &lt;strong&gt;Anaconda&lt;/strong&gt; distribution of Python installed on my Windows 10 machine at work. When you &lt;a href="https://pythonforundergradengineers.com/posts/installation/installing_anaconda_on_windows.md"&gt;install &lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/a&gt;, it comes with the very useful &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. Using the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; is a bit …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 17 Nov 2017 20:20:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\new-virtual-environment-with-conda.html,2017-11-17:</guid><category>Orientation</category><category>python</category><category>conda</category><category>virtualenv</category><category>anaconda</category><category>anaconda prompt</category></item><item><title>Installing Anaconda on Windows</title><link>https://pythonforundergradengineers.com%5Cinstalling-anaconda-on-windows.html</link><description>&lt;p&gt;In this post, we will run through installing the &lt;a href="https://www.anaconda.com/what-is-anaconda/"&gt;Anaconda distribution&lt;/a&gt; of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 14 Nov 2017 09:20:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com\installing-anaconda-on-windows.html,2017-11-14:</guid><category>Orientation</category><category>python</category><category>anaconda</category><category>miniconda</category><category>conda</category><category>windows</category></item></channel></rss>