{"pages":[{"title":"About","text":"I started this blog after teaching a course on Engineering Programming at Portland Community College (ENGR214). In the course, we used MATLAB. But this cost students $49 for a student version. As we strive to move towards open education resources, I wanted to reduce the cost for students to take the course. This lead me to Python. My goal is to help reduce student cost and investigate how Python could be used in an engineering programming course instead of MATLAB. I earned my PhD in Material Science and Engineering from the University of Washington. Currently, I work as a Professor of Engineering and Engineering Technology at Portland Community College in Portland, OR. Teaching at a community college is my dream job. I have two inquisitive daughters and a wonderful and supportive wife. Coding downstairs in the den after the kids go to bed would not be possible without the my wife's gracious support. In my garage is sitting a '76 Scout II. It barely runs, is rusty all over and smells like a cheap oil change. I hope to get it on the road this summer. I play soccer and follow the Seattle Sounders and Portland Timbers.","tags":"pages","url":"pages/about.html"},{"title":"Book","text":"Coming in Fall 2018 Book: Python Programming for Undergraduate Engineers This books is for undergraduate engineers learning programming. It is focused on using Python and programming to solve engineering problems. Chapter List Preface Chapter 1: Orientation Chapter 2: Engineering 101 Chapter 3: Statics Chapter 4: Circuits I Chapter 5: Strengths Chapter 6: Circuits II Chapter 7: Dynamics Chapter 8: Circuits III Chapter 9: Capstone Appendix Pre-order will be available soon","tags":"pages","url":"pages/book.html"},{"title":"How I build this Site - Part 5","text":"This is the fifth part in a multi-part series on how I built this site. In the last post , we installed a couple of plugins to add extra functionality to the site. These plugins enabled embedded jupyter notebooks and posts in a series. In this post we'll put a search bar at the top right of each page and add some css and javascript in order to make tables on the site look better. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a site with a working search bar and nice looking tables. Activate our staticsite virtual environment Pull the most recent version of our site from github Modify the pelicanconf.py file to use the 'tipue_search' plugin Add custom css and javascript to make tables look better Build and preview the site with Pelican Add, commit and push the changes to github Let's get started. Activate our virtual environment and pull the most recent version of the site down from github $ cd ~/Documents/staticsite $ source activate staticsite ( staticsite ) $ git pull origin master The staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── code │ ├── sample_notebook.ipynb ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Add the 'tipue_search' plugin to the pelicanconf.py file Now we need to modify the pelicanconf.py file to use the 'tipue_search' plugin. This plugin will give us the ability to add a search bar to our site menu at the top right of each page. Add 'tipue_search' to the PLUGINS = [ ] list in the pelicanconf.py file. Make sure each plugin is separated with commas and surrounded by quotes . #pelicanconf.py PLUGINS = [ 'i18n_subsites', 'series', 'tag_cloud', 'liquid_tags.youtube', 'liquid_tags.notebook', 'liquid_tags.include_code', 'render_math', 'pelican-ipynb.markup', 'tipue_search' ] To use the 'tipue_search' plugin, we also need to add the following line to the pelicanconf.py file: #pelicanconf.py # for Tique Search Plugin DIRECT_TEMPLATES = ('index','tags', 'categories', 'authors', 'archives', 'search') Add some custom css and javascript to make tables look good. Even with a great theme like pelican-bootstrap3, there are some changes to make to the look of the site. One of these changes is to make tables look better, like the tables on github readme pages look. Let's make a new post in the content/posts directory. This post will contain a markdown table using the | (pipe) character and a header row with pipes separated by three dashes --- . fourth_post.md Title : Fourth Post - Part 4 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog , tables Slug : fourth - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 4 Summary : This is the fourth post of a series of posts . It will demonstrate tables . This is the fourth post of a series of posts . It will demonstrate tables . | Column Header | Column Header | | --- | ---| | Row 1 | Data 1 | | Row 2 | Data 2 | After the post is saved, our staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── fourth_post.md │ ├── code │ ├── sample_notebook.ipynb ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid To change the way that tables are rendered, we will add some custom css and javascript that is not included with the pelican-bootstrap3 theme. First create a new folder in the staticsite/content directory called extra . cd ~/Dcouments/staticsite/content mkdir extra && cd extra Inside the extra folder, create a new .css file called custom.css . Insert the following style changes in custom.css : . table { width : inherit ; max-width : 100 % ; margin-bottom : 21 px ; padding : 6 px 13 px ; } Now create a new javascript file in the content/extra directory called custom.js . This file contains extra javascript that will be injected into pages when the .html is generated by Pelican. var tables, i; tables = document.getElementsByTagName('table'); for (i=0;i<tables.length;i++) { tables[i].className = 'table table-bordered table-hover table-striped table-responsive'; } With the addition of these two new files, the contents of the staticsite directory will look something like: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── fourth_post.md │ ├── code │ ├── sample_notebook.ipynb │ ├── extra │ ├── custom.css │ ├── custom.js ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Pelican needs to know about the two new \"custom\" files. Modify the pelicanconf.py file to include the lines: #pelicanconf.py CUSTOM_CSS = 'static/css/custom.css' CUSTOM_JS = 'static/js/custom.js' STATIC_PATHS = [ 'extra' ] EXTRA_PATH_METADATA = { 'extra/custom.css': {'path': 'static/css/custom.css'}, 'extra/custom.js': {'path': 'static/js/custom.js'} } When the site is built, Pelican will read in custom.css and custom.js siting in the extra folder. Pelican will then copy these two files in the appropriate places in the output directory (static/css/custom.css and static/css/custom.js) for the theme to use. Then the code from the css and javascript files will be used by the .html pages in the output directory along with the other css and javascript from the bootstrap3 theme. This will make tables look more like tables in github readme pages. Build and preview the site with Pelican With the search plugin configured, a new posts containing a table written, plus our custom.js and custom.css in place, let's preview the site again. We build the site and serve up the contents in the output folder with: make html make serve To view the site, point a browser to localhost:8000 localhost:8000 use ctrl-c to stop the server. Add and commit the changes then push them to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Commit those changes with git commit and add the -m \"added search and tables\" flag to supply a commit message (make sure to use double quotes \"commit message\"). Push the changes up to github with git push origin master git add . git commit -m \"added search and tables\" git push origin master In the next post we will publish the site to github pages. Once the site is published, it will be live and public to anythone with an internet connection. An actual, real, published, live static site!","tags":"This site","url":"how-i-built-site-5.html"},{"title":"How I build this Site - Part 4","text":"This is the fourth part in a multi-part series on how I built this site. In the last post , we installed the pelican-bootstrap3 theme and made our site mobile responsive. Now the site looks good on all devices. In this post we are going to install a couple of plugins to add extra functionality to our site. These plugins will allow our site to have a series of post that are linked together, create a working search bar, add youtube videos to posts, view LaTeX math and add embedded jupyter notebooks in posts. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a great looking website that contains a two-part series, a post with an embedded youtube video and a post that contains an embedded jupyter notebook. Activate our staticsite virtual environment Pull the most recent version of our site from github Install jupyter in our staticsite environment Modify the pelicanconf.py file to use new plugins Build some posts that will allow us to view the new plugins Build and preview the site with Pelican Add and commit the changes then push those changes to github Seems like a lot to do, so let's get started. Activate our virtual environment and pull the most recent version of the site down from github $ source activate staticsite ( staticsite ) $ cd ~/Documents/staticsite ( staticsite ) $ pwd ( staticsite ) $ git pull origin master Install the jupyter package in our staticsite virtual environment. I like using jupyter notebooks to build code and solve engineering problems with Python. A jupyter notebook can contain Python code, the output produced when this code is run and markup text (used for documentation). Jupyter notebooks can also easily display matplotlib plots and pandas data frames. These two Python packages are very useful for engineers solving problems in teams. As the jupyter package is in the main conda channel, we can install it into our virtual environment using the conda install command. (staticsite) $ conda install jupyter We can see all of the modules installed in our (staticsite) environment with: (staticsite) $ pip freeze The output should look something like: appnope==0.1.0 bleach==2.1.1 blinker==1.4 certifi==2017.11.5 decorator==4.1.2 docutils==0.14 entrypoints==0.2.3 feedgenerator==1.9 html5lib==0.999999999 ipykernel==4.6.1 ipython==6.2.1 ipython-genutils==0.2.0 ipywidgets==7.0.5 jedi==0.11.0 Jinja2==2.10 jsonschema==2.6.0 jupyter-client==5.1.0 jupyter-console==5.2.0 jupyter-core==4.4.0 Markdown==2.6.9 MarkupSafe==1.0 mistune==0.8.1 nbconvert==5.3.1 nbformat==4.4.0 notebook==5.2.2 pandocfilters==1.4.2 parso==0.1.0 pelican==3.7.1 pexpect==4.3.0 pickleshare==0.7.4 prompt-toolkit==1.0.15 ptyprocess==0.5.2 Pygments==2.2.0 python-dateutil==2.6.1 pytz==2017.3 pyzmq==16.0.3 qtconsole==4.3.1 simplegeneric==0.8.1 six==1.11.0 terminado==0.6 testpath==0.3.1 tornado==4.5.2 traitlets==4.3.2 Unidecode==0.4.21 wcwidth==0.1.7 webencodings==0.5.1 widgetsnbextension==3.0.8 Add new plugins to the pelicanconf.py file Now we need to modify the pelicanconf.py file to use a couple new plugins. The plugins we will add are: 'series' 'tag_cloud', 'liquid_tags.youtube' 'liquid_tags.notebook', 'liquid_tags.include_code', 'render_math' 'tipue_search' 'pelican-ipynb.markup' We add these to the PLUGINS = [ ] list in the pelicanconf.py file and separate them with commas. #pelicanconf.py PLUGINS = [ 'i18n_subsites', 'series', 'tag_cloud', 'liquid_tags.youtube', 'liquid_tags.notebook', 'liquid_tags.include_code', 'render_math','tipue_search', 'pelican-ipynb.markup' ] Build some posts that use the newly installed plugins Now we will build a couple of posts which use our newly installed plugins. First we'll modify our content directory with a new folder called posts . We'll keep all the posts in this directory. Then we'll make a couple of new .md files. I'll copy our first post to this new directory with the cp (copy) shell command and then remove the old .md file with the rm command. pwd cd content mkdir posts cp first_post.md posts/first_post.md rm first_post.md Now let's modify the first_post.md file with a couple new lines in the header. The Series: and Series_index: lines will put this first post in series of posts using the series plugin. first_post.md Title : First Post - Part 1 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog Slug : first - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 1 Summary : This is the first post of a series of demonstration posts . This is the first post of a series of demonstration posts . After the post is saved, we can go back to the terminal and copy it to create our second post. The contents of our staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Let's make two new posts in the content/posts directory. cd ~/Documents/staticsite/content/posts cp first_post.md second_post.md cp first_post.md third_post.md Now we'll edit second_post.md so it's part of a series and contains an embedded YouTube video. second_post.md Title : Second Post - Part 2 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog Slug : second - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 2 Summary : This is the second post of a series of posts . It will show series and an embeded youtube video . This is the second post of a series of posts . It will show series and an embedded youtube video . {% youtube https :// www . youtube . com / watch ? v = Qq - 5 frjUfK0 [ 560 ] [ 315 ] %} We'll create a sample jupyter notebook in a new folder called code in our content folder. The jupyter notebook will go in our third post. To create the code folder and bring up a new jupyter notebook in our web browser use: (staticsite) $ pwd (staticsite) $ mkdir content/code (staticsite) $ cd content/code (staticsite) $ jupyter notebook Let's put one markdown cell, one code cell and produce one output cell in our jupyter notebook . We'll save it as example_notebook.ipynb . My sample_notebook.ipynb looks like: Now we will put our example_notebook.ipynb into our third post. Including a juypter notebook requires the use of the line notebook path/to/notebook.ipynb surrounded with a { % % } . third_post.md Title : Third Post - Part 3 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog Slug : third - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 3 Summary : This is the third post of a series of posts . It will show series an jupyter notebook . This post contains a jupyter notebook . {% notebook ../ code / sample_notebook . ipynb %} Build and preview the site with Pelican With a couple new pelican-plugins configured and three new posts written, it is time to preview our site again. We can build the site and can view it with a web browser using: make html make serve To view the site, point a browser to localhost:8000 localhost:8000 use ctrl-c to stop the server. Add and commit the changes then push them to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Then we commit those changes with git commit and add the -m \"added plugins\" flag to give supply a commit message (make sure to use double quotes \"commit message\"). To push those changes up to github use git push origin master git add . git commit -m \"added plugins\" git push origin master In the next post we will customize the site. We'll add some css in order to make tables on the site look better and put a search bar at the top of the page.","tags":"This site","url":"how-i-built-site-4.html"},{"title":"How I build this site - Part 3","text":"This is the third part in a multi-part series on how I built this site. In the last post , we used pelican-quickstart to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile reponsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a a static site with a great looking bootstrap3 theme which is mobile responsive and looks great on desktops, tablets and phones. Activate our staticsite virtual environment Pull the most recent version of our site from github Add a git submodule to our staticsite folder and bring in the pelican-themes repo from github Add a git submodule to our staticsite folder and bring in the pelican-plugins repo from github Modify the pelicanconf.py file to point to our new theme, and add a new plugin Build and preview the site with Pelican Add and commit the changes then push those changes to github Big steps, it's really going to look like a website when we are done. Activate our virtual environment and pull from github Open the Anaconda Prompt and activate the (staticsite) virtual environment $ source activate staticsite Then cd into the staticsite directory and bring in the most up to date version of the site stored on github. (staticsite) $ cd ~ (staticsite) $ cd Documents/staticsite (staticsite) $ git pull origin master Use git submodule add to pull all of the themes into our local staticsite/pelican-themes directory There are a bunch of different themes available for static site built with Pelican. The three I was most interested in were: material voidy_bootstrap pelican-bootstrap3 We can bring in all of the Pelican themes stored on github by creating a git submodule . A git submodule is a sub-repository within a git repository that is linked to another repository. It is a way to bring in something else from github within a local repository and not have to keep a local copy up to date. Each time we \"pull\" from the submodule, we get the newest version of the pelican-themes repo on github. We don't have to manually track any changes to these themes and incorporate them to our local version. When the changes are made to the themes on github, we just pull those changes down to our local version. The lines git submodule init and git submodule update --init --recursive are important to call. If those two commands are not moved we'll end up with empty folders within the staticsite/pelican-themes directory. A lot of the themes are submodules themselves so the --recursive option has to be used to pull all of these submodules down. Without --recursive you can end up with empty folders. To create the folder for our pelican-themes git submodule, ensure you are in the staticsite folder, then call: $ pwd $ git submodule add https://github.com/getpelican/pelican-themes.git $ git submodule init $ git submodule update --init --recursive Ensure that we are still in the staticsite directory and pull down the pelican-plugins repo form github. $ pwd $ git submodule add https://github.com/getpelican/pelican-plugins.git $ git submodule init $ git submodule update --init --recursive Now the contents of the staticsite folder should look something like: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins ├── pelican-themes ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Modify the pelicanconf.py file, so that we can use a new theme. So far our pelicanconf.py file contains only default lines of code that Pelican built for us. In order to use a new theme, we need to edit this configuration file. After we edit the configuration file, the make html command will produce new .html pages in the output directory. The relevant lines to add and modify in the pelicanconf.py are: #pelicanconf.py PLUGIN_PATHS = ['pelican-plugins'] THEME = 'pelican-themes/pelican-bootstrap3' BOOTSTRAP_THEME = 'flatly' PLUGIN_PATHS = ['/path/to/git/pelican-plugins'] JINJA_ENVIRONMENT = {'extensions': ['jinja2.ext.i18n']} PLUGINS = [ 'i18n_subsites'] I18N_TEMPLATES_LANG = 'en' Taken directly from the pelicin-bootstrap3 README.md ... this template can be translated (see Translations below). You also need to activate a plugin that initializes the i18n jinja extension. One possibility is an up to date version of the i18n_subsites plugin. So we need to make sure to include the i18n plugin in our pelicanonf.py file. Again from the from the pelicin-bootstrap3 README.md If you are using i18n_subsites and you are not using English as your default language, make sure to also correctly specify the default language of the theme. Otherwise the translations will not be used on your default site. Build and preview the site with Pelican With the pelican-plugins and pelican-themes repos downloaded and the pelicanconf.py file edited, we can build the site and take a look at it with a web browser: make html make serve To view the site, point a brower to localhost:8000 localhost:8000 Now, the site should look something like this: use ctrl-c to shut down the server. Add and commit the changes then push those changes to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Then we commit those changes with git commit and add the -m \"added pelican_bootstrap3 theme\" flag to give supply a commit message (make sure to use double quotes \"commit message\"). To push those changes up to github use git push origin master git add . git commit -m \"added pelican_bootstrap3 theme\" git push origin master In the next post we will add some additional pelican-plugins to bring extra functionality to the site and add the ability to include jupyter notebooks in posts.","tags":"This site","url":"how-i-built-this-site-3.html"},{"title":"How I build this site - Part 2","text":"This is the second part in a multi-part series on how I built this site. In the last post , we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the pelican-quickstart command to get the blog off the ground. We are also going to create a first_post.md file and serve up the website locally so we can take a look at it. Steps in this post We are going to accomplish the following in this post. By the end of the post, we will have a working website with one blog post served up locally and an updated github repo with all the changes saved. Activate our staticsite virtual environment Pull the most recent version of our site from github Use the pelican-quickstart command to make a first version of the site Write a first post in markup language (.md) Build the site using the make html command Serve the site locally using make serve and view with a web browser Add and commit the changes then push those changes to github That's a lot to do, so let's get started. Activate our staticsite virtual environment I highly recommend installing the Anaconda distribution of python. If you followed along with the previous post , you already installed Anaconda and can pull up the Anaconda prompt. Open the Anaconda Prompt and see which virtual environments are available. $ conda info --envs You should see a list of all the virtual environments conda has created on your machine. It should look something like: staticsite C:\\Users\\user.name\\AppData\\Local\\Continuum\\Anaconda3\\envs\\staticsite root * C:\\Users\\user.name\\AppData\\Local\\Continuum\\Anaconda3 The staticsite virtual environment is the one we set up to create our site. Activate it with: $ source activate staticsite You should now see (staticsite) before the command prompt. This means we are operating in the staticsite virtual environment. View installed packages We installed pelican, markdown and fabric in the last post. Let's make sure they are installed in our (staticsite) virtual environment. (staticsite)$ pip freeze Make sure you see the following modules are installed: beautifulsoup4==4.6.0 Jinja2==2.9.6 Fabric==1.14.0 Markdown==2.6.9 pelican==3.7.1 Pygments==2.2.0 Pelican Quickstart - make the site! We are now going to build the site! Exciting stuff. With the virtual environment and packages in place, we just need to make sure we are in a directory where we want our site to live. (staticsite)$ cd ~ (staticsite)$ cd Documents (staticsite)$ cd staticsite You can confirm you are working in the staticsite directory by typing pwd which stands for print working directory : (staticsite)$ pwd Now we can spin up the settings and structure of our pelican build. Start the process with the command: (staticsite)$ pelican-quickstart Pelican will ask us a bunch of questions at the start. The initial settings I used are below. Make sure to change the title, author, URL prefix, and timezone: > Where do you want to create your new web site? [.] > What will be the title of this web site? Python Programming for Undergraduate Engineers > Who will be the author of this web site? Peter D. Kazarinoff > What will be the default language of this web site? [English] > Do you want to specify a URL prefix? e.g., http://example.com (Y/n) Y > What is your URL prefix? (see above example; no trailing slash) https://username.github.io/staticsite > Do you want to enable article pagination? (Y/n) Y > How many articles per page do you want? [10] 5 > What is your time zone? [Europe/Paris] America/Los_Angeles > Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) Y > Do you want to upload your website using FTP? (y/N) N > Do you want to upload your website using SSH? (y/N) N > Do you want to upload your website using Dropbox? (y/N) N > Do you want to upload your website using S3? (y/N) N > Do you want to upload your website using Rackspace Cloud Files? (y/N) N > Do you want to upload your website using GitHub Pages? (y/N) y > Is this your personal page (username.github.io)? (y/N) N Now we can create and view the site. The command make html will create the site and the command make serve will spin up a local webserver that allows us to view the site. (staticsite)$ make html (staticsite)$ make serve Point a web browser to: localhost:8000 The site will look something like: We can shut down the server by typing ctrl-c Write a first post in markup language (.md) Time to write our first post. The contents of the staticsite directory should look something like: staticsite/ │ develop_server.sh │ fabfile.py │ Makefile │ pelicanconf.py │ publishconf.py │ ├───content ├───output └───__pycache__ To make a new post, we need to add a markup file (.md file) to the content folder. Let's call our first post first_post.md . Depending on the computer I'm using, I create .md files with different programs. One Windows 10, I have been using Code Writer. On Mac OSX and Linux, I use PyCharm . The first_post.md file saved in the content folder needs to have the form: Title : First Post Date : 2017 - 10 - 13 12 : 40 Modified : 2017 - 10 - 13 12 : 40 Status : published Category : This site Tags : python , markdown , blog Slug : first - post Authors : Peter D . Kazarinoff Summary : This is the summary of the first post This is the very first post ! After saving the file first_post.md in the content folder, the static site folder should look something like: staticsite/ │ develop_server.sh │ fabfile.py │ Makefile │ pelicanconf.py │ publishconf.py │ ├───content │ first_post.md │ ├───output └───__pycache__ Let's build the site again and take a look at our new post (staticsite)$ make html (staticsite)$ make serve Again, point a web browser to: localhost:8000 The site will look something like: It works! I can see the first post! We can shut down the server by typing ctrl-c Add and commit the changes then push the changes to github When we are done editing the posts and the site, we add all of the changes to our local git repo using git add . Then we commit these changes with git commit and use the -m \"created pelcian static site\" flag to supply a commit message (make sure to use double quotes \"commit message\"). Push those changes up to github with git push origin master git add . git commit -m \"created pelican static site\" git push origin master In the next post , we will customize the site with a pelican-theme called pelican-bootstrap3 .","tags":"This site","url":"how-i-built-this-site-2.html"},{"title":"How I build this site - Part 1","text":"This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environment, installing Python, virtual environments, installing the necessary packages and setting up git. Setting up the development environment What does that even mean? Before I started building this site I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a development environment . To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below: An operating system: This website was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS). Python: Python 3.6 (legacy Python is version 2.7) Anaconda: The Anaconda Prompt and the Anaconda Python distribution Github.com and git: Four different computers were used build the site. Github is the central place where the most up to date version of the site is kept. Pelican: A static site generator written in Python. Pelican will build the site from a settings file (pelicanconf.py) and posts written in markdown (.md files) Markdown: the posts on this website are written in markdown, or .md format fabric and make: fabric is a python package to automate builds and tasks. Fabric works on Windows. Make is used on MacOSX and Linux to build the site and serve up a demo version of the site. Installing Python (the Anaconda distribution) I highly recommend installing the Anaconda distribution of Python. I have the Anaconda distribution installed on all the computers I used to build this site: Windows 10 Desktop at work Mac OSX laptop at work Mac OSX laptop at home Linux (Ubuntu 16.04 LTS) Desktop at home. An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. Download the latest release at: https://www.anaconda.com/download The Anaconda distribution of Python comes with an up to date and stable version of Python (Python 3.6) and the Anaconda Prompt . The Anaconda Prompt is useful because it allows me to run shell commands on my Windows 10 machine at work. These are the same commands I would run in the terminal on my Mac OSX or Linux boxes. The Anaconda Prompt makes creating and logging into virtual environments easy and allows me to use git on Windows 10. Follow this post to install the Anaconda on Windows 10. Create a new virtual environment Before downloading Pelican, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment staticsite . The conda create command creates the environment and the -n staticsite flag adds the name. $ conda create -n staticsite This creates a new virtual environment called staticsite . Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment staticsite is created, we need to activate it and start using it with the command: $ source activate staticsite We should now see (staticsite) before the terminal prompt. This means we are using the (staticsite) virtual environment. Install Pelican Time for some fun! Installing Pelican. Pelican is a Python package that creates static websites. Static sites are websites that only have html, css and javascript. A static site is not connected to a database and there is no code run on the server side. The server just serves static files (html, css, javascript) to the client when the client requests them. In order to install Pelican, we need to install pip first. On my Linux and Mac OSX machines, the command line tool git is already installed. If using Windows 10, git may not be available. So that the development environments are close to the same on all my computers, I also used conda to install git . (staticsite)$ conda install pip (staticsite)$ conda install git Once pip is installed, we can install pelican and markdown . These are two of the core pieces we need to build the website. fabric3 is also installed because we'll use it to build and demo the site on Windows. (staticsite)$ pip install pelican (staticsite)$ pip install markdown (staticsite)$ pip install fabric3 Create a github account and create a new repository While I was making the site, it became clear that I had to keep track of version control . I would make some changes to the site on my computer at work, then come home and make more changes to the site. Bringing a USB thumb drive back and forth was hard. I would forget the thumb drive at work or home and then could not edit the site. Or worse, I'd edit the site in both places and try to remember which changes were made where and which was the best version. Ah! The solution is to use git and github . Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. Github.com is the where the site content and settings are remotely stored and integrates easily with git. To sign up for a github.com account go here: https://github.com/join The account activation screen looks something like: Once the account is set up, log in and create a new repository. Use the + button on the upper right-hand menu: I named the new repository: staticsite and included both a README.md and a GNU General Public License v3.0 . Make a directory for the site and link it to github Once the github repo (short for repository, basically a folder with files on github.com) is set up, the last step to complete the development environment is to link the remote repo on github to the local version of the site on my computer. The local version is in a folder call staticsite in the Documents folder. The staticsite folder will contain all the files used to build the site and the output files created by Pelican that are the site. (staticsite)$ cd ~ (staticsite)$ cd Documents (staticsite)$ mkdir staticsite (staticsite)$ cd staticsite We can set up git to keep the contents of the local staticsite folder in sync with the contents of the staticsite repo on github.com. The command git init will initiate or create the local repository. The command git add origin followed by the url of our github repo links the folder to the repo on github. Note the web address ends in .git . If you are following along and want to build your own static site, make sure to change username to your github username and reponame to your github repo name. git init git remote add origin https://github.com/username/reponame.git Now for the git magic. On github.com we have a README.md file and a licence. But the local staticsite folder on the computer is empty. So the two folders aren't in sync. To make the contents of each folder identical, we pull the files from github onto the local computer. A pull \"pulls\" or gets the files from github and copies them to the local staticsite folder. (staticsite)$ git pull origin master If you look in the local staticsite folder you should now see the following two files: staticsite ├── LICENSE ├── README.md The development environment is set! On to building the site! Now each time I work on the site, I navigate to the staticsite folder on whatever computer I am using. Before any editing, I key in the command: git pull origin master The after the pull the staticsite folder is up to date with the newest version of all the files on github. Then I go about editing files, writing posts, changing settings, etc. After the edits, the last thing I type before shutting down the computer for the day is: git push origin master This ensures all of my computers and the github repo contain the same version of the site. In the next post we will In this post, we will use the pelican-quickstart command to get the blog off the ground, write our first post and view a demo version of the site.","tags":"this site","url":"how-i-built-site-1.html"},{"title":"Create a new virtual environment with Conda","text":"To start a new Python project, it is best practice to create a new virtual environment. I have the Anaconda distribution of Python installed on my Windows 10 machine at work. When you install Anaconda , it comes with the very useful Anaconda Prompt . Using the Anaconda Prompt is a bit like using the terminal on a Mac OSX or Linux. To start the Anaconda Prompt on Windows 10, go to the Windows start button on the lower left and select Anaconda Prompt . To create the new environment, we need to issue the following command at the prompt: conda create --name webscrape python=3.6 The conda create command builds the new virtual environment. The --name webscrape flag gives our new virtual environment the name webscrape . I like to name my virtual environments the same name as the project that I will use that environment for, or after the name of the package that will be used the most. Including python=3.6 ensures that your virtual environment has an up to date version of python. Conda will tell us: The following NEW packages will be INSTALLED: certifi: 2016.2.28-py36_0 pip: 9.0.1-py36_1 python: 3.6.2-0 setuptools: 36.4.0-py36_0 vs2015_runtime: 14.0.25420-0 wheel: 0.29.0-py36_0 wincertstore: 0.2-py36_0 Proceed ([y]/n)? y Type y to confirm that you want to create the new virtual environment. To use the new virtual environment webscrape you need to activate it by typing: activate webscrape You know you are in your virtual environment webscrape when (webscrape) is in parenthesis at the start of the prompt: (webscrape) tribilium@Den-PC:~$ To deactivate an active environment, use: deactivate For power-users using the terminal on Mac or Linux, you must use source activate to enter into the virtual environment. source activate webscrape and source deactivate webscrape If you see the (webscrape) in parenthesis before the command prompt, that means you set up the new virtual environment and are now using it. You can view a list of your virtual environments using the conda info --envs or conda env list command. conda info --envs # conda environments: # matplotlib /home/tribilium/anaconda3/envs/matplotlib webscrape * /home/tribilium/anaconda3/envs/pelican root /home/tribilium/anaconda3 Notice the * asterisk on the line with webscrape . The virtual environment with the * is currently active. To exit the virtual environment, use the command deactivate . If you run conda env list again, you'll see there is no * in front of webscrape . That's because you are not currently in that virtual environment. conda env list # conda environments: # matplotlib /home/tribilium/anaconda3/envs/matplotlib webscrape /home/tribilium/anaconda3/envs/pelican root * /home/tribilium/anaconda3 We can spin up the virtual environment again with the activate command.","tags":"Orientation","url":"new-virtual-environment-with-conda.html"},{"title":"Installing Anaconda on Windows","text":"In this post, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Steps: Visit Anaconda.com/downloads Select Windows Download the .exe installer Open and run the .exe installer Open the Anaconda prompt and run some Python code 1. Visit the Anaconda downloads page Go to the following link: Anaconda.com/downloads The Anaconda Downloads Page will look something like this: 2. Select the Windows Select Windows where the three opperating systems are listed. 3. Download Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version. You may be prompted to enter your email. You can still download Anaconda if you click No Thanks and don't enter your Work Email address. The download is quite large (over 500 MB) so it may take a while for the download to complete. 4. Open and run the installer Once the download completes, open and run the .exe installer At the beginning of the install you will need to click Next to confirm the installation and agree to the license At the Advanced Installation Options screen, I recommend that you do not check \"Add Anaconda to my PATH environment variable\" 5. Open the Conda prompt from the Windows start menu After the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt This will open up the Anaconda prompt, which is often called the Conda prompt . Anaconda is the Python distribution and the Conda prompt is a command line tool (a program where you type in your commands instead of using a mouse). It doesn't look like much, but it is really helpful for an undergraduate engineer using Python. At the Anaconda prompt, type python . This will start the Python interperater. Note the Python version. You should see something like Python 3.6.1 . With the interperter running, you will see a set of greater-than symbols >>> before the cursor. Now you can type Python commands. Try typing import this . You should see the Zen of Python by Tim Peters To close the Python interperater, type exit() at the interperator prompt >>> . Note the double parenthesis at the end of the command. The () is needed to stop the Python interperator and get back out to the Conda Prompt. To close the Conda prompt, you can either close the window with the mouse, or type exit . Congratulations! You installed the Anaconda distribution on your Windows computer! When you want to use the Python interperater again, just click the Windows Start button and select the Anaconda Prompt and type python .","tags":"Orientation","url":"installing-anaconda-on-windows.html"}]}