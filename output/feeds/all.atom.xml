<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python Programming for Undergraduate Engineers</title><link href="https://professorkazarinoff.github.io/staticsite/" rel="alternate"></link><link href="https://professorkazarinoff.github.io/staticsite/feeds/all.atom.xml" rel="self"></link><id>https://professorkazarinoff.github.io/staticsite/</id><updated>2017-12-04T14:15:00-08:00</updated><entry><title>How I build this site - Part 3</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-3.html" rel="alternate"></link><published>2017-12-04T14:15:00-08:00</published><updated>2017-12-04T14:15:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-12-04:/staticsite/how-i-built-this-site-3.html</id><summary type="html">&lt;p&gt;This is the third part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html"&gt;last post&lt;/a&gt;, we used &lt;code&gt;pelican-quickstart&lt;/code&gt; to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile responsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html"&gt;last post&lt;/a&gt;, we used &lt;code&gt;pelican-quickstart&lt;/code&gt; to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile reponsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme.&lt;/p&gt;
&lt;h3&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post we are going to have a a static site with a great looking bootstrap3 theme which is mobile responsive and looks great on desktops, tablets and phones.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;Pull the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Add a git submodule to our staticsite folder and bring in the pelican-themes repo from github&lt;/li&gt;
&lt;li&gt;Add a git submodule to our staticsite folder and bring in the pelican-plugins repo from github&lt;/li&gt;
&lt;li&gt;Modify the pelicanconf.py file to point to our new theme, and add a new plugin&lt;/li&gt;
&lt;li&gt;Build and preview the site with Pelican&lt;/li&gt;
&lt;li&gt;Add and commit the changes then push those changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Big steps, it's really going to look like a website when we are done.&lt;/p&gt;
&lt;h3&gt;Activate our virtual environment and pull from github&lt;/h3&gt;
&lt;p&gt;Open the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; and activate the &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then cd into the &lt;strong&gt;staticsite&lt;/strong&gt; directory and bring in the most up to date version of the site stored on github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ cd ~
(staticsite) $ cd Documents/staticsite
(staticsite) $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use git submodule add to pull all of the themes into our local &lt;strong&gt;staticsite/pelican-themes&lt;/strong&gt; directory&lt;/h3&gt;
&lt;p&gt;There are a bunch of different themes available for static site built with Pelican. The three I was most interested in were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;material&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;voidy_bootstrap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pelican-bootstrap3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can bring in all of the Pelican themes stored on github by creating a &lt;em&gt;git submodule&lt;/em&gt;. A git submodule is a sub-repository within a git repository that is linked to another repository. It is a way to bring in something else from github within a local repository and not have to keep a local copy up to date. Each time we "pull" from the submodule, we get the newest version of the pelican-themes repo on github. We don't have to manually track any changes to these themes and incorporate them to our local version. When the changes are made to the themes on github, we just pull those changes down to our local version. The lines &lt;code&gt;git submodule init&lt;/code&gt; and &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; are important to call. If those two commands are not moved we'll end up with empty folders within the &lt;strong&gt;staticsite/pelican-themes&lt;/strong&gt; directory. A lot of the themes are submodules themselves so the &lt;code&gt;--recursive&lt;/code&gt; option has to be used to pull all of these submodules down. Without &lt;code&gt;--recursive&lt;/code&gt; you can end up with empty folders.&lt;/p&gt;
&lt;p&gt;To create the folder for our pelican-themes git submodule, ensure you are in the staticsite folder, then call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;

$ git submodule add https://github.com/getpelican/pelican-themes.git
$ git submodule init
$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ensure that we are still in the &lt;strong&gt;staticsite&lt;/strong&gt; directory and pull down the pelican-plugins repo form github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;

$ git submodule add https://github.com/getpelican/pelican-plugins.git
$ git submodule init
$ git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the contents of the &lt;strong&gt;staticsite&lt;/strong&gt; folder should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── content
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
├── pelican-themes
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Modify the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file, so that we can use a new theme.&lt;/h3&gt;
&lt;p&gt;So far our &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file contains only default lines of code that Pelican built for us. In order to use a new theme, we need to edit this configuration file. After we edit the configuration file, the &lt;code&gt;make html&lt;/code&gt; command will produce new .html pages in the &lt;strong&gt;output&lt;/strong&gt; directory. The relevant lines to add and modify in the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#pelicanconf.py

PLUGIN_PATHS = [&amp;#39;pelican-plugins&amp;#39;]

THEME = &amp;#39;pelican-themes/pelican-bootstrap3&amp;#39;
BOOTSTRAP_THEME = &amp;#39;flatly&amp;#39;

PLUGIN_PATHS = [&amp;#39;/path/to/git/pelican-plugins&amp;#39;]
JINJA_ENVIRONMENT = {&amp;#39;extensions&amp;#39;: [&amp;#39;jinja2.ext.i18n&amp;#39;]}
PLUGINS = [
    &amp;#39;i18n_subsites&amp;#39;]

I18N_TEMPLATES_LANG = &amp;#39;en&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Taken directly from the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelicin-bootstrap3 README.md&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... this template can be translated (see Translations below). You also need to activate a plugin that initializes the i18n jinja extension. One possibility is an up to date version of the i18n_subsites plugin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we need to make sure to include the &lt;strong&gt;i18n&lt;/strong&gt; plugin in our &lt;strong&gt;&lt;em&gt;pelicanonf.py&lt;/em&gt;&lt;/strong&gt; file. Again from the from the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelicin-bootstrap3 README.md&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are using i18n_subsites and you are not using English as your default language, make sure to also correctly specify the default language of the theme. Otherwise the translations will not be used on your default site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Build and preview the site with Pelican&lt;/h3&gt;
&lt;p&gt;With the &lt;strong&gt;pelican-plugins&lt;/strong&gt; and &lt;strong&gt;pelican-themes&lt;/strong&gt; repos downloaded and the &lt;strong&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/strong&gt; file edited, we can build the site and take a look at it with a web browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view the site, point a brower to &lt;em&gt;localhost:8000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, the site should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-boostrap3-basic-site.png" src="https://professorkazarinoff.github.io/staticsite/images/simple_pelican-bootstrap3_theme.png"&gt;&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;ctrl-c&lt;/code&gt; to shut down the server.&lt;/p&gt;
&lt;h3&gt;Add and commit the changes then push those changes to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the the site, we add &lt;strong&gt;all of the changes&lt;/strong&gt; to our local git repo using &lt;code&gt;git add .&lt;/code&gt;. Then we commit those changes with &lt;code&gt;git commit&lt;/code&gt; and add the &lt;code&gt;-m "added pelican_bootstrap3 theme"&lt;/code&gt; flag to give supply a commit message (make sure to use double quotes "commit message"). To push those changes up to github use &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;added pelican_bootstrap3 theme&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/drafts/how-i-built-site-4.html"&gt;next post&lt;/a&gt; we will add some additional &lt;em&gt;pelican-plugins&lt;/em&gt; to bring extra functionality to the site and add the ability to include &lt;strong&gt;jupyter notebooks&lt;/strong&gt; in posts.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="markdown"></category></entry><entry><title>How I build this site - Part 2</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html" rel="alternate"></link><published>2017-11-28T14:15:00-08:00</published><updated>2017-11-28T14:15:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-28:/staticsite/how-i-built-this-site-2.html</id><summary type="html">&lt;p&gt;This is the second part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-site-1.html"&gt;last post&lt;/a&gt;, we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground. We are also going to create a &lt;strong&gt;first_post.md&lt;/strong&gt; file and serve up the website locally so we can take a look at it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part in a multi-part series on how I built this site. In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-site-1.html"&gt;last post&lt;/a&gt;, we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground. We are also going to create a &lt;strong&gt;first_post.md&lt;/strong&gt; file and serve up the website locally so we can take a look at it.&lt;/p&gt;
&lt;h3&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;We are going to accomplish the following in this post. By the end of the post, we will have a working website with one blog post served up locally and an updated github repo with all the changes saved.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activate our &lt;code&gt;staticsite&lt;/code&gt; virtual environment&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pull&lt;/em&gt; the most recent version of our site from github&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to make a first version of the site&lt;/li&gt;
&lt;li&gt;Write a first post in markup language (.md)&lt;/li&gt;
&lt;li&gt;Build the site using the &lt;code&gt;make html&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Serve the site locally using &lt;code&gt;make serve&lt;/code&gt; and view with a web browser&lt;/li&gt;
&lt;li&gt;Add and commit the changes then push those changes to github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's a lot to do, so let's get started.&lt;/p&gt;
&lt;h3&gt;Activate our &lt;strong&gt;staticsite&lt;/strong&gt; virtual environment&lt;/h3&gt;
&lt;p&gt;I highly recommend installing the Anaconda distribution of python. If you followed along with the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-site-1.html"&gt;previous post&lt;/a&gt;, you already installed Anaconda and can pull up the Anaconda prompt. Open the Anaconda Prompt and see which virtual environments are available.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda info --envs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a list of all the virtual environments conda has created on your machine. It should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite                  C:\Users\user.name\AppData\Local\Continuum\Anaconda3\envs\staticsite
root                     *  C:\Users\user.name\AppData\Local\Continuum\Anaconda3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;staticsite&lt;/code&gt; virtual environment is the one we set up to create our site. Activate it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see &lt;code&gt;(staticsite)&lt;/code&gt; before the command prompt. This means we are operating in the &lt;code&gt;staticsite&lt;/code&gt; virtual environment. &lt;/p&gt;
&lt;h3&gt;View installed packages&lt;/h3&gt;
&lt;p&gt;We installed pelican, markdown and fabric in the last post. Let's make sure they are installed in our &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ pip freeze
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you see the following modules are installed: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;beautifulsoup4==4.6.0
Jinja2==2.9.6
Fabric==1.14.0
Markdown==2.6.9
pelican==3.7.1
Pygments==2.2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pelican Quickstart - make the site!&lt;/h3&gt;
&lt;p&gt;We are now going to build the site! Exciting stuff. With the virtual environment and packages in place, we just need to make sure we are in a directory where we want our site to live.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ cd ~
(staticsite)$ cd Documents
(staticsite)$ cd staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can confirm you are working in the staticsite directory by typing &lt;code&gt;pwd&lt;/code&gt; which stands for &lt;em&gt;print working directory&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(staticsite)$ pwd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can spin up the settings and structure of our pelican build. Start the process with the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican will ask us a bunch of questions at the start. The initial settings I used are below. Make sure to change the title, author, URL prefix, and timezone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? Python Programming for Undergraduate Engineers
&amp;gt; Who will be the author of this web site? Peter D. Kazarinoff
&amp;gt; What will be the default language of this web site? [English]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) Y
&amp;gt; What is your URL prefix? (see above example; no trailing slash) https://username.github.io/staticsite
&amp;gt; Do you want to enable article pagination? (Y/n) Y
&amp;gt; How many articles per page do you want? [10] 5
&amp;gt; What is your time zone? [Europe/Paris] America/Los_Angeles
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) Y
&amp;gt; Do you want to upload your website using FTP? (y/N) N
&amp;gt; Do you want to upload your website using SSH? (y/N) N
&amp;gt; Do you want to upload your website using Dropbox? (y/N) N
&amp;gt; Do you want to upload your website using S3? (y/N) N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can create and view the site. The command &lt;code&gt;make html&lt;/code&gt; will create the site and the command &lt;code&gt;make serve&lt;/code&gt; will spin up a local webserver that allows us to view the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ make html
(staticsite)$ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Point a web browser to: &lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="local host in browser" src="https://professorkazarinoff.github.io/staticsite/images/browser_to_localhost8000.png"&gt;&lt;/p&gt;
&lt;p&gt;The site will look something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="default pelican site" src="https://professorkazarinoff.github.io/staticsite/images/default_site_no_posts.png"&gt;&lt;/p&gt;
&lt;p&gt;We can shut down the server by typing &lt;code&gt;ctrl-c&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Write a first post in markup language (.md)&lt;/h3&gt;
&lt;p&gt;Time to write our first post. The contents of the &lt;strong&gt;staticsite&lt;/strong&gt; directory should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
│   develop_server.sh
│   fabfile.py
│   Makefile
│   pelicanconf.py
│   publishconf.py
│
├───content
├───output
└───__pycache__
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make a new post, we need to add a markup file (.md file) to the &lt;strong&gt;content&lt;/strong&gt; folder. Let's call our first post &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt;. Depending on the computer I'm using, I create .md files with different programs. One Windows 10, I have been using Code Writer. On Mac OSX and Linux, I use &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;. The &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt; file saved in the content folder needs to have the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Peter&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Kazarinoff&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;very&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After saving the file &lt;strong&gt;&lt;em&gt;first_post.md&lt;/em&gt;&lt;/strong&gt; in the &lt;strong&gt;content&lt;/strong&gt; folder, the static site folder should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite/
│   develop_server.sh
│   fabfile.py
│   Makefile
│   pelicanconf.py
│   publishconf.py
│
├───content
│       first_post.md
│
├───output
└───__pycache__
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's build the site again and take a look at our new post&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ make html
(staticsite)$ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, point a web browser to: &lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="local host in browser" src="https://professorkazarinoff.github.io/staticsite/images/browser_to_localhost8000.png"&gt;&lt;/p&gt;
&lt;p&gt;The site will look something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="default pelican site" src="https://professorkazarinoff.github.io/staticsite/images/default_site_1_post.png"&gt;&lt;/p&gt;
&lt;p&gt;It works! I can see the first post!&lt;/p&gt;
&lt;p&gt;We can shut down the server by typing &lt;code&gt;ctrl-c&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Add and commit the changes then push the changes to github&lt;/h3&gt;
&lt;p&gt;When we are done editing the posts and the site, we &lt;strong&gt;add all&lt;/strong&gt; of the changes to our local git repo using &lt;code&gt;git add .&lt;/code&gt; Then we commit these changes with &lt;code&gt;git commit&lt;/code&gt; and use the &lt;code&gt;-m "created pelcian static site"&lt;/code&gt; flag to supply a commit message (make sure to use double quotes "commit message"). Push those changes up to github with &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;created pelican static site&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-3.html"&gt;next post&lt;/a&gt;, we will customize the site with a &lt;em&gt;pelican-theme&lt;/em&gt; called &lt;strong&gt;pelican-bootstrap3&lt;/strong&gt;.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="markdown"></category></entry><entry><title>How I build this site - Part 6</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-6.html" rel="alternate"></link><published>2017-11-27T12:40:00-08:00</published><updated>2017-11-27T12:40:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-27:/staticsite/how-i-built-this-site-6.html</id><summary type="html">&lt;p&gt;This is the sixth part of a multi-part series on how I built this site. In last post, we customized the site and added the ability to use jupyter notebooks in posts.  In this post we are going to deploy the site to &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;. Github pages is a place on github were documentation and static sites can be hosted. It was tricky for me to set this up, but after a lot trial and error, I was able to get it to work.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the sixth part of a multi-part series on how I built this site. In last post, we customized the site and added the ability to use jupyter notebooks in posts.  In this post we are going to deploy the site to &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;. Github pages is a place on github were documentation and static sites can be hosted. It was tricky for me to set this up, but after a lot of trial and error, I was able to get it to work.&lt;/p&gt;
&lt;h3&gt;Steps in this post&lt;/h3&gt;
&lt;p&gt;By the end of the post we are going to have a working static website hosted on github pages. To accomplish we will complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pull the most recient version of the site from gitub&lt;/li&gt;
&lt;li&gt;Run pelican's &lt;code&gt;make html&lt;/code&gt; command to build the site and preview it with &lt;code&gt;make serve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify the &lt;strong&gt;&lt;em&gt;publishconf.py&lt;/em&gt;&lt;/strong&gt; file to include our github pages url&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;pelican content -s publishconf.py&lt;/code&gt; to create a published version of the site in the output directory&lt;/li&gt;
&lt;li&gt;Add, commit and push the published contents to github&lt;/li&gt;
&lt;li&gt;Make a gh-pages branch in our staticsite repo on github&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git subtree push --prefix output origin gh-pages&lt;/code&gt; to push the output directory to the gh-pages branch&lt;/li&gt;
&lt;li&gt;View the freshly published site! &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, let's get started. Can't wait to see the published site live on github pages.&lt;/p&gt;
&lt;h3&gt;Pull to the most recent version of the site from github&lt;/h3&gt;
&lt;p&gt;Open a terminal and &lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;staticsite&lt;/code&gt; folder. Then we need to activate our &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment with &lt;code&gt;source activate staticsite&lt;/code&gt;. Once in the &lt;code&gt;(staticsite)&lt;/code&gt; environment, we can call &lt;code&gt;git pull origin master&lt;/code&gt; to pull the most recent version of the site down from github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Documents/staticsite
source activate staticsite
(staticsite) $ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we use the &lt;code&gt;make html&lt;/code&gt; command to build a demo version of the site. This will place the static files (html, css, javascript) that forms the static site in the &lt;strong&gt;output&lt;/strong&gt; folder.  We can preview the site with &lt;code&gt;make serve&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ make html
(staticsite) $ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The demo version of our static site can now be viewed by pointing a browser to:&lt;/p&gt;
&lt;p&gt;&lt;a href="localhost:8000"&gt;localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;ctr-c&lt;/code&gt; to stop the server.&lt;/p&gt;
&lt;h3&gt;Modify the &lt;strong&gt;&lt;em&gt;publishconf.py&lt;/em&gt;&lt;/strong&gt; file to use the github pages url&lt;/h3&gt;
&lt;p&gt;The staticsite directory should look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite
├── LICENSE
├── Makefile
├── README.md
├── __pycache__
├── _nb_header.html
├── content
├── develop_server.sh
├── fabfile.py
├── output
├── pelican-plugins
├── pelican-themes
├── pelican.pid
├── pelicanconf.py
├── publishconf.py
└── srv.pid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we need to edit the &lt;strong&gt;&lt;em&gt;publishconf.py&lt;/em&gt;&lt;/strong&gt; file to add our github pages url to &lt;code&gt;SITEURL&lt;/code&gt; and set &lt;code&gt;RELATIVE_URLS&lt;/code&gt; to True. The lines to change are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#publishconf.py
SITEURL = &amp;#39;https://username.github.io/staticsite&amp;#39;
RELATIVE_URLS = True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure to set &lt;code&gt;username&lt;/code&gt; to your github user name. Setting &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt; is necessary for the links on the site to work and for the css and javascript files run on github pages. When I initially set &lt;code&gt;RELATIVE_URLS = False&lt;/code&gt;, the site looked terrible, had no formatting or css and none of the links worked. Setting &lt;code&gt;RELATIVE_URLS = True&lt;/code&gt; fixed the problem.&lt;/p&gt;
&lt;h3&gt;Create a published version of the site&lt;/h3&gt;
&lt;p&gt;Up to this point, we used the &lt;code&gt;make html&lt;/code&gt; command to build a demo version of the site. Now we are ready to &lt;em&gt;publish&lt;/em&gt; the site. We publish the site by running the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content -s publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a published version of the site with relative url's in the &lt;strong&gt;output&lt;/strong&gt; directory. &lt;/p&gt;
&lt;h3&gt;Add, commit, push to the master branch on github&lt;/h3&gt;
&lt;p&gt;Before we can put the published version of the site up on github pages, we need to push the current version of the site up to the master branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &amp;quot;first published version&amp;quot;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Create a &lt;strong&gt;gh-pages&lt;/strong&gt; branch in our staticsite repo on github&lt;/h3&gt;
&lt;p&gt;Up to this point, we saved our work to the &lt;strong&gt;master&lt;/strong&gt; branch of the staticsite repository on github. To host the site on github pages, we need to create a new branch in the staticsite repo called &lt;strong&gt;gh-pages&lt;/strong&gt;. The &lt;strong&gt;master&lt;/strong&gt; branch still houses the code,settings, markup files, notebooks, images, etc. to build the site. Any html, css and javascript files in the &lt;strong&gt;gh-pages&lt;/strong&gt; branch of the staticsite repo on github will be served like a regular website. To create the new branch, go the main staticsite repository page on github and click the &lt;strong&gt;Branch: Master&lt;/strong&gt; drop down menu on the upper left hand side. Enter the name of the new branch: &lt;strong&gt;gh-pages&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Use &lt;strong&gt;git subtree&lt;/strong&gt; to push the contents of the &lt;strong&gt;output&lt;/strong&gt; directory to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch&lt;/h3&gt;
&lt;p&gt;I tried a bunch of different ways to send the contents of the &lt;strong&gt;output&lt;/strong&gt; directory up to github pages. First I tried multiple times to use &lt;code&gt;ghp-import&lt;/code&gt; shown in the &lt;a href="http://docs.getpelican.com/en/stable/tips.html"&gt;Pelican documentation&lt;/a&gt;, but I never got it to work right. I also tried using git submodules, but had trouble with that as well. I kept getting commit error messages. The way that finally worked was the &lt;code&gt;git subtree&lt;/code&gt; command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git subtree push --prefix output origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the subtree we are pushing is the &lt;strong&gt;output&lt;/strong&gt; directory. We are pushing this subtree to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch. &lt;/p&gt;
&lt;h3&gt;View the site on github pages.&lt;/h3&gt;
&lt;p&gt;Awesome! The site is now hosted for everyone to see on github pages! Pretty cool right? Point a browser to the github pages url and take a look:&lt;/p&gt;
&lt;p&gt;https://username.github.io/staticsite&lt;/p&gt;
&lt;p&gt;Change &lt;em&gt;username&lt;/em&gt; to your github user name. My site (the one that you are reading) is hosted here: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite"&gt;https://professorkazarinoff.github.io/staticsite&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="blog"></category><category term="git"></category><category term="github"></category></entry><entry><title>How I build this site - Part 1</title><link href="https://professorkazarinoff.github.io/staticsite/how-i-built-site-1.html" rel="alternate"></link><published>2017-11-22T12:40:00-08:00</published><updated>2017-11-22T12:40:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-22:/staticsite/how-i-built-site-1.html</id><summary type="html">&lt;p&gt;This is the first part of a multi-part series on how I built this site. In this first post, I'll review the development environment, Python, virtual environments, installing the necessary packages and setting up git.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environment, installing Python, virtual environments, installing the necessary packages and setting up git.&lt;/p&gt;
&lt;h3&gt;Setting up the development environment&lt;/h3&gt;
&lt;p&gt;What does that even mean? Before I started building this site I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a &lt;em&gt;development environment&lt;/em&gt;. To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An operating system: This website was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS).&lt;/li&gt;
&lt;li&gt;Python: Python 3.6 (legacy Python is version 2.7)&lt;/li&gt;
&lt;li&gt;Anaconda: The Anaconda Prompt and the Anaconda Python distribution&lt;/li&gt;
&lt;li&gt;Github.com and git: Four different computers were used build the site. Github is the central place where the most up to date version of the site is kept. &lt;/li&gt;
&lt;li&gt;Pelican: A static site generator written in Python. Pelican will build the site from a settings file (pelicanconf.py) and posts written in markdown (.md files)&lt;/li&gt;
&lt;li&gt;Markdown: the posts on this website are written in markdown, or .md format&lt;/li&gt;
&lt;li&gt;fabric and make: fabric is a python package to automate builds and tasks. Fabric works on Windows. Make is used on MacOSX and Linux to build the site and serve up a demo version of the site.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Installing Python (the Anaconda distribution)&lt;/h3&gt;
&lt;p&gt;I highly recommend installing the Anaconda distribution of Python. I have the Anaconda distribution installed on all the computers I used to build this site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows 10 Desktop at work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac OSX laptop at work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac OSX laptop at home&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux (Ubuntu 16.04 LTS) Desktop at home. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. &lt;/p&gt;
&lt;p&gt;Download the latest release at:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.anaconda.com/download/"&gt;https://www.anaconda.com/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Anaconda distribution of Python comes with an up to date and stable version of Python (Python 3.6) and the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. The &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; is useful because it allows me to run shell commands on my Windows 10 machine at work. These are the same commands I would run in the terminal on my Mac OSX or Linux boxes. The &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; makes creating and logging into virtual environments easy and allows me to use git on Windows 10. Follow this post to &lt;a href="https://professorkazarinoff.github.io/staticsite/installing-anaconda-on-windows.html"&gt;install the Anaconda on Windows 10.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Create a new virtual environment&lt;/h3&gt;
&lt;p&gt;Before downloading Pelican, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment &lt;strong&gt;&lt;em&gt;staticsite&lt;/em&gt;&lt;/strong&gt;. The &lt;code&gt;conda create&lt;/code&gt; command creates the environment and the &lt;code&gt;-n staticsite&lt;/code&gt; flag adds the name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda create -n staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a new virtual environment called &lt;strong&gt;&lt;em&gt;staticsite&lt;/em&gt;&lt;/strong&gt;. Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment &lt;strong&gt;&lt;em&gt;staticsite&lt;/em&gt;&lt;/strong&gt; is created, we need to activate it and start using it with the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should now see &lt;code&gt;(staticsite)&lt;/code&gt; before the terminal prompt. This means we are using the &lt;code&gt;(staticsite)&lt;/code&gt; virtual environment.&lt;/p&gt;
&lt;h3&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;Time for some fun! Installing Pelican. Pelican is a Python package that creates static websites. Static sites are websites that only have html, css and javascript. A static site is not connected to a database and there is no code run on the server side. The server just serves static files (html, css, javascript) to the client when the client requests them. In order to install Pelican, we need to install &lt;code&gt;pip&lt;/code&gt; first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ conda install pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once &lt;code&gt;pip&lt;/code&gt; is installed, we can install &lt;code&gt;pelican&lt;/code&gt; and &lt;code&gt;markdown&lt;/code&gt;. These are two of the core pieces we need to build the website. &lt;code&gt;fabric3&lt;/code&gt; is also installed because we'll use it to build and demo the site on Windows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ pip install pelican
(staticsite)$ pip install markdown
(staticsite)$ pip install fabric3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Create a github account and create a new repository&lt;/h3&gt;
&lt;p&gt;While I was making the site, it became clear that I had to keep track of &lt;strong&gt;&lt;em&gt;version control&lt;/em&gt;&lt;/strong&gt;. I would make some changes to the site on my computer at work, then come home and make more changes to the site. Bringing a USB thumb drive back and forth was hard. I would forget the thumb drive at work or home and then could not edit the site. Or worse, I'd edit the site in both places and try to remember which changes were made where and which was the best version. Ah!&lt;/p&gt;
&lt;p&gt;The solution is to use &lt;strong&gt;git&lt;/strong&gt; and &lt;strong&gt;github&lt;/strong&gt;. Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. Github.com is the where the site content and settings are remotely stored and integrates easily with git. &lt;/p&gt;
&lt;p&gt;To sign up for a github.com account go here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/join"&gt;https://github.com/join&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The account activation screen looks something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github.com Join" src="../images/join_github.png"&gt;&lt;/p&gt;
&lt;p&gt;Once the account is set up, log in and create a new repository. Use the + button on the upper right-hand menu:&lt;/p&gt;
&lt;p&gt;&lt;img alt="new github repo" src="../images/new_github_repo.png"&gt;&lt;/p&gt;
&lt;p&gt;I named the new repository: &lt;strong&gt;staticsite&lt;/strong&gt; and included both a &lt;strong&gt;README.md&lt;/strong&gt; and a &lt;strong&gt;GNU General Public License v3.0&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="new github repo details" src="../images/create_a_new_repo_details.png"&gt;&lt;/p&gt;
&lt;h3&gt;Make a directory for the site and link it to github&lt;/h3&gt;
&lt;p&gt;Once the github repo (short for repository, basically a folder with files on github.com) is set up, the last step to complete the development environment is to link the remote repo on github to the local version of the site on my computer. &lt;/p&gt;
&lt;p&gt;The local version is in a folder call &lt;code&gt;staticsite&lt;/code&gt; in the &lt;code&gt;Documents&lt;/code&gt; folder. The &lt;code&gt;staticsite&lt;/code&gt; folder will contain all the files used to build the site and the output files created by Pelican that &lt;em&gt;are&lt;/em&gt; the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ cd ~
(staticsite)$ cd Documents
(staticsite)$ mkdir staticsite
(staticsite)$ cd staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can set up git to keep the contents of the local staticsite folder in sync with the contents of the staticsite repo on github.com. The command &lt;code&gt;git init&lt;/code&gt; will initiate or create the local repository. The command &lt;code&gt;git add origin&lt;/code&gt; followed by the url of our github repo links the folder to the repo on github. Note the web address ends in &lt;code&gt;.git&lt;/code&gt;. If you are following along and want to build your own static site, make sure to change &lt;code&gt;username&lt;/code&gt; to your github username and &lt;code&gt;reponame&lt;/code&gt; to your github repo name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git remote add origin https://github.com/username/reponame.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now for the git magic. On github.com we have a README.md file and a licence. But the local staticsite folder on the computer is empty. So the two folders aren't in sync. To make the contents of each folder identical, we &lt;strong&gt;&lt;em&gt;pull&lt;/em&gt;&lt;/strong&gt; the files from github onto the local computer. A &lt;strong&gt;&lt;em&gt;pull&lt;/em&gt;&lt;/strong&gt; "pulls" or gets the files from github and copies them to the local staticsite folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite)$ git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you look in the local staticsite folder you should now see the following two files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;staticsite
├── LICENSE
├── README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The development environment is set! On to building the site!&lt;/p&gt;
&lt;p&gt;Now each time I work on the site, I navigate to the &lt;strong&gt;staticsite&lt;/strong&gt; folder on whatever computer I am using. Before any editing, I key in the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The after the &lt;em&gt;pull&lt;/em&gt; the staticsite folder is up to date with the newest version of all the files on github. Then I go about editing files, writing posts, changing settings, etc. After the edits, the last thing I type before shutting down the computer for the day is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ensures all of my computers and the github repo contain the same version of the site.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/how-i-built-this-site-2.html"&gt;next post&lt;/a&gt; we will In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground, write our first post and view a demo version of the site.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="staticsite"></category></entry><entry><title>Create a new virtual environment with Conda</title><link href="https://professorkazarinoff.github.io/staticsite/new-virtual-environment-with-conda.html" rel="alternate"></link><published>2017-11-17T20:20:00-08:00</published><updated>2017-11-17T20:20:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-17:/staticsite/new-virtual-environment-with-conda.html</id><summary type="html">&lt;p&gt;To start a new Python project, it is best practice to create a new virtual environment. I have the &lt;strong&gt;Anaconda&lt;/strong&gt; distribution of Python installed on my Windows 10 machine at work. When you &lt;a href="https://professorkazarinoff.github.io/staticsite/installing-anaconda-on-windows.html"&gt;install &lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/a&gt;, it comes with the very useful &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. Using the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; is a bit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To start a new Python project, it is best practice to create a new virtual environment. I have the &lt;strong&gt;Anaconda&lt;/strong&gt; distribution of Python installed on my Windows 10 machine at work. When you &lt;a href="https://professorkazarinoff.github.io/staticsite/installing-anaconda-on-windows.html"&gt;install &lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/a&gt;, it comes with the very useful &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. Using the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; is a bit like using the terminal on a Mac OSX or Linux. To start the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; on Windows 10, go to the Windows start button on the lower left and select &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda in start menu" src="images/anaconda_from_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;To create the new environment, we need to issue the following command at the prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create --name webscrape python=3.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;conda create&lt;/code&gt; command builds the new virtual environment. The &lt;code&gt;--name webscrape&lt;/code&gt; flag gives our new virtual environment the name &lt;code&gt;webscrape&lt;/code&gt;.  I like to name my virtual environments the same name as the project that I will use that environment for, or after the name of the package that will be used the most.  Including &lt;code&gt;python=3.6&lt;/code&gt; ensures that your virtual environment has an up to date version of python. &lt;/p&gt;
&lt;p&gt;Conda will tell us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The following NEW packages will be INSTALLED:

    certifi:        2016.2.28-py36_0
    pip:            9.0.1-py36_1
    python:         3.6.2-0
    setuptools:     36.4.0-py36_0
    vs2015_runtime: 14.0.25420-0
    wheel:          0.29.0-py36_0
    wincertstore:   0.2-py36_0

Proceed ([y]/n)? y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type &lt;code&gt;y&lt;/code&gt; to confirm that you want to create the new virtual environment. To use the new virtual environment &lt;code&gt;webscrape&lt;/code&gt; you need to &lt;em&gt;activate&lt;/em&gt; it by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;activate webscrape
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You know you are in your virtual environment &lt;code&gt;webscrape&lt;/code&gt; when &lt;code&gt;(webscrape)&lt;/code&gt; is in parenthesis at the start of the prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(webscrape) tribilium@Den-PC:~$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To deactivate an active environment, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;For power-users using the terminal on Mac or Linux, you must use &lt;code&gt;source activate&lt;/code&gt; to enter into the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source activate webscrape
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source deactivate webscrape
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;If you see the &lt;code&gt;(webscrape)&lt;/code&gt; in parenthesis before the command prompt, that means you set up the new virtual environment and are now using it. You can view a list of your virtual environments using the &lt;code&gt;conda info --envs&lt;/code&gt; or &lt;code&gt;conda env list&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda info --envs

# conda environments:
#
matplotlib               /home/tribilium/anaconda3/envs/matplotlib
webscrape              * /home/tribilium/anaconda3/envs/pelican
root                     /home/tribilium/anaconda3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the &lt;code&gt;*&lt;/code&gt; asterisk on the line with &lt;code&gt;webscrape&lt;/code&gt;. The virtual environment with the &lt;code&gt;*&lt;/code&gt; is currently active. &lt;/p&gt;
&lt;p&gt;To exit the virtual environment, use the command &lt;code&gt;deactivate&lt;/code&gt;. If you run &lt;code&gt;conda env list&lt;/code&gt; again, you'll see there is no &lt;code&gt;*&lt;/code&gt; in front of &lt;code&gt;webscrape&lt;/code&gt;. That's because you are not currently in that virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env list

# conda environments:
#
matplotlib               /home/tribilium/anaconda3/envs/matplotlib
webscrape                /home/tribilium/anaconda3/envs/pelican
root                  *  /home/tribilium/anaconda3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can spin up the virtual environment again with the &lt;code&gt;activate&lt;/code&gt; command.&lt;/p&gt;</content><category term="python"></category><category term="conda"></category><category term="virtualenv"></category><category term="anaconda"></category><category term="anaconda prompt"></category></entry><entry><title>Installing Anaconda on Windows</title><link href="https://professorkazarinoff.github.io/staticsite/installing-anaconda-on-windows.html" rel="alternate"></link><published>2017-11-14T09:20:00-08:00</published><updated>2017-11-14T09:21:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2017-11-14:/staticsite/installing-anaconda-on-windows.html</id><summary type="html">&lt;p&gt;In this post, we will run through installing the &lt;a href="https://www.anaconda.com/what-is-anaconda/"&gt;Anaconda distribution&lt;/a&gt; of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs.&lt;/p&gt;
&lt;h4&gt;Steps:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Visit &lt;a href="https://www.anaconda.com/download/"&gt;Anaconda.com/downloads&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Windows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the .exe installer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open and run the .exe installer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the Anaconda prompt and run some Python code&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;1. Visit the Anaconda downloads page&lt;/h4&gt;
&lt;p&gt;Go to the following link: &lt;a href="https://www.anaconda.com/download/"&gt;Anaconda.com/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Anaconda Downloads Page will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda download page" src="images/anaconda_download_page.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;2. Select the Windows&lt;/h4&gt;
&lt;p&gt;Select Windows where the three opperating systems are listed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda select Windows" src="images/anaconda_select_windows.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;3. Download&lt;/h4&gt;
&lt;p&gt;Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version.&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda select python 3.6" src="images/anaconda_python3_or_python2.png"&gt;&lt;/p&gt;
&lt;p&gt;You may be prompted to enter your email. You can still download Anaconda if you click &lt;strong&gt;No Thanks&lt;/strong&gt; and don't enter your Work Email address.&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda" src="images/anaconda_enter_email.png"&gt;&lt;/p&gt;
&lt;p&gt;The download is quite large (over 500 MB) so it may take a while for the download to complete.&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda downloading" src="images/anaconda_downloading.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;4. Open and run the installer&lt;/h4&gt;
&lt;p&gt;Once the download completes, open and run the .exe installer&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda installer" src="images/anaconda_run_installer.png"&gt;&lt;/p&gt;
&lt;p&gt;At the beginning of the install you will need to click &lt;strong&gt;Next&lt;/strong&gt; to confirm the installation&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda installer click next" src="images/anaconda_installer_click_next.png"&gt;&lt;/p&gt;
&lt;p&gt;and agree to the license&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda license" src="images/anaconda_agree_to_license.png"&gt;&lt;/p&gt;
&lt;p&gt;At the Advanced Installation Options screen, I recommend that you &lt;strong&gt;do not check&lt;/strong&gt; "Add Anaconda to my PATH environment variable"&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda path variable" src="images/anaconda_installer_advanced_options.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;5. Open the Conda prompt from the Windows start menu&lt;/h4&gt;
&lt;p&gt;After the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda in start menu" src="images/anaconda_from_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;This will open up the Anaconda prompt, which is often called the &lt;strong&gt;Conda prompt&lt;/strong&gt;. Anaconda is the Python distribution and the Conda prompt is a command line tool (a program where you type in your commands instead of using a mouse). It doesn't look like much, but it is really helpful for an undergraduate engineer using Python.&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda prompt" src="images/anaconda_window.png"&gt;&lt;/p&gt;
&lt;p&gt;At the Anaconda prompt, type &lt;code&gt;python&lt;/code&gt;. This will start the Python interperater. &lt;/p&gt;
&lt;p&gt;&lt;img alt="conda prompt type python" src="images/conda_prompt_type_python.png"&gt;&lt;/p&gt;
&lt;p&gt;Note the Python version. You should see something like &lt;code&gt;Python 3.6.1&lt;/code&gt;.  With the interperter running, you will see a set of greater-than symbols &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; before the cursor. &lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda prompt" src="images/conda_type_python.png"&gt;&lt;/p&gt;
&lt;p&gt;Now you can type Python commands. Try typing &lt;code&gt;import this&lt;/code&gt;. You should see the &lt;strong&gt;&lt;em&gt;Zen of Python&lt;/em&gt;&lt;/strong&gt; by Tim Peters&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda_import_this" src="images/conda_import_this_output.png"&gt;&lt;/p&gt;
&lt;p&gt;To close the Python interperater, type &lt;code&gt;exit()&lt;/code&gt; at the interperator prompt &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.  Note the double parenthesis at the end of the command. The &lt;code&gt;()&lt;/code&gt; is needed to stop the Python interperator and get back out to the Conda Prompt.&lt;/p&gt;
&lt;p&gt;To close the Conda prompt, you can either close the window with the mouse, or type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Congratulations! You installed the Anaconda distribution on your Windows computer!&lt;/h4&gt;
&lt;p&gt;When you want to use the Python interperater again, just click the Windows Start button and select the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; and type &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt;</content><category term="python"></category><category term="anaconda"></category><category term="miniconda"></category><category term="conda"></category><category term="windows"></category></entry></feed>