<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python for Undergraduate Engineers - micropython</title><link href="https://professorkazarinoff.github.io/staticsite/" rel="alternate"></link><link href="https://professorkazarinoff.github.io/staticsite/feeds/micropython.atom.xml" rel="self"></link><id>https://professorkazarinoff.github.io/staticsite/</id><updated>2018-03-12T09:01:00-07:00</updated><entry><title>Using the Micropython RERL on an Adadfruit Feather Huzzah ESP8266</title><link href="https://professorkazarinoff.github.io/staticsite/micropython-REPL.html" rel="alternate"></link><published>2018-03-12T09:01:00-07:00</published><updated>2018-03-12T09:01:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-03-12:/staticsite/micropython-REPL.html</id><summary type="html">&lt;p&gt;This is the third part of a multipart series on Micropython. In &lt;a href="https://professorkazarinoff.github.io/staticsite/micropython-install.html"&gt;last post of the series&lt;/a&gt;, we installed Micropython on an Adafruit Feather Huzzah ESP8266 microcontroller using Python and a package called &lt;strong&gt;esptool&lt;/strong&gt;. In this post, we are going to write commands to the Micropython REPL (the Micropython prompt â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third part of a multipart series on Micropython. In &lt;a href="https://professorkazarinoff.github.io/staticsite/micropython-install.html"&gt;last post of the series&lt;/a&gt;, we installed Micropython on an Adafruit Feather Huzzah ESP8266 microcontroller using Python and a package called &lt;strong&gt;esptool&lt;/strong&gt;. In this post, we are going to write commands to the Micropython REPL (the Micropython prompt) to turn on and off an LED connected to the Feather Huzzah board. The posts in this series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/what-is-micropython.html"&gt;What is Micropython?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/micropython-install.html"&gt;Installing Micropython on an Adafruit Feather Huzzah ESP8266&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blink an LED on an Adafruit Feather Huzzah ESP8266 using Micropython (This post)&lt;/li&gt;
&lt;li&gt;Read the temperature from a MCP9808 breakout board using Micropyton&lt;/li&gt;
&lt;li&gt;Use Micropython to connect an Adafruit Feather Huzzah to a WiFi network&lt;/li&gt;
&lt;li&gt;Upload Micropython code to turn an Adafruit Feather Huzzah into a WiFi-enabled IoT weather station&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;pandas&lt;/strong&gt; and &lt;strong&gt;matplotlib&lt;/strong&gt; to plot the weather data from a WiFi-enabled IoT weather station.&lt;/li&gt;
&lt;li&gt;Upload MicroPython to a cheap $3 ESP-01 module&lt;/li&gt;
&lt;li&gt;Build custom firmware to turn the $3 ESP-01 into an low-cost WiFi enabled IoT switch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before you can use the Micropython REPL (the Microython prompt) running on the Adafruit Feather Huzzah ESP8266, Micropython needs to be installed on the board and Putty needs to be installed to communicate with the board over serial. See the &lt;a href="https://professorkazarinoff.github.io/staticsite/micropython-install.html"&gt;previous post&lt;/a&gt; on how to install Micropython on the board and install &lt;a href="https://www.putty.org/"&gt;Putty&lt;/a&gt; on a Windows 10 machine.&lt;/p&gt;
&lt;p&gt;Summary of Steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect the Adafruit Feather Huzzah ESP8266 using a USB cable&lt;/li&gt;
&lt;li&gt;Determine which COM port the board is connected to using the Windows Device Manager &lt;/li&gt;
&lt;li&gt;Open Putty and connect to the board at 115200 baud&lt;/li&gt;
&lt;li&gt;Run commands at the prompt to turn the builtin LED on the Adafruit Feather Huzzah ESP8266 on and off&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1. Connect the Adafruit Feather Huzzah ESP8266 board to the laptop&lt;/h3&gt;
&lt;p&gt;Use a microUSB cable to connect the Feather Huzzah to the computer. Make sure that the microUSB cable is a full USB data cable and not just a simple power cable. The first cable I tried was just a charging mobile phones and I couldn't figure out why Putty wasn't working. Switching out the cable was all it took to get it to work. &lt;/p&gt;
&lt;h3&gt;2. Determine which serial port the Feather Huzzah is connected to&lt;/h3&gt;
&lt;p&gt;Use Windows Device Manager to determine which serial port the Feather Huzzah is connected to. On my Windows 10 laptop, it usually comes up as &lt;code&gt;COM4&lt;/code&gt;. You can find the serial port by looking in the Ports (COM &amp;amp; LPT) category of the Windows Device Manager. Look for something like &lt;strong&gt;Silicon Labs CP210x USB to UART Bridge (COM4)&lt;/strong&gt; in the &lt;strong&gt;Ports (COM &amp;amp; LPT)&lt;/strong&gt; menu. It is the &lt;strong&gt;COM#&lt;/strong&gt; that you are looking for.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Find Device Manager" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/find_device_manager.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Device Manager Menu" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/device_manager_menu.png"&gt;&lt;/p&gt;
&lt;h3&gt;3. Use Putty to connect to the Feather Huzzah&lt;/h3&gt;
&lt;p&gt;Ensure the Feather Huzzah board is connected with a USB cable, then connect to it with Putty using the proper serial port (COM#) and 115200 baud. Remember to use the &lt;strong&gt;Serial&lt;/strong&gt; radio button under &lt;strong&gt;Connection Type:&lt;/strong&gt; to select serial communication or you will be trying to communicate with the Feather Huzzah over SSH which won't work. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in start menu" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/putty_in_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty config" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/putty_config.PNG"&gt;&lt;/p&gt;
&lt;p&gt;This should bring up the Micropython REPL prompt &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. If you can't see the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt, try typing [Enter], Ctrl-D, pushing the RESET button on the Feather Huzzah or unplugging then replugging the USB cable.&lt;/p&gt;
&lt;p&gt;&lt;img alt="REPL prompt" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/REPL_prompt.PNG"&gt;&lt;/p&gt;
&lt;h3&gt;4. Run commands at the prompt to turn the built-in LED on the Adafruit Feather Huzzah ESP8266 on and off&lt;/h3&gt;
&lt;p&gt;At the micropython REPL (the Micropython command promt &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) try the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;Micropython for Engineers!&amp;#39;)
Micropython for Engineers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we import the &lt;code&gt;sys&lt;/code&gt; module, we can see the Micropython implementation and platform. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;micropython&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;esp8266&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="REPL prompt" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/sys_dot_implementation_and_platform.PNG"&gt;&lt;/p&gt;
&lt;p&gt;If you see similar output, that means Micropython is working on the Feather Huzzah. We can also view the flash memory size of our Feather Huzzah and the size of the Micropyton firmware we installed. Try this at the Micropython prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;port_diag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="REPL prompt" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/import_port_diag.PNG"&gt;&lt;/p&gt;
&lt;p&gt;We can see the flash memory size is 4 MB. Below the label &lt;code&gt;Firmware checksum:&lt;/code&gt; we can see a line for &lt;code&gt;size: 600872&lt;/code&gt;. This means the size of our Micropythpon installation is about 600 KB or 0.6 MB. Just over half a megabyte and we are running a working version of Python!&lt;/p&gt;
&lt;p&gt;Now let's turn the Feather Huzzah's built-in LED on and off. The Feather Huzzah has a built-in red LED connected to Pin 0. We can access this LED with Micropython's &lt;code&gt;machine&lt;/code&gt; module. First we use the &lt;code&gt;machine&lt;/code&gt; module to create a &lt;code&gt;Pin&lt;/code&gt; object. The first argument when we instantiate the &lt;code&gt;Pin&lt;/code&gt; object is the pin number on the board (in this case &lt;code&gt;0&lt;/code&gt;). Pin zero on the Feather Huzzah is connected to the built-in red LED. The second argument is the pin type. We want Pin 0 to act as an ouput pin (&lt;code&gt;machine.Pin.OUT&lt;/code&gt;). We are going to assign our &lt;code&gt;pin&lt;/code&gt; the attribute &lt;code&gt;.on()&lt;/code&gt; or &lt;code&gt;.off()&lt;/code&gt;. This will cause the Feather board to output a positive voltage or no voltage to Pin 0 to turn the built-in red LED on and off. You can also connect Pin 0 to an LED through a resistor (then to ground) and have this LED turn on and off.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;machine&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that Pin 0 on the Adafruit Feather Huzzah is kind of wired "backwards". We call &lt;code&gt;pin.off()&lt;/code&gt; and the built-in LED turns &lt;strong&gt;on&lt;/strong&gt; and call &lt;code&gt;pin.on()&lt;/code&gt; and the built-in LED turns &lt;strong&gt;off&lt;/strong&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; pin.on()
&amp;gt;&amp;gt;&amp;gt; pin.off()
&amp;gt;&amp;gt;&amp;gt; pin.on()
&amp;gt;&amp;gt;&amp;gt; pin.off()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's see if we can make the LED blink. We'll do this with a simple &lt;code&gt;for&lt;/code&gt; loop. At the micropython REPL, initiating a loop will automatically indent the next line, so a tab is not needed before the &lt;code&gt;pin.on()&lt;/code&gt; statement. To run the loop, we type backspace on an empty line (to backspace from an indented line) and hit return.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will blink the LED on and off for a total of 20 seconds.&lt;/p&gt;
&lt;h2&gt;Next steps:&lt;/h2&gt;
&lt;p&gt;In the next post, we'll connect to a I2C temperature sensor to the Adafruit Feather Huzzah and use Micropython to read the temperature.&lt;/p&gt;</content><category term="python"></category><category term="micropython"></category><category term="esp8266"></category><category term="REPL"></category></entry><entry><title>Installing Micropython on an Adadfruit Feather Huzzah ESP8266</title><link href="https://professorkazarinoff.github.io/staticsite/micropython-install.html" rel="alternate"></link><published>2018-03-01T14:20:00-08:00</published><updated>2018-03-01T14:20:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-03-01:/staticsite/micropython-install.html</id><summary type="html">&lt;p&gt;This is the second part of a multipart series on Micropython. Micropython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this post, we will install Micropython on an Adafruit Feather Huzzah ESP8266 board using Python and a package called esptool. In subsequent posts â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part of a multipart series on Micropython. Micropython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this post, we will install Micropython on an Adafruit Feather Huzzah ESP8266 board using Python and a package called esptool. In subsequent posts we will build our Feather Huzzah microcontroller into a WiFi-enabled weather station. The posts in this series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/what-is-micropython.html"&gt;What is Micropython?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Installing Micropython on an Adafruit Feather Huzzah ESP8266 (This post)&lt;/li&gt;
&lt;li&gt;Blink an LED on an Adafruit Feather Huzzah ESP8266 using Micropython&lt;/li&gt;
&lt;li&gt;Read the temperature from a MCP9808 breakout board using Micropyton&lt;/li&gt;
&lt;li&gt;Use Micropython to connect an Adafruit Feather Huzzah to a WiFi network&lt;/li&gt;
&lt;li&gt;Upload Micropython code to turn an Adafruit Feather Huzzah into a WiFi-enabled IoT weather station&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;pandas&lt;/strong&gt; and &lt;strong&gt;matplotlib&lt;/strong&gt; to plot the weather data from a WiFi-enabled IoT weather station.&lt;/li&gt;
&lt;li&gt;Upload MicroPython to a cheap $3 ESP-01 module&lt;/li&gt;
&lt;li&gt;Build custom firmware to turn the $3 ESP-01 into an low-cost WiFi enabled IoT switch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To install Micropython on a microcontroller, like the Adafruit Feather Huzzah ESP8266, we need the following hardware:&lt;/p&gt;
&lt;table class="table table-striped table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hardware&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows 10 Laptop&lt;/td&gt;
&lt;td&gt;Used to download Micropython and install Micropython on the microcontroller&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adafruit Feather Huzzah ESP8266&lt;/td&gt;
&lt;td&gt;Microcontroller that will run Microphythonn&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;microUSB Cable&lt;/td&gt;
&lt;td&gt;Used to connect the laptop to the microcontroller&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To install Micropython we will use the following software and tools:&lt;/p&gt;
&lt;table class="table table-striped table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Software&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows 10&lt;/td&gt;
&lt;td&gt;Download Micropython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anaconda distribution of Python&lt;/td&gt;
&lt;td&gt;Run the esptool that installs Micropython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anaconda Prompt&lt;/td&gt;
&lt;td&gt;Install the esptool package using pip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;esptool&lt;/td&gt;
&lt;td&gt;a pip installable package used to install Micropython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;firmware .bin file&lt;/td&gt;
&lt;td&gt;the version of Micropython will run on the Feather Huzzah board&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Summary of Steps:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install the &lt;a href="https://www.anaconda.com/download/"&gt;Anaconda distribution&lt;/a&gt; of Python&lt;/li&gt;
&lt;li&gt;Create a new conda environment and &lt;code&gt;pip install esptool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download the &lt;a href="http://micropython.org/download#esp8266"&gt;latest Micropython .bin firmware file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install the &lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"&gt;SiLabs driver&lt;/a&gt; for the Adafruit Feather Huzzah ESP8266&lt;/li&gt;
&lt;li&gt;Connect the Adafruit Feather Huzzah ESP8266 board to the laptop using a microUSB cable&lt;/li&gt;
&lt;li&gt;Determine which serial port the Feather Huzzah is connected to&lt;/li&gt;
&lt;li&gt;Run the esptool to upload the .bin firmware file to the Feather Huzzah&lt;/li&gt;
&lt;li&gt;Download and install &lt;a href="https://www.putty.org/"&gt;Putty&lt;/a&gt;, a serial monitor&lt;/li&gt;
&lt;li&gt;Use Putty to connect to the Feather Huzzah and run commands in the Micropython REPL&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1. Install the Anaconda distribution of Python&lt;/h3&gt;
&lt;p&gt;If you don't have Anaconda installed already, go to &lt;a href="https://www.anaconda.com/download/"&gt;Anaconda.com/download&lt;/a&gt; and install the latest version. The Anaconda distribution of Python is the Python distribution I recommend for undergraduate engineers. You want to download and install the Python 3.6 Version (the Python 2.7 Version is legacy Python). Most laptops and desktops run a 64-bit version of Windows 10. If in doubt, you can check your Windows installation, or just go with the 64-bit version. &lt;/p&gt;
&lt;h3&gt;2. Create a new conda environment and install esptool.py&lt;/h3&gt;
&lt;p&gt;It's best practice when using Python to work in virtual environments. We'll create a new virtual environment with conda to use with our Micropython projects. Open the Anaconda prompt and create a new virtual environment named &lt;code&gt;micropython&lt;/code&gt;. Activate the environment with the &lt;code&gt;conda activate&lt;/code&gt; command. After activating the virtual environment you should see &lt;code&gt;(micropython)&lt;/code&gt; before the Anaconda Prompt.  Once inside the virtual environment, use &lt;code&gt;pip&lt;/code&gt; to install &lt;code&gt;esptool&lt;/code&gt;. The &lt;code&gt;esptool&lt;/code&gt; will be used to upload the Micropython .bin firmware file onto the Adafruit Feather Huzzah board. Confirm that &lt;code&gt;esptool&lt;/code&gt; is installed in the &lt;code&gt;(micropython)&lt;/code&gt; virtual environment with &lt;code&gt;conda list&lt;/code&gt;. I also created a new directory in the &lt;strong&gt;Documents&lt;/strong&gt; folder called &lt;strong&gt;micropython&lt;/strong&gt; to store all the project files. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create -n micropython python=3.6
conda activate micropython
(micropython) pip install esptool
(micropython) conda list
(micropython) cd Documents
(micropython) mkdir micropthon
(micropython) cd micropython
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Download the latest micropython firmware .bin file&lt;/h3&gt;
&lt;p&gt;Go to github and &lt;a href="https://micropython.org/download#esp8266"&gt;download the latest .bin firmware&lt;/a&gt; file. Move the .bin firmware file to a new &lt;strong&gt;micropython&lt;/strong&gt; directory. The .bin firmware file is the version of Micropython that will run on the Adafruit Feather Huzzah ESP8266. Straight from Adafruit, the little microcontroller does not have Micropyton installed, so we need to install Micropython ourselves. After installing the Micropython .bin firmware file onto the board, we will be able to bring up the Micropython REPL prompt, type commands into the Micropython REPL and run Micropython .py scripts on the board.&lt;/p&gt;
&lt;p&gt;&lt;img alt=".bin firmware on github" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/firmware_download_page.PNG"&gt;&lt;/p&gt;
&lt;h3&gt;4. Install the SiLabs driver for the Adafruit Feather Huzzah ESP8266&lt;/h3&gt;
&lt;p&gt;Before we can connect the Adafruit Feather Huzzah to the computer, we need a specific driver installed. For my Windows 10 laptop to see the Adafruit Feather Huzzah board, the &lt;a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers"&gt;CP210x USB to UART Bridge VCP driver&lt;/a&gt; needs to be downloaded from SiLabs and installed. This is quick and easy, but does require admin privileges.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SiLabs Driver" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/download_silabs_driver.PNG"&gt;&lt;/p&gt;
&lt;h3&gt;5. Connect the Adafruit Feather Huzzah ESP8266 board to the laptop&lt;/h3&gt;
&lt;p&gt;Use a microUSB cable (the same kind of cable that charges many mobile phones) to connect the Feather Huzzah to the computer. Make sure that the microUSB cable is a full USB &lt;strong&gt;data cable&lt;/strong&gt; and not just a simple power cable. I had trouble getting the Feather Huzzah to work, and it turned out the reason was the micoUSB cable was only a charging cable and could not transfer data. &lt;/p&gt;
&lt;h3&gt;6. Determine which serial port the Feather Huzzah is connected to&lt;/h3&gt;
&lt;p&gt;Use Windows Device Manager to determine which serial port the Feather Huzzah board is connected to. We will need the serial port as one of the parameters when we upload the .bin firmware file on the board. Look for something like &lt;strong&gt;Silicon Labs CP210x USB to UART Bridge (COM4)&lt;/strong&gt; in the &lt;strong&gt;Ports (COM &amp;amp; LPT)&lt;/strong&gt; menu. The USB to UART bridge is actually the Feather Huzzah board. CP210x refers to the chip that handles serial communication on the Feather Huzzah, not the esp8266 chip itself. Make note of the number after &lt;strong&gt;(COM )&lt;/strong&gt;. It often comes up as &lt;strong&gt;(COM4)&lt;/strong&gt; but it may be different on your computer. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Find Device Manager" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/find_device_manager.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Device Manager Menu" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/device_manager_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;The first time I plugged the board into my laptop, Windows could't see the board. I looked through the Device Manager under the Ports menu and the Feather board just didn't show up. Turns out the first USB cable I used was just a charging only cable. When I switched this out for a microUSB data cable, the board came right up under &lt;strong&gt;Ports (COM &amp;amp; LPT)&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;6. Run esptool to upload the .bin file to the Feather Huzzah&lt;/h3&gt;
&lt;p&gt;Open the Anaconda Prompt and &lt;code&gt;cd&lt;/code&gt; into the &lt;strong&gt;micropython&lt;/strong&gt; directory with the .bin file. You can use the &lt;code&gt;dir&lt;/code&gt; command to see the directory contents. Make sure the .bin firmware file is in the directory. It will be called something like &lt;code&gt;esp8266-20171101-v1.9.3.bin&lt;/code&gt;. Activate the micropython environment with &lt;code&gt;conda activate micropython&lt;/code&gt;. Run &lt;code&gt;esptool --help&lt;/code&gt; to ensure esptool is installed properly. Note there is no &lt;strong&gt;.py&lt;/strong&gt; extension after &lt;code&gt;esptool&lt;/code&gt;. On my Windows laptop, the command &lt;code&gt;esptool&lt;/code&gt; worked, but the command &lt;code&gt;esptool.py&lt;/code&gt; did not (this is different than the commands shown on the &lt;a href="https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html#deploying-the-firmware"&gt;Micropython docs&lt;/a&gt;). If you try to run esptool and you are not in the &lt;code&gt;(micropython)&lt;/code&gt; virtual environment, you will get an error. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd Documents
cd micropython
pwd
Documents/micropython
dir
conda activate micropython
(micropython) esptool --help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="esptool help" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/esptool_help.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Before we write the .bin firmware file to the board, we should first erase the flash memory on the Feather Huzzah using the &lt;code&gt;esptool erase_flash&lt;/code&gt; command. Make sure to specify the &lt;code&gt;--port&lt;/code&gt;. This is the &lt;code&gt;COM&lt;/code&gt; port you found in the Windows Device Manager.  In my case the port was &lt;code&gt;COM4&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(micropython) esptool --port COM4 erase_flash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="esptool erase flash" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/esptool_erase_flash.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Now it's time to write the .bin firmware file to the flash memory on the board using the &lt;code&gt;esptool write_flash&lt;/code&gt; command. Make sure to use the exact .bin firmware file name you see sitting in the &lt;strong&gt;micropython&lt;/strong&gt; directory. The port has to be set as the port you found in the Windows Device Manager. &lt;code&gt;---baud&lt;/code&gt; is the baud rate, or upload speed. I found that &lt;code&gt;--baud 460800&lt;/code&gt; worked, but you could also specify &lt;code&gt;--baud 115200&lt;/code&gt; which is slower. The upload time was a matter of seconds with either baud rate. The &lt;code&gt;0&lt;/code&gt; after &lt;code&gt;--flash_size=dectect&lt;/code&gt; means we want the firmware to be written at the start of the flash memory (the 0th position) on the board. Again, make sure the .bin firmware file name is correct. It is easy to mistype. Another issue I ran into was that I tried to use the command &lt;code&gt;esptool.py&lt;/code&gt; instead of &lt;code&gt;esptool&lt;/code&gt; as shown on the &lt;a href="https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html#deploying-the-firmware"&gt;Micropython docs&lt;/a&gt;. The documentation for &lt;a href="https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html#deploying-the-firmware"&gt;Micropython on the ESP8266&lt;/a&gt; specifies the command &lt;code&gt;esptool.py&lt;/code&gt; (including the &lt;strong&gt;.py&lt;/strong&gt; file extension). This did work on my Windows 10 machine. Omitting the &lt;strong&gt;.py&lt;/strong&gt; file extension, and running &lt;code&gt;esptool&lt;/code&gt; worked instead. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(micropython) esptool --port COM4 --baud 460800 write_flash --flash_size=detect 0 esp8266-20171101-v1.9.3.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="esptool write flash" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/esptool_write_flash.PNG"&gt;&lt;/p&gt;
&lt;h3&gt;7. Download and install Putty, a serial monitor&lt;/h3&gt;
&lt;p&gt;Now that Micropthon is installed on the board, we need to talk to our board over a serial connection. Windows 10 doesn't have a built-in serial monitor (like screen on OSX and Linux). So we need to download and install &lt;strong&gt;Putty&lt;/strong&gt;. Putty is a lightweight SSH and serial client for Windows. Putty will allow us to communicate with the Adafruit Feather Huzzah board. &lt;a href="https://www.putty.org/"&gt;Putty can be downloaded here&lt;/a&gt;. Putty is pretty small and the download and install should be pretty quick.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Download Putty" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/download_putty.PNG"&gt;&lt;/p&gt;
&lt;h3&gt;8. Use Putty to connect to the Feather Huzzah&lt;/h3&gt;
&lt;p&gt;Ensure the Feather board is connected to the computer with a USB cable and ensure you can see the board in the Windows Device Manager. Then use Putty to connect to the board over serial.  Make sure you specify the correct serial port in the &lt;strong&gt;Serial line&lt;/strong&gt; box and &lt;strong&gt;115200&lt;/strong&gt; baud in the Speed box. &lt;strong&gt;Micropython is set to run at 115200 baud&lt;/strong&gt;, other baud rates will lead to junk characters in the serial monitor. I had trouble finding the serial connection option in Putty. When I opened Putty, the default was an SSH connection. We can't connect to the Feather Huzzah over SSH. You need to select the &lt;strong&gt;Serial&lt;/strong&gt; radio button below the header &lt;strong&gt;Connection type:&lt;/strong&gt; near the top of the Putty window. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in start menu" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/putty_in_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty config" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/putty_config.PNG"&gt;&lt;/p&gt;
&lt;p&gt;If you see &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; the Micropython REPL (the Micropython prompt) is running and the Adafruit Feather Huzzah ESP8266 is working! This version of Python isn't running on your computer, it's Micropython running on the little microcontroller! Sometimes I had to type [Enter] or Ctrl-D to get the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; REPL prompt to show up. A few times I needed to close Putty, unplug then replug the board and try Putty again. The Feather Huzzah also has a tiny little black RESET button that can be pressed to restart the board.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="REPL Prompt" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/REPL_prompt.PNG"&gt;&lt;/p&gt;
&lt;p&gt;At the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; Micropython REPL prompt try the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Micropython for Engineers!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Micropython&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Engineers&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;esp8266&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="sys_dot_platform" src="https://professorkazarinoff.github.io/staticsite/posts/micropython/sys_dot_platform.PNG"&gt;&lt;/p&gt;
&lt;h2&gt;Next steps:&lt;/h2&gt;
&lt;p&gt;In the next post of the series, we will use the Micropython REPL running on the Adafruit Feather Huzzah to blink an LED.&lt;/p&gt;</content><category term="python"></category><category term="micropython"></category><category term="esp8266"></category><category term="microcontroller"></category><category term="REPL"></category></entry><entry><title>What is Micropython?</title><link href="https://professorkazarinoff.github.io/staticsite/what-is-micropython.html" rel="alternate"></link><published>2018-02-26T09:01:00-08:00</published><updated>2018-02-26T09:01:00-08:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-02-26:/staticsite/what-is-micropython.html</id><summary type="html">&lt;p&gt;This is the first part of a multipart series on Micropython. In this post we'll review what Micropython is, what it is used for and how it is both similar and different from "regular" Python. We'll also discuss why Micropython is relevant to undergraduate engineers.&lt;/p&gt;
&lt;h3&gt;1. What is Micropython?&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://micropython.org/"&gt;Micropython â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of a multipart series on Micropython. In this post we'll review what Micropython is, what it is used for and how it is both similar and different from "regular" Python. We'll also discuss why Micropython is relevant to undergraduate engineers.&lt;/p&gt;
&lt;h3&gt;1. What is Micropython?&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://micropython.org/"&gt;Micropython&lt;/a&gt; is a port, or version of Python designed to run on small, inexpensive, low-power microcontrollers. Examples of microcontrollers that Micropython can run on include the &lt;a href="https://store.micropython.org/"&gt;pyboard&lt;/a&gt;, the &lt;a href="https://pycom.io/development-boards"&gt;WiPy&lt;/a&gt; and ESP8266 boards like the &lt;a href="https://learn.adafruit.com/adafruit-feather-huzzah-esp8266"&gt;Adafruit Feather Huzzah&lt;/a&gt;.  Normally, Python is run on a desktop or laptop computer (also on big servers at server farms). Compared to a desktop or laptop, microcontrollers are much smaller, cheaper and less powerful.  A "regular" version of Python can't run on small, cheap microcontrollers because Python is too resouce intensive. Regular Python takes up too much hard disk space, runs on too much RAM and requires a more powerful processor than microcontrollers have. &lt;/p&gt;
&lt;p&gt;It is pretty amazing that a version of Python (Micropython) runs on these small, cheap microcontrollers like the ESP8266. To get Micropython to run at all on these small boards, Micropython only contains a subset of all the standard library modules inlcuded with "regular" Python. Some of the libraries that are included with Micropython don't have the full set of functions and classes that come with the full version of Python. This allows Micropython to be compact (around 600 kB for the ESP8266 port) and only use a small amount of RAM (down to 16k according to the &lt;a href="https://micropython.org/"&gt;Micropython main page&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;You can try using Micropython online with this neat &lt;a href="https://micropython.org/unicorn/"&gt;Micropython online emulator&lt;/a&gt;. The emulator allows you to run commands at a Micropyton Prompt and see the result on a virtual pyboard. &lt;/p&gt;
&lt;h3&gt;2. What is Micropyton used for?&lt;/h3&gt;
&lt;p&gt;Micropython is installed on small, cheap microcontrollers like the &lt;a href="https://learn.adafruit.com/adafruit-feather-huzzah-esp8266"&gt;ESP8266&lt;/a&gt;. Anthing these small microcontrollers can do, Micropython can do. This includes using the microcontroller as a remote sensor to measure things like temperature, humidity and light level. Micropython can also be used to blink LED's, control arrays of LED's, or run small displays. Micropython can control servo motors, stepper motors and solenoids. Civil Engineers could use Micropython to monitor water levels. Michanical Engineers could use Micropython to drive robots. Electrical Engineers could use micropython to measure voltage levels in embedded systems. In the later posts in this series, we will use Micropython, running on a small cheap ESP8266 board, to create a remote internet-connected weather station. The last posts in the series will use Micropyton, running on a &lt;strong&gt;really cheap&lt;/strong&gt; (around $2) ESP-01 module to turn on and off an LED from any computer connected to the internet anywhere in the world.&lt;/p&gt;
&lt;h3&gt;3. Why should undergraduate Engineers learn Mircopython?&lt;/h3&gt;
&lt;p&gt;Using Python to solve engineering problems such as calculations, statistics, modeling and visulization is really useful for undergraduate Engineers. But Python on it's own is fairly limited in controlling devices outside the computer it's running on. You don't want to leave a laptop in a remote estuary to meausure water temperature, but you could leave a little microcontroller and low-cost temperature sensor. A small robot can't carry around a heavy laptop, but a small, light, low-power board could run a simple robot. You don't want to use a laptop for every small electrical measurement or embedded system control, but a $2 WiFi module would work. &lt;/p&gt;
&lt;p&gt;In addition, learning how to use Micropython on small, cheap microcontrller can help undergraduates Engineers understand how programming works. It is a different kind of feedback and excitment seeing a motor whirl around compared to seeing a picture of a motor with the speed displayed as text. There is a different kind of wonder seeing an array of LED's light up compared to a 2-D plot on a computer screen. Plus Micropython is just fun! It's as easy to program Micropython as it is to program regular Python. The little projects you can do with Micropython running on a small, low-cost board are almost unlimited. We could send Micropython to space in a micro-satalite, or burry Micropython underground in a small borring machine, or launch Micorpython into the sky on a weather ballon.&lt;/p&gt;
&lt;h3&gt;Next steps:&lt;/h3&gt;
&lt;p&gt;In the next post, we will install Micropython on a small, cheap ESP8266 microcontroller board called the Adafruit Feather Huzzah. Once Micropython is installed on the board, we will run a couple commands at the Micropython REPL running on the board.&lt;/p&gt;</content><category term="python"></category><category term="micropython"></category><category term="esp8266"></category><category term="microcontroller"></category><category term="REPL"></category></entry></feed>