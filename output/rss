<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Python for Undergraduate Engineers</title><link>https://pythonforundergradengineers.com/</link><description></description><lastBuildDate>Thu, 20 Dec 2018 13:07:00 -0800</lastBuildDate><item><title>Using Python to control an Arduino</title><link>https://pythonforundergradengineers.com/python-arduino-LED.html</link><description>&lt;p&gt;&lt;img alt="Python Logo and Arduino" src="https://pythonforundergradengineers.com/posts/arduino/images/python_logo_and_redboard_bb.png"&gt;&lt;/p&gt;
&lt;p&gt;Python is used in many applications including data science, machine learning, and web development. Another area where we can use Python is external hardware control. What do I mean by external hardware? A piece of external hardware could be a light or a sensor. External hardware includes multimeters or spectral …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 20 Dec 2018 13:07:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-12-20:/python-arduino-LED.html</guid><category>python</category><category>arduino</category><category>serial</category><category>hardware</category><category>anaconda prompt</category></item><item><title>A List of Python Learning Resources</title><link>https://pythonforundergradengineers.com/list-of-python-learning-resources.html</link><description>&lt;p&gt;&lt;img alt="Library Computer and Bookshelf" src="https://pythonforundergradengineers.com/posts/resources/images/computer_in_library.png"&gt;&lt;/p&gt;
&lt;p&gt;This post is a short list of my recommended Python learning resources. I received an email from someone who found this blog and &lt;a href="https://github.com/ProfessorKazarinoff"&gt;my GitHub repo&lt;/a&gt; and asked about the right place to go to start learning Python. The list of resources in this post comes from the email I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 10 Dec 2018 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-12-10:/list-of-python-learning-resources.html</guid><category>python</category><category>resources</category></item><item><title>Quiver plots using Python, matplotlib and Jupyter notebooks</title><link>https://pythonforundergradengineers.com/quiver-plot-with-matplotlib-and-jupyter-notebooks.html</link><description>&lt;p&gt;&lt;img alt="3 quiver plots" src="https://pythonforundergradengineers.com/posts/matplotlib/images/3_quiver_plots.png"&gt; A quiver plot is a type of 2D plot that shows vector lines as arrows. Quiver plots are useful in electrical engineering to visualize electrical potential and valuable in mechanical engineering to show stress gradients. In this post, we will build three quiver plots using Python, matplotlib, numpy, and Jupyter notebooks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 14 Nov 2018 08:11:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-11-14:/quiver-plot-with-matplotlib-and-jupyter-notebooks.html</guid><category>python</category><category>matplotlib</category><category>engineering</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Plotting a stress-strain curve with four libraries: matplotlib, pandas, altair and bokeh</title><link>https://pythonforundergradengineers.com/stress-strain-curve-with-4-libraries.html</link><description>&lt;p&gt;&lt;img alt="four plotting library logos" src="https://pythonforundergradengineers.com/posts/matplotlib/images/four_logos.png"&gt; After watching a great webinar about plotting with different python libraries, I wanted to see what it was like to make a stress strain curve using four different modules: pandas, matplotlib, altair and bokeh (with holoviews).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 21 Oct 2018 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-10-21:/stress-strain-curve-with-4-libraries.html</guid><category>python</category><category>matplotlib</category><category>engineering</category><category>jupyter</category><category>notebook</category><category>bokeh</category><category>altair</category><category>pandas</category></item><item><title>Plotting Histograms with matplotlib and Python</title><link>https://pythonforundergradengineers.com/histogram-plots-with-matplotlib-and-python.html</link><description>&lt;p&gt;&lt;img alt="histogram" src="https://pythonforundergradengineers.com/posts/matplotlib/histogram.png"&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Histograms are a useful type of statistics plot for engineers. A histogram is a type of bar plot that shows the frequency or number of values compared to a set of value ranges. Histogram plots can be created with Python and the plotting package &lt;strong&gt;matplotlib&lt;/strong&gt;. The &lt;code&gt;plt.hist()&lt;/code&gt; function creates …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 08 Oct 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-10-08:/histogram-plots-with-matplotlib-and-python.html</guid><category>python</category><category>matplotlib</category><category>engineering</category><category>statistics</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Statistics in Python using the statistics module</title><link>https://pythonforundergradengineers.com/statistics-in-python-using-the-statistics-module.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, we'll look at a couple of statistics functions in Python. These statistics functions are part of the Python Standard Library in the &lt;strong&gt;statistics&lt;/strong&gt; module. The four functions we'll use in this post are common in statistics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mean - average value&lt;/li&gt;
&lt;li&gt;median - middle value&lt;/li&gt;
&lt;li&gt;mode - most often value&lt;/li&gt;
&lt;li&gt;standard …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 05 Oct 2018 06:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-10-05:/statistics-in-python-using-the-statistics-module.html</guid><category>python</category><category>statistics</category></item><item><title>Solving Two Equations for Two Unknowns and a Statics Problem with SymPy and Python</title><link>https://pythonforundergradengineers.com/sympy-two-equations-for-two-unknows-and-statics-problem.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;SymPy&lt;/strong&gt; &lt;a href="http://www.sympy.org"&gt;(http://www.sympy.org)&lt;/a&gt; is a Python library for &lt;strong&gt;symbolic math&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In symbolic math, symbols represent mathematical expressions. In a &lt;em&gt;numerical calculation&lt;/em&gt;, the value of &lt;code&gt;pi&lt;/code&gt; is stored as an estimate of &lt;code&gt;pi&lt;/code&gt;, a floating point number close to &lt;code&gt;3.14...&lt;/code&gt;. In a &lt;em&gt;symbolic math expression&lt;/em&gt;, the value of …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 03 Oct 2018 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-10-03:/sympy-two-equations-for-two-unknows-and-statics-problem.html</guid><category>python</category><category>sympy</category><category>symbolic math</category></item><item><title>Solving Equations and Writing Expressions with SymPy and Python</title><link>https://pythonforundergradengineers.com/sympy-expressions-and-equations.html</link><description>&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;strong&gt;SymPy&lt;/strong&gt; &lt;a href="http://www.sympy.org"&gt;(http://www.sympy.org)&lt;/a&gt; is a Python library for &lt;strong&gt;symbolic math&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In symbolic math, symbols are used to represent mathematical expressions. An example of a symbolic math expression is below:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;$$ x^{2} + y^{2} = z $$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In the expression above, we have the variables $x$, $y$ and $z$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If we …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 02 Oct 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-10-02:/sympy-expressions-and-equations.html</guid><category>python</category><category>sympy</category><category>symbolic math</category></item><item><title>Building an IoT Server with flask and Python - Part 6 - upload code to ESP8266-based WiFi weather stations</title><link>https://pythonforundergradengineers.com/flask-iot-server-upload-code-to-esp8266.html</link><description>&lt;p&gt;&lt;img alt="ESP8266 with sensor" src="https://pythonforundergradengineers.com/posts/flask/esp8266-based_wifi_weather_station.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the sixth part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post, we'll add some code to our ESP8266-based weather stations. The code we upload to the ESP8266 microcontrollers programs the WiFi weather stations to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 19 Sep 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-09-19:/flask-iot-server-upload-code-to-esp8266.html</guid><category>python</category><category>flask</category><category>IoT</category><category>sensor</category></item><item><title>Building an IoT Server with flask and Python - Part 5 Adding a Database</title><link>https://pythonforundergradengineers.com/flask-iot-server-database.html</link><description>&lt;p&gt;&lt;img alt="two temps shown" src="https://pythonforundergradengineers.com/posts/flask/updated_double_temp.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the fifth part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post, we'll add a sqlite3 database to our &lt;strong&gt;flask&lt;/strong&gt; IoT server to store all the temperature data points that come in from our ESP8266-based …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 12 Sep 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-09-12:/flask-iot-server-database.html</guid><category>python</category><category>flask</category><category>web API</category><category>IoT</category><category>sensor</category><category>esp8266</category></item><item><title>Building an IoT Server with flask and Python - Part 4 Validation and Timestamps</title><link>https://pythonforundergradengineers.com/flask-iot-server-validation-time-stamps.html</link><description>&lt;p&gt;This is the fourth part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In the last post of the series, we reviewed how to build a web API with &lt;strong&gt;flask&lt;/strong&gt; which accepts temperature measurements. In this post, we'll build …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 27 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-27:/flask-iot-server-validation-time-stamps.html</guid><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category><category>sensor</category></item><item><title>Solving a Circuit Diagram Problem with Python and SchemDraw</title><link>https://pythonforundergradengineers.com/circuit-diagram-problem-with-schemdraw.html</link><description>&lt;p&gt;In this post we will solve a circuit diagram problem using a Python package called &lt;strong&gt;SchemDraw&lt;/strong&gt; &lt;img alt="circuit diagram 7 resistors 3 loops" src="https://pythonforundergradengineers.com/posts/schemdraw/7_resistors_3_loops.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 26 Aug 2018 10:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-26:/circuit-diagram-problem-with-schemdraw.html</guid><category>python</category><category>jupyter</category><category>notebook</category><category>matplotlib</category><category>schemdraw</category><category>engineering</category></item><item><title>Building an IoT Server with flask and Python - Part 3 Web API</title><link>https://pythonforundergradengineers.com/flask-iot-server-web-API.html</link><description>&lt;p&gt;This is the third part of a series of posts about building an Internet of Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In the last post, we reviewed server and hardware setup. In this post, we'll build a web API with &lt;strong&gt;flask&lt;/strong&gt; and push temperature data to our …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 24 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-24:/flask-iot-server-web-API.html</guid><category>python</category><category>flask</category><category>webapi</category><category>IoT</category><category>sensor</category><category>micropython</category><category>microcontroller</category></item><item><title>First Live Results Running Jupyter Hub in a College Class</title><link>https://pythonforundergradengineers.com/first-live-results-running-jupyter-hub.html</link><description>&lt;p&gt;This is the eighth part of a multi-part series settting up Jupyter Hub for a college class. The Jupyter Hub Server is live and running! Students are logging in! In this quick post, I'll share my initial impressions running Jupyter Hub in the wild of a college engineering classroom.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 08 Aug 2018 10:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-08:/first-live-results-running-jupyter-hub.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Building an IoT Server with flask and Python - Part 2 Set Up</title><link>https://pythonforundergradengineers.com/flask-iot-server-setup.html</link><description>&lt;p&gt;This post is the second part of a series of posts which detail building an Internet-of-Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post, we'll describe server setup and microcontroller hardware used in the project.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#server"&gt;Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hardware"&gt;Hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-starting-place"&gt;The starting place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 05 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-05:/flask-iot-server-setup.html</guid><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category><category>sensor</category></item><item><title>Building an IoT Server with Flask and Python - Part 1 Motivation</title><link>https://pythonforundergradengineers.com/flask-iot-server-motivation.html</link><description>&lt;p&gt;This post is the first part of a series of blog posts about building an Internet-of-Things (IoT) server with &lt;strong&gt;flask&lt;/strong&gt;, Python and ESP8266 microcontrollers. In this post we'll I'll discuss the problem I'm trying to solve and the issues I have with the current solution. We'll also review what the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 04 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-04:/flask-iot-server-motivation.html</guid><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category><category>sensor</category></item><item><title>Building a single page Flask App on Digital Ocean</title><link>https://pythonforundergradengineers.com/flask-app-on-digital-ocean.html</link><description>&lt;p&gt;In this post, we'll run through how to set up a single page &lt;a href="http://flask.pocoo.org/docs/1.0/"&gt;&lt;strong&gt;flask&lt;/strong&gt;&lt;/a&gt; app that shows a temperature pulled from &lt;a href="https://thingspeak.com/"&gt;ThingSpeak.com&lt;/a&gt;. ThingSpeak has nice looking graphs, but on ThingSpeak it is actually kind of hard to see the value of an individual data point. I want to be able to see the most recent temperature point recorded by my &lt;a href="https://pythonforundergradengineers.com/micropython-upload-code.html"&gt;ESP8266 WiFi weather station project&lt;/a&gt; on a phone or tablet. By building a flask app and hosting it on Digital Ocean, I can now view the current temperature in a nice big font from anywhere.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 02 Aug 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-08-02:/flask-app-on-digital-ocean.html</guid><category>python</category><category>flask</category><category>thingspeak</category><category>mobile</category><category>IoT</category></item><item><title>Upload Micropython Code to an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com/micropython-upload-code.html</link><description>&lt;p&gt;This is the sixth part of a multi-part series on Micropython. In this post, we will upload &lt;strong&gt;&lt;em&gt;.py&lt;/em&gt;&lt;/strong&gt; files to an Adafruit Feather Huzzah ESP8266 board using Python and a Python package called &lt;strong&gt;ampy&lt;/strong&gt;. At the end of the post we will have a working WiFi weather station that will …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 27 Jul 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-07-27:/micropython-upload-code.html</guid><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>sensor</category></item><item><title>Using Micropython to connect an Adafruit Feather Huzzah ESP8266 to WiFi</title><link>https://pythonforundergradengineers.com/micropython-wifi.html</link><description>&lt;p&gt;This is the fifth part of a multipart series on Micropython. In the &lt;a href="https://pythonforundergradengineers.com/micropython-temp-sensor.html"&gt;last post&lt;/a&gt; we used the Micropython REPL (the Microcpython prompt) running on the Adafruit Feather Huzzah ESP8266 board to read the temperature off a temperature sensor. In this post, we are going to connect the Feather board to WiFi and post the temperature to ThingSpeak.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 20 Jul 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-07-20:/micropython-wifi.html</guid><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>WiFi</category></item><item><title>Add a custom login page and assignments directory for each user on a Jupyter Hub server</title><link>https://pythonforundergradengineers.com/assignments-dir-and-custom-login-page-to-jupyterhub.html</link><description>&lt;p&gt;This is the seventh part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we build a pre-spawn hook that creates an "assignments" and "notes" directory with pre-constructed assignments and notes for each &lt;strong&gt;JupyterHub&lt;/strong&gt; user. We also build a custom login pages that looks much more like our college login page and contains helpful links.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 14 Jun 2018 10:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-06-14:/assignments-dir-and-custom-login-page-to-jupyterhub.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Adding Google OAuth and system service to a Jupyter Hub server</title><link>https://pythonforundergradengineers.com/add-google-oauth-and-system-service-to-jupyterhub.html</link><description>&lt;p&gt;This is the sixth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we will set up &lt;strong&gt;jupyterhub&lt;/strong&gt; to run as a system service in the background which will allow us to work on the server and run &lt;strong&gt;jupyterhub&lt;/strong&gt; at the same time. Then we will add an authentication system so that users can log into our Jupyter Hub server using github usernames and passwords. Finally we will modify the authentication system so that users can log into our Jupyer Hub server using their google usernames and passwords. The same user name and password a student uses to access their college email.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 27 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-27:/add-google-oauth-and-system-service-to-jupyterhub.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Adding SSL and a domain name to Jupyter Hub</title><link>https://pythonforundergradengineers.com/add-ssl-and-domain-name-to-jupyterhub.html</link><description>&lt;p&gt;This is the fifth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we are going to link a domain name to our server IP address, add SSL security and configure nginx to run as a proxy in between users and &lt;strong&gt;jupyterhub&lt;/strong&gt;. Then we'll run &lt;strong&gt;jupyterhub&lt;/strong&gt; over https using the SSL security we created.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 25 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-25:/add-ssl-and-domain-name-to-jupyterhub.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Installing Jupyterhub</title><link>https://pythonforundergradengineers.com/installing-jupyter-hub.html</link><description>&lt;p&gt;This is the fourth part of a multi-part series that shows how to set up Jupyter Hub for a college class. The goal is to have a running version of Jupyter Hub that students in the class can log into when given a simple web link. In this post, we'll get to the fun stuff: installing &lt;strong&gt;jupyterhub&lt;/strong&gt; on the server, installing &lt;strong&gt;Python&lt;/strong&gt; packages and spinning up Jupyter Hub for the first time.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 24 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-24:/installing-jupyter-hub.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Creating a new Digital Ocean Droplet</title><link>https://pythonforundergradengineers.com/new-digital-ocean-droplet.html</link><description>&lt;p&gt;This is the third part of a multi-part series on how to set up Jupyter Hub for a class.  My goal is to have a running version of Jupyter Hub that students can access using a simple web link. I am primarily writing to my future self as I may need to set up Jupyter Hub again for a future class. In this post, we are going to create a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and create a non-root user with sudo privileges. Then we'll SSH into the droplet with PuTTY as the non-root user.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 20 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-20:/new-digital-ocean-droplet.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Create an SSH Key with PuTTYgen</title><link>https://pythonforundergradengineers.com/ssh-keys-with-putty.html</link><description>&lt;p&gt;This is the second part of a multi-part series on how to set up Jupyter Hub for a class. This is my first time setting up a Jupyter Hub server. I am primarily writing to my future self as I may need to set up Jupyter Hub again for another class. In this post, we are going to create an SSH key on a Windows 10 machine using PuTTYgen.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 19 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-19:/ssh-keys-with-putty.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Why Jupyter Hub?</title><link>https://pythonforundergradengineers.com/why-jupyter-hub.html</link><description>&lt;p&gt;This is the first part of a multi-part series that shows how to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for an engineering programming class. This is my first time setting up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. I am primarily writing to my future self as I may need to set up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server again for a different class in another quarter. I hope the lessons learned will also help other instructors tackle the same problem if they want to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for their own class or team.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 17 May 2018 12:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-17:/why-jupyter-hub.html</guid><category>jupyter</category><category>jupyter hub</category><category>jupyter notebooks</category><category>python</category></item><item><title>Diffusion Calculation with Python and Pint</title><link>https://pythonforundergradengineers.com/diffusion-problem-python-pint.html</link><description>&lt;p&gt;I was working on an engineering problem involving diffusion that involved a couple of different units including joules, grams, kilograms, meters, centimeters, moles, megapascals and weight percent. To make sure that I kept track of all the units and unit conversions throughout the problem, I thought I'd try using &lt;strong&gt;pint&lt;/strong&gt;, a &lt;strong&gt;Python&lt;/strong&gt; package for unit conversions.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 04 May 2018 09:30:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-04:/diffusion-problem-python-pint.html</guid><category>python</category><category>jupyter</category><category>notebook</category><category>pint</category><category>units</category><category>unit conversion</category><category>engineering</category></item><item><title>Opening a Jupyter Notebook on Windows</title><link>https://pythonforundergradengineers.com/opening-a-jupyter-notebook-on-windows.html</link><description>&lt;p&gt;In this post, we will run through how to open a &lt;strong&gt;Jupyter notebook&lt;/strong&gt; on Windows 10.  &lt;strong&gt;Jupyter notebooks&lt;/strong&gt; are one way engineers can write and execute &lt;strong&gt;Python&lt;/strong&gt; code. &lt;strong&gt;Jupyter notebooks&lt;/strong&gt; contain &lt;strong&gt;Python&lt;/strong&gt; code, the output of that code produces when it is run and markdown cells to explain what the code means. A &lt;strong&gt;Jupyter notebook&lt;/strong&gt; can be started from the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;, the Windows start menu or by using the &lt;strong&gt;Anaconda Navigator&lt;/strong&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 01 May 2018 09:20:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-05-01:/opening-a-jupyter-notebook-on-windows.html</guid><category>jupyter</category><category>python</category><category>anaconda</category><category>windows</category><category>jupyter notebook</category></item><item><title>Bar charts with error bars using Python, jupyter notebooks and matplotlib</title><link>https://pythonforundergradengineers.com/bar-plot-with-error-bars-jupyter-matplotlib.html</link><description>&lt;p&gt;Bar charts with error bars are useful in engineering to show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence. In this post, we will build a bar plot using Python, the statistics module and matplotlib. The plot will show the tensile strength of two different 3-D printer filament materials, ABS and HIPS. We will then add error bars to the plot based on the standard deviation of the data.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 27 Apr 2018 10:15:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-04-27:/bar-plot-with-error-bars-jupyter-matplotlib.html</guid><category>python</category><category>matplotlib</category><category>engineering</category><category>materials science</category><category>statistics</category><category>plotting</category><category>jupyter notebook</category></item><item><title>Using a Temperature Sensor with Micropython running on an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com/micropython-temp-sensor.html</link><description>&lt;p&gt;This is the fourth part of a multipart series on Micropython. In this last post of the series, we blinked an LED on and off using Micropython. In this post, we will connect a temperature sensor to an Adafruit Feather Huzzah and use the Micropython REPL to read the temperature …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 28 Mar 2018 08:40:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-03-28:/micropython-temp-sensor.html</guid><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>sensor</category></item><item><title>Using the Micropython REPL on an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com/micropython-REPL.html</link><description>&lt;p&gt;This is the third part of a multipart series on Micropython. In &lt;a href="https://pythonforundergradengineers.com/micropython-install.html"&gt;last post of the series&lt;/a&gt;, we installed Micropython on an Adafruit Feather Huzzah ESP8266 microcontroller using Python and a package called &lt;strong&gt;esptool&lt;/strong&gt;. In this post, we are going to write commands to the Micropython REPL (the Micropython prompt …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 12 Mar 2018 09:01:00 -0700</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-03-12:/micropython-REPL.html</guid><category>python</category><category>micropython</category><category>esp8266</category><category>REPL</category></item><item><title>Installing Micropython on an Adafruit Feather Huzzah ESP8266</title><link>https://pythonforundergradengineers.com/micropython-install.html</link><description>&lt;p&gt;This is the second part of a multipart series on Micropython. Micropython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this post, we will install Micropython on an Adafruit Feather Huzzah ESP8266 board using Python and a package called esptool. In subsequent posts …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 01 Mar 2018 14:20:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-03-01:/micropython-install.html</guid><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>REPL</category></item><item><title>What is Micropython?</title><link>https://pythonforundergradengineers.com/what-is-micropython.html</link><description>&lt;p&gt;This is the first part of a multipart series on Micropython. In this post we'll review what Micropython is, what it is used for and how it is both similar and different from "regular" Python. We'll also discuss why Micropython is relevant to undergraduate engineers.&lt;/p&gt;
&lt;h3 id="1-what-is-micropython"&gt;1. What is Micropython?&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://micropython.org/"&gt;Micropython …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 26 Feb 2018 09:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-02-26:/what-is-micropython.html</guid><category>python</category><category>micropython</category><category>esp8266</category><category>microcontroller</category><category>REPL</category></item><item><title>Plotting sine and cosine with matplotlib and Python</title><link>https://pythonforundergradengineers.com/plotting-sin-cos-with-matplotlib.html</link><description>&lt;p&gt;In this post we will create a plot using matplotlib and Python. The plot will show two trig functions, sine and cosine on the same set of axes.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 05 Feb 2018 10:30:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-02-05:/plotting-sin-cos-with-matplotlib.html</guid><category>python</category><category>jupyter</category><category>matplotlib</category><category>numpy</category><category>plots</category></item><item><title>Python Data Types</title><link>https://pythonforundergradengineers.com/python-data-types.html</link><description>&lt;p&gt;Python has many useful built in data types. Python variables can store different types of data and can be created dynamically, without first defining a data type. It's useful for engineers to understand a couple of Python's core data types in order to write well constructed code. Below we will discuss a few different data types.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 18 Jan 2018 10:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-01-18:/python-data-types.html</guid><category>python</category><category>data types</category></item><item><title>Unit conversions with Python and Pint</title><link>https://pythonforundergradengineers.com/unit-conversions-with-pint.html</link><description>&lt;p&gt;Units and unit conversions are &lt;strong&gt;BIG&lt;/strong&gt; in engineering. Engineers solve the world's problems in teams. Any problem that is solved has to have a context that it is solved in. How heavy can a rocket be and still make it off the ground? What thickness body panels should be used to keep occupants save during a crash? In engineering, a number without a unit is like a fish without water. It just flops around hopelessly without context and is useless. How can we get help using units? Programming is one way. In this post, we are going to use Python and Pint, a python package used for unit conversions, to do a couple of sample unit conversion problems.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 14 Jan 2018 10:30:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-01-14:/unit-conversions-with-pint.html</guid><category>python</category><category>jupyter</category><category>notebook</category><category>pint</category><category>units</category><category>unit conversion</category><category>engineering</category></item><item><title>Bar charts with error bars using Python and matplotlib</title><link>https://pythonforundergradengineers.com/python-matplotlib-error-bars.html</link><description>&lt;p&gt;Bar charts with error bars are useful in engineering to show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence. In this post, we will build a bar plot using Python and &lt;a href="https://matplotlib.org/index.html"&gt;matplotlib&lt;/a&gt;. The plot will show the coefficient of thermal expansion (CTE) of three different materials based on a small data set. Then we'll add error bars to this chart based on the standard deviation of the data.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sun, 07 Jan 2018 10:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2018-01-07:/python-matplotlib-error-bars.html</guid><category>python</category><category>matplotlib</category><category>engineering</category><category>materials science</category><category>statistics</category><category>plotting</category></item><item><title>Unicode characters for engineers in Python</title><link>https://pythonforundergradengineers.com/unicode-characters-in-python.html</link><description>&lt;p&gt;Unicode characters are very useful for engineers. A couple commonly used symbols in engineers include Omega and Delta. We can print these in python using unicode characters. From the Python interpreter we can type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;Omega: \u03A9&amp;#39;)
Omega: Ω
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;Delta: \u0394&amp;#39;)
Delta: Δ
&amp;gt;&amp;gt;&amp;gt; print(&amp;#39;sigma: \u03C3&amp;#39;)
sigma: σ
&amp;gt;&amp;gt;&amp;gt; print …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 29 Dec 2017 10:01:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-29:/unicode-characters-in-python.html</guid><category>python</category><category>engineering</category><category>utf-8</category></item><item><title>Python Virtual Environments in OS X, Linux and Windows 10</title><link>https://pythonforundergradengineers.com/virtualenv-in-osx-linux-windows.html</link><description>&lt;p&gt;In this post, I'll review creating virtual environments on three different operating systems: Windows 10, Linux and Mac OSX. Using virtual environments is good programming practice when using Python. A virtual environment will separate the Python interpreter and installed modules from the main Python installation.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 22 Dec 2017 14:36:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-22:/virtualenv-in-osx-linux-windows.html</guid><category>python</category><category>Windows 10</category><category>virtualenv</category><category>OSX</category><category>Linux</category><category>Ubuntu</category><category>pip</category><category>conda</category><category>anaconda</category><category>anaconda prompt</category></item><item><title>How I Build This Site - Part 7</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-7.html</link><description>&lt;p&gt;This is the seventh part of a multi-part series on how I built this site. In &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-6.html"&gt;last post&lt;/a&gt;, we added two new &lt;em&gt;pages&lt;/em&gt; to our site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page.  In this post, we are going to deploy the site to &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;. Github pages is a place on GitHub.com were documentation and static sites can be hosted.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Thu, 14 Dec 2017 12:40:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-14:/how-i-built-this-site-7.html</guid><category>python</category><category>pelican</category><category>blog</category><category>git</category><category>github</category><category>github pages</category></item><item><title>How I Build This Site - Part 6</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-6.html</link><description>&lt;p&gt;This is the sixth part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-5.html"&gt;last post&lt;/a&gt;, we put a search bar at the top right of each page and some css and javascript in order to make tables on the site look better. In this post we are going to add two new &lt;em&gt;pages&lt;/em&gt; to our static site. An &lt;strong&gt;About&lt;/strong&gt; page and a &lt;strong&gt;Book&lt;/strong&gt; page. These new pages will have menu entries at the top of our site.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 12 Dec 2017 18:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-12:/how-i-built-this-site-6.html</guid><category>python</category><category>pelican</category><category>blog</category><category>git</category><category>github</category></item><item><title>How I Build This Site - Part 5</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-5.html</link><description>&lt;p&gt;This is the fifth part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-4.html"&gt;last post&lt;/a&gt;, we installed a couple of plugins to add extra functionality to the site. These plugins enabled embedded jupyter notebooks and posts in a series. In this post we'll put a search bar at the top right of each page and add some css and javascript in order to make tables on the site look better.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Sat, 09 Dec 2017 18:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-09:/how-i-built-this-site-5.html</guid><category>python</category><category>pelican</category><category>blog</category><category>css</category><category>javascript</category></item><item><title>How I Build This Site - Part 4</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-4.html</link><description>&lt;p&gt;This is the fourth part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-3.html"&gt;last post&lt;/a&gt;, we installed the pelican-bootstrap3 theme and made our site mobile responsive. Now the site looks good on all devices.  In this post we are going to install a couple of plugins to add extra functionality to our site. These plugins will allow our site to have a series of post that are linked together, create a working search bar, add youtube videos to posts, view LaTeX math and add embedded jupyter notebooks in posts.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 08 Dec 2017 18:50:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-08:/how-i-built-this-site-4.html</guid><category>python</category><category>pelican</category><category>blog</category><category>jupyter</category></item><item><title>How I Build This Site - Part 3</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-3.html</link><description>&lt;p&gt;This is the third part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-2.html"&gt;last post&lt;/a&gt;, we used &lt;code&gt;pelican-quickstart&lt;/code&gt; to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile responsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Mon, 04 Dec 2017 14:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-12-04:/how-i-built-this-site-3.html</guid><category>python</category><category>pelican</category><category>blog</category><category>markdown</category></item><item><title>How I Build This Site - Part 2</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-2.html</link><description>&lt;p&gt;This is the second part in a multi-part series on how I built this site. In the &lt;a href="https://pythonforundergradengineers.com/how-i-built-this-site-1.html"&gt;last post&lt;/a&gt;, we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the &lt;code&gt;pelican-quickstart&lt;/code&gt; command to get the blog off the ground. We are also going to create a &lt;strong&gt;first_post.md&lt;/strong&gt; file and serve up the website locally so we can take a look at it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 28 Nov 2017 14:15:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-11-28:/how-i-built-this-site-2.html</guid><category>python</category><category>pelican</category><category>blog</category><category>markdown</category></item><item><title>How I Build This Site - Part 1</title><link>https://pythonforundergradengineers.com/how-i-built-this-site-1.html</link><description>&lt;p&gt;This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environments, Python, virtual environments, installing Python packages and set up git.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Wed, 22 Nov 2017 12:40:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-11-22:/how-i-built-this-site-1.html</guid><category>python</category><category>pelican</category><category>staticsite</category></item><item><title>Create a new virtual environment with Conda</title><link>https://pythonforundergradengineers.com/new-virtual-environment-with-conda.html</link><description>&lt;p&gt;To start a new Python project, it is best practice to create a new virtual environment. I have the &lt;strong&gt;Anaconda&lt;/strong&gt; distribution of Python installed on my Windows 10 machine at work. When you &lt;a href="https://pythonforundergradengineers.com/installing-anaconda-on-windows.html"&gt;install &lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/a&gt;, it comes with the very useful &lt;strong&gt;Anaconda Prompt&lt;/strong&gt;. Using the &lt;strong&gt;Anaconda Prompt&lt;/strong&gt; is a bit …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Fri, 17 Nov 2017 20:20:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-11-17:/new-virtual-environment-with-conda.html</guid><category>python</category><category>conda</category><category>virtualenv</category><category>anaconda</category><category>anaconda prompt</category></item><item><title>Installing Anaconda on Windows</title><link>https://pythonforundergradengineers.com/installing-anaconda-on-windows.html</link><description>&lt;p&gt;In this post, we will run through installing the &lt;a href="https://www.anaconda.com/what-is-anaconda/"&gt;Anaconda distribution&lt;/a&gt; of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter D. Kazarinoff</dc:creator><pubDate>Tue, 14 Nov 2017 09:20:00 -0800</pubDate><guid isPermaLink="false">tag:pythonforundergradengineers.com,2017-11-14:/installing-anaconda-on-windows.html</guid><category>python</category><category>anaconda</category><category>miniconda</category><category>conda</category><category>windows</category></item></channel></rss>