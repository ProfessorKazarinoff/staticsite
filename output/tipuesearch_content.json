{"pages":[{"title":"About","text":"I started this blog after teaching a course on Engineering Programming at Portland Community College (ENGR214). In the course, we used MATLAB. But this cost students $49 for a student version. As we strive to move towards open education resources, I wanted to reduce the cost for students to take the course. This lead me to Python. My goal is to help reduce student cost and investigate how Python could be used in an engineering programming course instead of MATLAB. I earned my PhD in Material Science and Engineering from the University of Washington. Currently, I work as a Professor of Engineering and Engineering Technology at Portland Community College in Portland, OR. Teaching at a community college is my dream job. I have two inquisitive daughters and a wonderful and supportive wife. Coding downstairs in the den after the kids go to bed would not be possible without the my wife's gracious support. In my garage is sitting a '76 Scout II. It barely runs, is rusty all over and smells like a cheap oil change. I hope to get it on the road this summer. I play soccer and follow the Seattle Sounders and Portland Timbers. See what I'm doing NOW","tags":"pages","url":"pages/about.html"},{"title":"Book","text":"Coming in Fall 2018 Book: Python Programming for Undergraduate Engineers This books is for undergraduate engineers learning programming. It is focused on using Python and programming to solve engineering problems. Chapter List Preface Chapter 1: Orientation Chapter 2: Engineering 101 Chapter 3: Statics Chapter 4: Circuits I Chapter 5: Strengths Chapter 6: Circuits II Chapter 7: Dynamics Chapter 8: Circuits III Chapter 9: Capstone Appendix Pre-order will be available soon","tags":"pages","url":"pages/book.html"},{"title":"Diffusion Calculation with Python and Pint","text":"I was working through a diffusion problem and thought that Python and a package for dealing with units and unit conversions called pint would be usefull. I'm using the Anaconda distribution of Python , which comes with the Anaconda Prompt already installed. For help installing Anaconda, see a previous blog post: Installing Anaconda on Windows 10 . To use the pint package, I needed to install pint using the Anaconda Prompt : > pip install pint The problem I'm working on involes the diffusion of nitrogen gas (N 2 ) into a thin plate of iron. Given: When α-iron is put in a nitrogen atmosphere, the conventration of nitrogen in the α-iron, C N is a function of the nitrogen pressure $P_{N_2}$ accoding to the relationship: $$C_{N} = 4.9 \\times 10&#94;{-6} \\sqrt{P_{N_2}} exp{\\frac{Q_n}{RT}} $$ Where: $Q_n = 37,600 \\frac{J}{mol}$ $R=8.31 \\frac{J}{mol-K}$ $T$ is the temperature in Kelvin. At 300 °C the nitrogen gas pressure on one side of an iron plate is 0.10 MPa. On the other side of the iron plate, the nitrogen gas pressure is 5.0 MPa. The iron plate is a 1.5 mm thick. Assume the pre-exponential term D 0 and the activation energy of diffusion of nitrogen in carbon, Q d are equal to the values below: $D_0 = 5 \\times 10&#94;{-7} \\frac{m&#94;2}{s}$ $Q_d = 77,000 \\frac{J}{mol} $ Find: Calculate the diffusion flux, J through the plate using Fick's First Law of Diffusion: $$ J = -D \\frac{dC}{dx} $$ Solution: We have a couple different quantities and a couple of different units to handle to solve this problem. We'll start out importing pint and creating a UnitRegistry object. We'll also need the exp (e raised to a power) and sqrt (square root) functions from the math module , part of the Python standard library. In [1]: import pint from math import exp , sqrt u = pint . UnitRegistry () Let's start with the temperature, T = 300 °C. Temperature units in °F and °C are relative units with an off-set scale . °C and °F are not multiplicative units . Non-multiplicatve units are handled by pint a little differently compared to regular multiplicative units. To create a variable including a unit of degrees C, we instantiate a Quantity object and pass in the temperature in °C along with the unit ( u.degC ). We can convert the temperature to Kelvin (K) using the .ito method. Since we want to do some mulipication, division and exponentiation with our temperature, we need to convert the temperature to a multiplicative unit. Pint has two versions of the temperature unit in Kelvin (K). There is the non-multiplicative type degK and the multiplicative type kelvin . We convert the temperature variable T to the multiplicative type kelvin by pulling out the magnitude (the number part without the degK unit) from the T variable and multiplying it by the kevlin unit from pint . In [2]: Q_ = u . Quantity T = Q_ ( 300 , u . degC ) print ( 'T = {} ' . format ( T )) T . ito ( 'degK' ) print ( 'T = {} ' . format ( T )) T = T . magnitude * u . kelvin print ( T ) T = 300 degC T = 573.15 kelvin 573.15 kelvin Next we'll create variables for $Q_n = 37,600 \\frac{J}{mol}$ and the universal gas contant $R=8.31 \\frac{J}{mol-K}$ In [3]: Qn = 37600 * u . J / u . mol R = 8.31 * u . J / ( u . mol * u . kelvin ) Our first nitrogen pressure is 0.10 MPa and our second nitrogen pressure is 5.0 MPa, we'll make variables for both: In [4]: PN1 = 0.10 PN2 = 5.0 Now we can calculate the two nitrogren concentrations in wt% using the equation: $$C_{N} = 4.9 \\times 10&#94;{-6} \\sqrt{P_{N_2}} exp{\\frac{Q_n}{RT}}$$ where $P_{N_2}$ = 0.10 for one side of the iron plate and $P_{N_2}$ = 5.0 for the other side of the iron plate In [5]: CN1 = ( 4.9e-3 ) * sqrt ( PN1 ) * exp ( - Qn / ( R * T )) print ( CN1 ) 5.777054779474043e-07 In [6]: CN2 = ( 4.9e-3 ) * sqrt ( PN2 ) * exp ( - Qn / ( R * T )) print ( CN2 ) 4.084994609852251e-06 These values CN1 and CN2 are in units of wt% N in an iron-nitrogen \"alloy\" where almost all of the alloy is iron with only a small amount of nitrogen. To use Fick's First Law of Diffusion: $$ J = -D \\frac{dC}{dx} $$ We need a concentration gradient $dC$ in units of mass per unit volume like kg/m 3 or g/cm 3 not in units of wt %. Therefore we need to convert the two concentrations of nitrogen in iron, CN1 and CN2 from units of wt% to units of kg/m 3 . To make the conversion between wt% and mass per unit volume we have to pick a sample mass of iron. This mass of iron will contain a mass of nitrogen (based on wt%). We can divide this mass of nitrogen by the volume of iron that corresponds to the mass of iron we picked. As long as we divide the mass of nitrogen by the volume of iron that contains that mass of nitrogen, we will end up with a unit conversion from wt% to kg/m 3 that works. So let's pick 1 kilogram of iron, and use the density of iron as 7.874 g/cm 3 . We set a variable p to equal the density of iron in g/cm 3 and use the .ito() method to convert the density to units of kg/m 3 . Then we divide the mass of iron that we picked (1 kg) and convert it to volume of iron using the density p . This will give use the volume of 1kg of iron in units of m 3 . In [7]: p = 7.874 * u . g / u . cm ** 3 p . ito ( u . kg / u . m ** 3 ) mFe = 1 * u . kg vFe = mFe / p Now we'll determine how many kg of nitrogen there are in 1 kg of iron given our concentrations CN1 and CN2 in wt%. Note that we have to multiply CN1 and CN2 by 0.01 because CN1 and CN2 are in units of %. When we divide the mass of nitrogen by the volume of iron, we get a concentration of nitrogen in iron in units of kg/m 3 , which is the concentration units we need to use the Fick's First Law of Diffusion. In [8]: mN1 = mFe * CN1 * 0.01 CN1 = mN1 / vFe print ( CN1 ) mN2 = mFe * CN2 * 0.01 CN2 = mN2 / vFe print ( CN2 ) 4.5488529333578606e-05 kilogram / meter ** 3 0.0003216524755797662 kilogram / meter ** 3 Back to Fick's Fist Law of Diffusion: $$ J = -D \\frac{dC}{dx} $$ The difference in concentration $dC$, is just the difference between the two concentrations CN1 and CN2 now that they are both in units of kg/m 3 . $dx$, the change in distance is the thickness of the plate, 1.5 mm. We'll convert the change in distance, $dx$ to units of meters using the ito() method. In [9]: dC = CN2 - CN1 dx = 1.5 * u . mm dx . ito ( u . m ) Next we need to find the diffusion coefficient $D$. To do this, we need the pre-exponential term $D_0$ and the activating envery of diffusion $Q_d$. From the beginning of the problem: $D_0 = 5 \\times 10&#94;{-7} \\frac{m&#94;2}{s}$ $Q_d = 77,000 \\frac{J}{mol} $ Let's assign these to variables with the applicable units. In [10]: D0 = 5e-7 * u . m ** 2 / u . s Qd = 77000 * u . J / u . mol To calculate diffusion constant $D$, we use the equation which relates diffusion coefficient, $D$ to temperature, $T$ according to: $$ D = D_0e&#94;{\\frac{-Q_d}{RT}} $$ In [11]: D = D0 * exp ( - Qd / ( R * T )) print ( D ) 4.7627851906932175e-14 meter ** 2 / second Now that we have $D$, $dC$ and $dx$, we can finally calculate diffusion flux, $J$ through the plate using Fick's First Law of Diffusion: $$ J = -D \\frac{dC}{dx} $$ In [12]: J = - D * ( dC / dx ) J Out[12]: -8.768730355898267e-15 kilogram/(meter 2 second) Final Answer: So the final answer rounded to 3 sig figs is: $J = -8.77 \\times 10&#94;{-15} \\frac{kg}{m&#94;{2}s}$","tags":"engineering","url":"diffusion-problem-python-pint.html"},{"title":"Bar charts with error bars using Python, jupyter notebooks and matplotlib","text":"Engineers collect data and make conclusions based on the results. An important way to view results is with statistical charts. In this post we will build a bar chart to compare the tensile strength of 3D-printed ABS plastic compared to the tensile strength of 3D-printed HIPS plastic. We will add error bars to the chart to show the amount of uncertainty in the data. In the bar plot we construct, the height of the bars will represent the mean or average tensile stength. One bar will represent the average strength of ABS and the other bar will show the average strength of HIPS. We will then add error bars to the plot which will represent +1/-1 standard deviation about the mean. We will use Python , the statistics module (part of the Python standard library), and matplotlib to build the bar plot. I recommend that undergraduate engineers use the Anaconda distribution of Python , which comes with matplotlib already installed. For help installing Anaconda, see a previous blog post: Installing Anaconda on Windows 10 . If matplotlib is not available in your version of Python , open a terminal or the Anaconda Prompt and type: $ pip install matplotlib or > conda install matplotlib The data we are going to plot is from the tensile testing of two different kinds of 3D-printed plastic, ABS and HIPS (HIPS stands for High Impact Polystyrene). You can download the data using the link below: 3D-printed-tensile-bar-data.xlsx I'm constructing the plot in a jupyter notebook . You could also build the code in a .py file and run the code to produce the plot. A note about using matplotlib on MacOSX: if you recieve an error message that matplotlib is not installed as a framework, consider using the Anaconda distribution of Python and running the code in a jupyter notebook . To open a new jupyter notebook go to the Anaconda Prompt or a terminal and type: > jupyter notebook Alternativly, you can start a new jupyter notebook by cliking the Windows start button and searching for [Anaconda3] --> [Jupyter Notebook] If jupyter is not installed on your system, you can install it using the Anaconda Prompt or use a terminal and pip : > conda install jupyter or $ pip install jupyter At the top of the jupyter notebook (or .py file), we need to import the required packages: statistics (part of the Python standard library, but still needs to be imported) and matplotlib From the statistics module we will import two functions: mean (average) and stdev (standard deviation). If we use this import line: from statistics import mean, stdev We can use the names mean() and stdev() in our code. However, if we use a more general import line: import statistics Then we will need to call statistics.mean() and statistics.stdev() in our code. matplotlib also needs to be imported. The typical way to do this is with the line: import matplotlib.pyplot as plt Then thoughout our code, we can use plt() instead of writing out matplotlib.pyplot() each time we want to use a matplotlib method. The %matplotlib inline magic command is added so that we can see our plot right in the jupyter notebook . If you build the plot in a .py file, the %matplotlib inline command should be left out as it will return an error. In [1]: # import packages from statistics import mean , stdev import matplotlib.pyplot as plt #include if using a jupyter notebook, remove if using a .py file % matplotlib inline Create two variables which contains the data for ABS and HIPS as a list of individual tensile strength values. After the import lines, we need to create two variables: one variable for the ABS data and one variable for HIPS data. We will assign the data points as a list of numbers saved in two variables. The general format to create a list in Python is to use list_name = [item1, item2, item3] with square brackets on the outside and commas between the items. The items for the two lists came from the .xlsx file that contains the data ( 3D-printed-tensile-bar-data.xlsx ). The tensile strength is in column [F] labeled [Tensile Strength (Mpa)]. Rows 2-17 contain data for ABS and rows 18-37 contain data for HIPS. In [2]: # data ABS = [ 18.6 , 21.6 , 22 , 21 , 18 , 20.9 , 21 , 19.3 , 18.8 , 20 , 19.4 , 16 , 23.8 , 19.3 , 19.7 , 19.5 ] HIPS = [ 10.4 , 4.9 , 10.2 , 10.5 , 10.9 , 12.9 , 11.8 , 8.4 , 10 , 10.6 , 8.6 , 9.7 , 10.8 , 10.7 , 11 , 12.4 , 13.3 , 11.4 , 14.8 , 13.5 ] Find the mean and standard deviation for each set of data We'll use the mean() and stdev() functions from the statistics module to find the mean (or average) and standard deviation of the two data sets. A summary of these two functions is below: statistics module function description mean() calculate the mean or average of a list of numubers stdev() calculate the standard deviation of a list of numbers In [3]: # find the mean using the mean() function from the statistics library ABS_mean = mean ( ABS ) HIPS_mean = mean ( HIPS ) # find the standard deviation using the stdev() function from the statistics library ABS_stdev = stdev ( ABS ) HIPS_stdev = stdev ( HIPS ) Build a simple bar plot Matplotlib's bar plot fuction can be accessed using plt.bar() . We need to include at least two arguments as shown below: plt.bar (['list', 'of' ,'bar', 'labels'], [list, of, bar, heights]) We will pass in ['ABS', 'HIPS'] for our list of bar labels, and [ABS_mean, HIPS_mean] for our list of bar heights. The command plt.show() will show the plot in a jupyter notebook or show the plot in a new window if running a .py file. In [4]: # Build a bar plot plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ]) plt . show () Add axis labels and title The plot looks pretty good, but we should add axis labels (with units) and a title to our plot. We can add the axis labels and titles with plt.xlabel() , plt.ylabel() and plt.title() . We need to pass in strings enclosed in quotes ' ' with these methods. A summary of the matplotlib functions is below: matplotlib function description plt.bar() build a bar plot plt.xlabel() x-axis label plt.ylabel() y-axis label plt.title() plot title plt.show() show the plot In [5]: # build a bar plot plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ]) plt . xlabel ( '3D-printer Fillament Material' ) plt . ylabel ( 'Tensile Strength (MPa)' ) plt . title ( 'Tensile Strength of 3-D Printed ABS and HIPS Tensile Bars' ) plt . show () Add error bars to the plot We have a nice looking bar plot with two bars, x-axis label, y-axis label and a title. Next we will add error bars to the plot. We will add the error bars by passing a keyword argument in the plt.bar() function. The keyword argument is yerr = [list, of, error, bar, lengths] . A keyword argument is a specific type of argument passed to a function or method that must have a name associated with it. Regular function arguments just need to be in the proper order. Keyword arguments need to be pass with the form keyword_argument_name = value . The general form of the entire plt.bar() line will be: plt.bar (['list', 'of' ,'bar', 'labels'], [list, of, bar, hights], yerr=[list, of, error, bar, lengths]) The first two arguments, ['list', 'of' ,'bar', 'labels'] and [list, of, bar, hights] just need to be in the correct order. The third argument, a keyword argument needs to include yerr = . Our list of error bar lengths will contain the standard deviation for each set of data, ABS_stdev and HIPS_stdev . yerr=[ABS_stdev, HIPS_stdev] In [6]: # build a bar plot plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ], yerr = [ ABS_stdev , HIPS_stdev ]) plt . xlabel ( '3D-printer Fillament Material' ) plt . ylabel ( 'Tensile Strength (MPa)' ) plt . title ( 'Tensile Strength of 3-D Printed ABS and HIPS Tensile Bars' ) plt . show () Add \"caps\" to the error bars The error bars are on the plot, but they are just vertical lines. Typically, error bars have a horizontal lines at the top and bottom and look sort of like the capital letter I. We can add these horizontal lines or \"caps\" to the top and bottom of the error bars by passing an additional keyword argument to the plt.bar() function called capsize= . We will set the capsize=10 , which is a good size for this plot. You can change the capsize= number to make the horizontal lines longer or shorter. Now our plt.bar() function call contains 4 different arguemnts: plt.bar (['list of bar labels'], [list of bar hights], yerr = [list of error bar lengths], capsize = width) A summary of the arugments passed to the plt.bar() function is below: plt.bar() Arguments description [list of bar labels] 1st argument, a list of strings which provide the labels below the bars [list of bar heights] 2nd argument, a list of numbers which determines the height of each bar yerr = [list of error bar lengths] a keyword argument, must include yerr = . Denotes the height of the error bars. Needs to be a list of numbers capsize = width a keyword argument, must include capsize = . Denotes the width of the error bar horizontal \"caps\". Needs to be a number, not a string In [7]: # build the bar plot plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ], yerr = [ ABS_stdev , HIPS_stdev ], capsize = 10 ) plt . xlabel ( '3D-printer Fillament Material' ) plt . ylabel ( 'Tensile Strength (MPa)' ) plt . title ( 'Tensile Strength of 3-D Printed ABS and HIPS Tensile Bars' ) plt . show () Save the plot The plot looks complete: two bars, x and y axis labels, title and error bars with caps. Now let's save the plot as an image file so we can import the plot into a Word document or PowerPoint presentation. If you are using a jupyter notebook , you can just right-click on the plot and select [copy image] or [Save Image As...]. To save a plot as an image programmatically, we use the line: plt.savefig('filename.extension') Matplotlib will save the plot as an image file using the file type we specify in the filename extension. For example, if we call plt.savefig('plot.png') , the plot will be saved as a .png image. If we call plt.savefig('plot.jpg') the plot will be saved as a .jpeg image. In [8]: # build a bar plot and save it as a .png image plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ], yerr = [ ABS_stdev , HIPS_stdev ], capsize = 10 ) plt . xlabel ( '3D-printer Fillament Material' ) plt . ylabel ( 'Tensile Strength (MPa)' ) plt . title ( 'Tensile Strength of 3-D Printed ABS and HIPS Tensile Bars' ) plt . savefig ( 'plot.png' ) plt . show () Increase the .png file image resolution Depending on how the .png image file is viewed: in a jupyter notebook , on the web, in a Word document or in a PowerPoint presentation, the image may look a little blurry. This is because the .png image we created has a fairly low resolution. We can change the resolution by coding: plt.savefig('filename.png', dpi = 300) Where dpi=300 specifies a resolution of 300 dots per square inch. We can specify a higher resolution or lower resoltution then 300 dpi. A higher resolution will increase the image file size, but will look better when magnified. In [9]: # build a bar plot and save it as a .png image plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ], yerr = [ ABS_stdev , HIPS_stdev ], capsize = 10 ) plt . xlabel ( '3D-printer Fillament Material' ) plt . ylabel ( 'Tensile Strength (MPa)' ) plt . title ( 'Tensile Strength of 3-D Printed ABS and HIPS Tensile Bars' ) plt . savefig ( 'plot.png' , dpi = 300 ) plt . show () The full script A summary of the full script is below: In [10]: # import packages from statistics import mean , stdev import matplotlib.pyplot as plt #include if using a jupyter notebook, remove if using a .py file % matplotlib inline # data ABS = [ 18.6 , 21.6 , 22 , 21 , 18 , 20.9 , 21 , 19.3 , 18.8 , 20 , 19.4 , 16 , 23.8 , 19.3 , 19.7 , 19.5 ] HIPS = [ 10.4 , 4.9 , 10.2 , 10.5 , 10.9 , 12.9 , 11.8 , 8.4 , 10 , 10.6 , 8.6 , 9.7 , 10.8 , 10.7 , 11 , 12.4 , 13.3 , 11.4 , 14.8 , 13.5 ] # find the mean using the mean() function from the statistics library ABS_mean = mean ( ABS ) HIPS_mean = mean ( HIPS ) # find the standard deviation using the stdev() function from the statistics library ABS_stdev = stdev ( ABS ) HIPS_stdev = stdev ( HIPS ) # build a bar plot and save it as a .png image plt . bar ([ 'ABS' , 'HIPS' ],[ ABS_mean , HIPS_mean ], yerr = [ ABS_stdev , HIPS_stdev ], capsize = 10 ) plt . xlabel ( '3D-printer Fillament Material' ) plt . ylabel ( 'Tensile Strength (MPa)' ) plt . title ( 'Tensile Strength of 3-D Printed ABS and HIPS Tensile Bars' ) plt . savefig ( 'plot.png' , dpi = 300 ) plt . show ()","tags":"matplotlib","url":"bar-plot-with-error-bars-jupyter-matplotlib.html"},{"title":"Using a Temperature Sensor with Micropython running on an Adadfruit Feather Huzzah ESP8266","text":"This is the fourth part of a multipart series on Micropython. In this last post of the series, we blinked an LED on and off using Micropython. In this post, we will connect a temperature sensor to an Adafruit Feather Huzzah and use the Micropython REPL to read the temperature. The posts in this series: What is Micropython? Installing Micropython on an Adafruit Feather Huzzah ESP8266 Blink an LED on an Adafruit Feather Huzzah ESP8266 using Micropython Read the temperature from a MCP9808 breakout board using Micropyton (this post) Use Micropython to connect an Adafruit Feather Huzzah to a WiFi network Upload Micropython code to turn an Adafruit Feather Huzzah into a WiFi-enabled IoT weather station Use pandas and matplotlib to plot the weather data from a WiFi-enabled IoT weather station. Upload MicroPython to a cheap $3 ESP-01 module Build custom firmware to turn the $3 ESP-01 into an low-cost WiFi enabled IoT switch. Before we can use the MCP9808 temperature sensor running on the Adafruit Feather Huzzah ESP8266, Micropython needs to be installed on the board and Putty needs to be installed in Windows 10 to communicate with the board over serial. See a previous post to install Micropython on your board and Putty on a Windows machine. Summary of Steps: Connect the temperature sensor to the Adafruit Feather Huzzah board Connect the Adafruit Feather Huzzah to the computer with a USB cable and bring up the Micropython REPL using Putty. Run code at the Micropython REPL to read the temperature 1. Connect the MCP9808 temperature sensor to the Adafruit Feather Huzzah board Connect the MCP9808 temperature sensor breakout board to the Feather Huzzah board with jumper wires. There are four connections: A 3V power line from the Feather Huzzah to the MCP9808 Vdd pin, GND connected between both boards, and the I2C data and clock lines. On the Feather Huzzah, the I2C data line is SDA (pin 4) and the I2C clock line is SCL (pin 5). These connect with the MPC9808 I2C data line SDA and the MPC9808 I2C clock line SCL. Unlike Serial communication where RX connects to TX, in I2C SDA connects to SDA and SCL connects to SCL. Feather Huzzah wire MCP9808 3V red Vdd GND black GND SDA green SDA SCL yellow SCL 2. Connect the Adafruit Feather Huzzah to the computer with a USB cable and bring up the Micropython REPL using Putty. Connect the Adafruit Feather Huzzah to the computer with a microUSB cable. Ensure this is a data cable, not just a charging cable. Open Putty and connect to the Feather Huzzah using the proper serial port (COM#) and 115200 baud. (Remember to use the Serial radio button under Connection Type: ) This should bring up the Micropython REPL prompt >>> . If you can't see the >>> prompt, try typing [Enter], Ctrl-D, pushing the RESET button on the Feather Huzzah. If that doesn't work, try closing putty then unplugging then replugging the USB cable. 3. Run code at the Micropython REPL to read the temperature In the Putty Serial Window, we will import the machine module and then create an instance of the machine.I2C class with the scl and sda parameters set as scl=machine.Pin(5) and sda=machine.Pin(4) . Then we create an empty bytearray which will be used to store the data coming in from the MCP9808 temperature sensor. As strings in Micropython are UTF-8 encoded by defaut, like in Python 3, a bytearray needs to be used to read the raw output from the MCP9808 chip registers. The command i2c.readfrom_mem_into() method brings in the data from the sensor and saves it to our byte_data variable. The arguments inside the method 24 and 5 correspond to the I2C memory address and registry address of the temperature data stored in the MCP9808 temperature sensor. >>> import machine >>> i2c = machine . I2C ( scl = machine . Pin ( 5 ), sda = machine . Pin ( 4 )) >>> byte_data = bytearray ( 2 ) >>> i2c . readfrom_mem_into ( 24 , 5 , byte_data ) >>> value = byte_data [ 0 ] << 8 | byte_data [ 1 ] >>> temp = ( value & 0xFFF ) / 16.0 >>> if value & 0x1000 : ... temp -= 256.0 ..... print ( temp ) Next steps: In the next post we will use Micropython to connect the Adafruit Feather Huzzah to a WiFi network.","tags":"micropython","url":"micropython-temp-sensor.html"},{"title":"Using the Micropython REPL on an Adadfruit Feather Huzzah ESP8266","text":"This is the third part of a multipart series on Micropython. In last post of the series , we installed Micropython on an Adafruit Feather Huzzah ESP8266 microcontroller using Python and a package called esptool . In this post, we are going to write commands to the Micropython REPL (the Micropython prompt) to turn on and off an LED connected to the Feather Huzzah board. The posts in this series: What is Micropython? Installing Micropython on an Adafruit Feather Huzzah ESP8266 Blink an LED on an Adafruit Feather Huzzah ESP8266 using Micropython (This post) Read the temperature from a MCP9808 breakout board using Micropyton Use Micropython to connect an Adafruit Feather Huzzah to a WiFi network Upload Micropython code to turn an Adafruit Feather Huzzah into a WiFi-enabled IoT weather station Use pandas and matplotlib to plot the weather data from a WiFi-enabled IoT weather station. Upload MicroPython to a cheap $3 ESP-01 module Build custom firmware to turn the $3 ESP-01 into an low-cost WiFi enabled IoT switch. Before you can use the Micropython REPL (the Microython prompt) running on the Adafruit Feather Huzzah ESP8266, Micropython needs to be installed on the board and Putty needs to be installed to communicate with the board over serial. See the previous post on how to install Micropython on the board and install Putty on a Windows 10 machine. Summary of Steps: Connect the Adafruit Feather Huzzah ESP8266 using a USB cable Determine which COM port the board is connected to using the Windows Device Manager Open Putty and connect to the board at 115200 baud Run commands at the prompt to turn the builtin LED on the Adafruit Feather Huzzah ESP8266 on and off 1. Connect the Adafruit Feather Huzzah ESP8266 board to the laptop Use a microUSB cable to connect the Feather Huzzah to the computer. Make sure that the microUSB cable is a full USB data cable and not just a simple power cable. The first cable I tried was just a charging mobile phones and I couldn't figure out why Putty wasn't working. Switching out the cable was all it took to get it to work. 2. Determine which serial port the Feather Huzzah is connected to Use Windows Device Manager to determine which serial port the Feather Huzzah is connected to. On my Windows 10 laptop, it usually comes up as COM4 . You can find the serial port by looking in the Ports (COM & LPT) category of the Windows Device Manager. Look for something like Silicon Labs CP210x USB to UART Bridge (COM4) in the Ports (COM & LPT) menu. It is the COM# that you are looking for. 3. Use Putty to connect to the Feather Huzzah Ensure the Feather Huzzah board is connected with a USB cable, then connect to it with Putty using the proper serial port (COM#) and 115200 baud. Remember to use the Serial radio button under Connection Type: to select serial communication or you will be trying to communicate with the Feather Huzzah over SSH which won't work. This should bring up the Micropython REPL prompt >>> . If you can't see the >>> prompt, try typing [Enter], Ctrl-D, pushing the RESET button on the Feather Huzzah or unplugging then replugging the USB cable. 4. Run commands at the prompt to turn the built-in LED on the Adafruit Feather Huzzah ESP8266 on and off At the micropython REPL (the Micropython command promt >>> ) try the following commands: >>> print('Micropython for Engineers!') Micropython for Engineers If we import the sys module, we can see the Micropython implementation and platform. >>> import sys >>> sys . implementation ( name = 'micropython' , version = ( 1 , 9 , 3 )) >>> sys . platform 'esp8266' If you see similar output, that means Micropython is working on the Feather Huzzah. We can also view the flash memory size of our Feather Huzzah and the size of the Micropyton firmware we installed. Try this at the Micropython prompt: >>> import port_diag We can see the flash memory size is 4 MB. Below the label Firmware checksum: we can see a line for size: 600872 . This means the size of our Micropythpon installation is about 600 KB or 0.6 MB. Just over half a megabyte and we are running a working version of Python! Now let's turn the Feather Huzzah's built-in LED on and off. The Feather Huzzah has a built-in red LED connected to Pin 0. We can access this LED with Micropython's machine module. First we use the machine module to create a Pin object. The first argument when we instantiate the Pin object is the pin number on the board (in this case 0 ). Pin zero on the Feather Huzzah is connected to the built-in red LED. The second argument is the pin type. We want Pin 0 to act as an ouput pin ( machine.Pin.OUT ). We are going to assign our pin the attribute .on() or .off() . This will cause the Feather board to output a positive voltage or no voltage to Pin 0 to turn the built-in red LED on and off. You can also connect Pin 0 to an LED through a resistor (then to ground) and have this LED turn on and off. >>> import machine >>> pin = machine . Pin ( 0 , machine . Pin . OUT ) Note that Pin 0 on the Adafruit Feather Huzzah is kind of wired \"backwards\". We call pin.off() and the built-in LED turns on and call pin.on() and the built-in LED turns off . >>> pin.on() >>> pin.off() >>> pin.on() >>> pin.off() Now let's see if we can make the LED blink. We'll do this with a simple for loop. At the micropython REPL, initiating a loop will automatically indent the next line, so a tab is not needed before the pin.on() statement. To run the loop, we type backspace on an empty line (to backspace from an indented line) and hit return. >>> import time >>> for i in range ( 10 ): ... pin . on () ... time . sleep ( 1 ) ... pin . off () ... time . sleep ( 1 ) ... This will blink the LED on and off for a total of 20 seconds. Next steps: In the next post, we'll connect to a I2C temperature sensor to the Adafruit Feather Huzzah and use Micropython to read the temperature.","tags":"micropython","url":"micropython-REPL.html"},{"title":"Installing Micropython on an Adadfruit Feather Huzzah ESP8266","text":"This is the second part of a multipart series on Micropython. Micropython is a port of the Python programming language that runs on small, inexpensive microcontrollers. In this post, we will install Micropython on an Adafruit Feather Huzzah ESP8266 board using Python and a package called esptool. In subsequent posts we will build our Feather Huzzah microcontroller into a WiFi-enabled weather station. The posts in this series: What is Micropython? Installing Micropython on an Adafruit Feather Huzzah ESP8266 (This post) Blink an LED on an Adafruit Feather Huzzah ESP8266 using Micropython Read the temperature from a MCP9808 breakout board using Micropyton Use Micropython to connect an Adafruit Feather Huzzah to a WiFi network Upload Micropython code to turn an Adafruit Feather Huzzah into a WiFi-enabled IoT weather station Use pandas and matplotlib to plot the weather data from a WiFi-enabled IoT weather station. Upload MicroPython to a cheap $3 ESP-01 module Build custom firmware to turn the $3 ESP-01 into an low-cost WiFi enabled IoT switch. To install Micropython on a microcontroller, like the Adafruit Feather Huzzah ESP8266, we need the following hardware: Hardware Purpose Windows 10 Laptop Used to download Micropython and install Micropython on the microcontroller Adafruit Feather Huzzah ESP8266 Microcontroller that will run Microphythonn microUSB Cable Used to connect the laptop to the microcontroller To install Micropython we will use the following software and tools: Software Purpose Windows 10 Download Micropython Anaconda distribution of Python Run the esptool that installs Micropython Anaconda Prompt Install the esptool package using pip esptool a pip installable package used to install Micropython firmware .bin file the version of Micropython will run on the Feather Huzzah board Summary of Steps: Install the Anaconda distribution of Python Create a new conda environment and pip install esptool Download the latest Micropython .bin firmware file Install the SiLabs driver for the Adafruit Feather Huzzah ESP8266 Connect the Adafruit Feather Huzzah ESP8266 board to the laptop using a microUSB cable Determine which serial port the Feather Huzzah is connected to Run the esptool to upload the .bin firmware file to the Feather Huzzah Download and install Putty , a serial monitor Use Putty to connect to the Feather Huzzah and run commands in the Micropython REPL 1. Install the Anaconda distribution of Python If you don't have Anaconda installed already, go to Anaconda.com/download and install the latest version. The Anaconda distribution of Python is the Python distribution I recommend for undergraduate engineers. You want to download and install the Python 3.6 Version (the Python 2.7 Version is legacy Python). Most laptops and desktops run a 64-bit version of Windows 10. If in doubt, you can check your Windows installation, or just go with the 64-bit version. 2. Create a new conda environment and install esptool.py It's best practice when using Python to work in virtual environments. We'll create a new virtual environment with conda to use with our Micropython projects. Open the Anaconda prompt and create a new virtual environment named micropython . Activate the environment with the conda activate command. After activating the virtual environment you should see (micropython) before the Anaconda Prompt. Once inside the virtual environment, use pip to install esptool . The esptool will be used to upload the Micropython .bin firmware file onto the Adafruit Feather Huzzah board. Confirm that esptool is installed in the (micropython) virtual environment with conda list . I also created a new directory in the Documents folder called micropython to store all the project files. conda create -n micropython python=3.6 conda activate micropython (micropython) pip install esptool (micropython) conda list (micropython) cd Documents (micropython) mkdir micropthon (micropython) cd micropython 3. Download the latest micropython firmware .bin file Go to github and download the latest .bin firmware file. Move the .bin firmware file to a new micropython directory. The .bin firmware file is the version of Micropython that will run on the Adafruit Feather Huzzah ESP8266. Straight from Adafruit, the little microcontroller does not have Micropyton installed, so we need to install Micropython ourselves. After installing the Micropython .bin firmware file onto the board, we will be able to bring up the Micropython REPL prompt, type commands into the Micropython REPL and run Micropython .py scripts on the board. 4. Install the SiLabs driver for the Adafruit Feather Huzzah ESP8266 Before we can connect the Adafruit Feather Huzzah to the computer, we need a specific driver installed. For my Windows 10 laptop to see the Adafruit Feather Huzzah board, the CP210x USB to UART Bridge VCP driver needs to be downloaded from SiLabs and installed. This is quick and easy, but does require admin privileges. 5. Connect the Adafruit Feather Huzzah ESP8266 board to the laptop Use a microUSB cable (the same kind of cable that charges many mobile phones) to connect the Feather Huzzah to the computer. Make sure that the microUSB cable is a full USB data cable and not just a simple power cable. I had trouble getting the Feather Huzzah to work, and it turned out the reason was the micoUSB cable was only a charging cable and could not transfer data. 6. Determine which serial port the Feather Huzzah is connected to Use Windows Device Manager to determine which serial port the Feather Huzzah board is connected to. We will need the serial port as one of the parameters when we upload the .bin firmware file on the board. Look for something like Silicon Labs CP210x USB to UART Bridge (COM4) in the Ports (COM & LPT) menu. The USB to UART bridge is actually the Feather Huzzah board. CP210x refers to the chip that handles serial communication on the Feather Huzzah, not the esp8266 chip itself. Make note of the number after (COM ) . It often comes up as (COM4) but it may be different on your computer. The first time I plugged the board into my laptop, Windows could't see the board. I looked through the Device Manager under the Ports menu and the Feather board just didn't show up. Turns out the first USB cable I used was just a charging only cable. When I switched this out for a microUSB data cable, the board came right up under Ports (COM & LPT) . 6. Run esptool to upload the .bin file to the Feather Huzzah Open the Anaconda Prompt and cd into the micropython directory with the .bin file. You can use the dir command to see the directory contents. Make sure the .bin firmware file is in the directory. It will be called something like esp8266-20171101-v1.9.3.bin . Activate the micropython environment with conda activate micropython . Run esptool --help to ensure esptool is installed properly. Note there is no .py extension after esptool . On my Windows laptop, the command esptool worked, but the command esptool.py did not (this is different than the commands shown on the Micropython docs ). If you try to run esptool and you are not in the (micropython) virtual environment, you will get an error. cd Documents cd micropython pwd Documents/micropython dir conda activate micropython (micropython) esptool --help Before we write the .bin firmware file to the board, we should first erase the flash memory on the Feather Huzzah using the esptool erase_flash command. Make sure to specify the --port . This is the COM port you found in the Windows Device Manager. In my case the port was COM4 . (micropython) esptool --port COM4 erase_flash Now it's time to write the .bin firmware file to the flash memory on the board using the esptool write_flash command. Make sure to use the exact .bin firmware file name you see sitting in the micropython directory. The port has to be set as the port you found in the Windows Device Manager. ---baud is the baud rate, or upload speed. I found that --baud 460800 worked, but you could also specify --baud 115200 which is slower. The upload time was a matter of seconds with either baud rate. The 0 after --flash_size=dectect means we want the firmware to be written at the start of the flash memory (the 0th position) on the board. Again, make sure the .bin firmware file name is correct. It is easy to mistype. Another issue I ran into was that I tried to use the command esptool.py instead of esptool as shown on the Micropython docs . The documentation for Micropython on the ESP8266 specifies the command esptool.py (including the .py file extension). This did work on my Windows 10 machine. Omitting the .py file extension, and running esptool worked instead. (micropython) esptool --port COM4 --baud 460800 write_flash --flash_size=detect 0 esp8266-20171101-v1.9.3.bin 7. Download and install Putty, a serial monitor Now that Micropthon is installed on the board, we need to talk to our board over a serial connection. Windows 10 doesn't have a built-in serial monitor (like screen on OSX and Linux). So we need to download and install Putty . Putty is a lightweight SSH and serial client for Windows. Putty will allow us to communicate with the Adafruit Feather Huzzah board. Putty can be downloaded here . Putty is pretty small and the download and install should be pretty quick. 8. Use Putty to connect to the Feather Huzzah Ensure the Feather board is connected to the computer with a USB cable and ensure you can see the board in the Windows Device Manager. Then use Putty to connect to the board over serial. Make sure you specify the correct serial port in the Serial line box and 115200 baud in the Speed box. Micropython is set to run at 115200 baud , other baud rates will lead to junk characters in the serial monitor. I had trouble finding the serial connection option in Putty. When I opened Putty, the default was an SSH connection. We can't connect to the Feather Huzzah over SSH. You need to select the Serial radio button below the header Connection type: near the top of the Putty window. If you see >>> the Micropython REPL (the Micropython prompt) is running and the Adafruit Feather Huzzah ESP8266 is working! This version of Python isn't running on your computer, it's Micropython running on the little microcontroller! Sometimes I had to type [Enter] or Ctrl-D to get the >>> REPL prompt to show up. A few times I needed to close Putty, unplug then replug the board and try Putty again. The Feather Huzzah also has a tiny little black RESET button that can be pressed to restart the board. At the >>> Micropython REPL prompt try the following commands: >>> print ( 'Micropython for Engineers!' ) Micropython for Engineers >>> import sys >>> sys . platform 'esp8266' Next steps: In the next post of the series, we will use the Micropython REPL running on the Adafruit Feather Huzzah to blink an LED.","tags":"micropython","url":"micropython-install.html"},{"title":"What is Micropython?","text":"This is the first part of a multipart series on Micropython. In this post we'll review what Micropython is, what it is used for and how it is both similar and different from \"regular\" Python. We'll also discuss why Micropython is relevant to undergraduate engineers. 1. What is Micropython? Micropython is a port, or version of Python designed to run on small, inexpensive, low-power microcontrollers. Examples of microcontrollers that Micropython can run on include the pyboard , the WiPy and ESP8266 boards like the Adafruit Feather Huzzah . Normally, Python is run on a desktop or laptop computer (also on big servers at server farms). Compared to a desktop or laptop, microcontrollers are much smaller, cheaper and less powerful. A \"regular\" version of Python can't run on small, cheap microcontrollers because Python is too resouce intensive. Regular Python takes up too much hard disk space, runs on too much RAM and requires a more powerful processor than microcontrollers have. It is pretty amazing that a version of Python (Micropython) runs on these small, cheap microcontrollers like the ESP8266. To get Micropython to run at all on these small boards, Micropython only contains a subset of all the standard library modules inlcuded with \"regular\" Python. Some of the libraries that are included with Micropython don't have the full set of functions and classes that come with the full version of Python. This allows Micropython to be compact (around 600 kB for the ESP8266 port) and only use a small amount of RAM (down to 16k according to the Micropython main page ) You can try using Micropython online with this neat Micropython online emulator . The emulator allows you to run commands at a Micropyton Prompt and see the result on a virtual pyboard. 2. What is Micropyton used for? Micropython is installed on small, cheap microcontrollers like the ESP8266 . Anthing these small microcontrollers can do, Micropython can do. This includes using the microcontroller as a remote sensor to measure things like temperature, humidity and light level. Micropython can also be used to blink LED's, control arrays of LED's, or run small displays. Micropython can control servo motors, stepper motors and solenoids. Civil Engineers could use Micropython to monitor water levels. Michanical Engineers could use Micropython to drive robots. Electrical Engineers could use micropython to measure voltage levels in embedded systems. In the later posts in this series, we will use Micropython, running on a small cheap ESP8266 board, to create a remote internet-connected weather station. The last posts in the series will use Micropyton, running on a really cheap (around $2) ESP-01 module to turn on and off an LED from any computer connected to the internet anywhere in the world. 3. Why should undergraduate Engineers learn Mircopython? Using Python to solve engineering problems such as calculations, statistics, modeling and visulization is really useful for undergraduate Engineers. But Python on it's own is fairly limited in controlling devices outside the computer it's running on. You don't want to leave a laptop in a remote estuary to meausure water temperature, but you could leave a little microcontroller and low-cost temperature sensor. A small robot can't carry around a heavy laptop, but a small, light, low-power board could run a simple robot. You don't want to use a laptop for every small electrical measurement or embedded system control, but a $2 WiFi module would work. In addition, learning how to use Micropython on small, cheap microcontrller can help undergraduates Engineers understand how programming works. It is a different kind of feedback and excitment seeing a motor whirl around compared to seeing a picture of a motor with the speed displayed as text. There is a different kind of wonder seeing an array of LED's light up compared to a 2-D plot on a computer screen. Plus Micropython is just fun! It's as easy to program Micropython as it is to program regular Python. The little projects you can do with Micropython running on a small, low-cost board are almost unlimited. We could send Micropython to space in a micro-satalite, or burry Micropython underground in a small borring machine, or launch Micorpython into the sky on a weather ballon. Next steps: In the next post, we will install Micropython on a small, cheap ESP8266 microcontroller board called the Adafruit Feather Huzzah. Once Micropython is installed on the board, we will run a couple commands at the Micropython REPL running on the board.","tags":"micropython","url":"what-is-micropython.html"},{"title":"Plotting sine and cosine with matplotlib and Python","text":"Plotting is an essential skill for Engineers. Plots can reveal trends in data and outliers. Plots are a way to visually communicate results with your engineering team, supervisors and customers. In this post, we are going to plot a couple of trig functions using Python and matplotlib . Matplotlib is a plotting library that can produce line plots, bar graphs, histograms and many other types of plots using Python. Matplotlib is not included in the standard library. If you downloaded Python from python.org , you will need to install matplotlib and numpy with pip on the command line. > pip install matplotlib > pip install numpy If you are using the Anaconda distribution of Python (which is the distribution of Python I recommend for undergraduate engineers) matplotlib and numpy (plus a bunch of other libraries useful for engineers) are included. If you are using Anaconda , you do not need to install any additional packages to use matplotlib . In this post, we are going to build a couple of plots which show the trig functions sine and cosine . We'll start by importing matplotlib and numpy using the standard lines import matplotlib.pyplot as plt and import numpy as np . This means we can use the short alias plt and np when we call these two libraries. You could import numpy as wonderburger and use wonderburger.sin() to call the numpy sine function, but this would look funny to other engineers. The line import numpy as np has become a common convention and will look familiar to other engineers using Python. In case you are working in a Juypiter notebook, the %matplotlib inline command is also necessary to view the plots directly in the notebook. In [1]: import matplotlib.pyplot as plt import numpy as np # if using a jupyter notebook % matplotlib inline Next we will build a set of x values from zero to 4π in increments of 0.1 radians to use in our plot. The x-values are stored in a numpy array. Numpy's arange() function has three arguments: start , stop , step . We start at zero, stop at 4π and step by 0.1 radians. Then we define a variable y as the sine of x using numpy's sin() function. In [2]: x = np . arange ( 0 , 4 * np . pi , 0.1 ) # start,stop,step y = np . sin ( x ) To create the plot, we use matplotlib's plt.plot() function. The two arguments are our numpy arrays x and y . The line plt.show() will show the finished plot. In [3]: plt . plot ( x , y ) plt . show () Next let's build a plot which shows two trig functions, sine and cosine. We will create the same two numpy arrays x and y as before, and add a third numpy array z which is the cosine of x . In [4]: x = np . arange ( 0 , 4 * np . pi , 0.1 ) # start,stop,step y = np . sin ( x ) z = np . cos ( x ) To plot both sine and cosine on the same set of axies, we need to include two pair of x,y values in our plt.plot() arguments. The first pair is x,y . This corresponds to the sine function. The second pair is x,z . This correspons to the cosine function. If you try and only add three arguments as in plt.plot(x,y,z) , your plot will not show sine and cosine on the same set of axes. In [5]: plt . plot ( x , y , x , z ) plt . show () Let's build one more plot, a plot which shows the sine and cosine of x and also includes axis labels, a title and a legend. We build the numpy arrays using the trig functions as before: In [6]: x = np . arange ( 0 , 4 * np . pi - 1 , 0.1 ) # start,stop,step y = np . sin ( x ) z = np . cos ( x ) The plt.plot() call is the same as before using two pairs of x and y values. To add axis labels we will use the following methods: matplotlib method description example plt.xlabel() x-axis label plt.xlabel('x values from 0 to 4pi') plt.ylabel() y-axis label plt.ylabel('sin(x) and cos(x)') plt.title() plot title plt.title('Plot of sin and cos from 0 to 4pi') plt.legend([ ]) legend plt.legend(['sin(x)', 'cos(x)']) Note that plt.legend() method requires a list of strings (['string1', 'string2']), where the individual strings are enclosed with qutoes, then seperated by commas and finally inclosed in brackets to make a list. The first string in the list corresponds to the first x-y pair when we called plt.plot() , the second string in the list corresponds to the second x,y pair in the plt.plot() line. In [7]: plt . plot ( x , y , x , z ) plt . xlabel ( 'x values from 0 to 4pi' ) # string must be enclosed with quotes ' ' plt . ylabel ( 'sin(x) and cos(x)' ) plt . title ( 'Plot of sin and cos from 0 to 4pi' ) plt . legend ([ 'sin(x)' , 'cos(x)' ]) # legend entries as seperate strings in a list plt . show ()","tags":"Plotting","url":"plotting-sin-cos-with-matplotlib.html"},{"title":"Python Data Types","text":"Python has many useful built in data types. Python variables can store different types of data and can be created dynamically, without first defining a data type. It's useful for engineers to understand a couple of Python's core data types in order to write well constructed code. Below we will discuss a few different data types. Integers Integers are one of the Python data types. An integer is a whole number, negative, positive or zero. In Python, integer variables can be defined by simply assigning a whole number to a variable name. We can determine data type of a variable using the type() function. >>> a = 5 >>> type ( a ) < class ' int '> >>> b = - 2 >>> type ( b ) < class ' int '> >>> z = 0 >>> type ( z ) < class ' int '> Floating Point Numbers Floating point numbers or floats are another Python data type. Floats are decimals, positive, negative and zero. Floats can also be numbers in scientific notation which contain exponents. In Python, a float can be defined using a decimal point . when a variable is assigned. >>> c = 6.2 >>> type ( c ) < class ' float '> >>> d = - 0.03 >>> type ( d ) < class ' float '> >>> e = 6.02e23 >>> e 6.02e+23 >>> type ( e ) < class ' float '> To make sure a variable is a float instead of an integer even if it is a whole number, a trailing decimal point . is used. Note the difference when a decimal point comes after the a whole number: >>> g = 5 # no decimal point >>> type ( g ) < class ' int '> >>> g = 5. # decimal point >>> type ( g ) < class ' float '> Boolean The boolean data type is either True or False. In Python, boolean variables are defined by the True and False key words. Note that True and False must have an Upper Case first letter. Using a lowercase true returns an error. a = True type ( a ) < class ' bool '> b = False type ( b ) < class ' bool '> c = true Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > NameError : name 'true' is not defined d = false Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > NameError : name 'false' is not defined String Strings are sequences of letters, numbers, spaces and symbols. In Python, strings can be almost any length and can contain spaces. String variables are assigned in Python using quotation marks ' ' . string = 'z' type ( string ) < class ' str '> string = 'Engineers' type ( string ) < class ' str '> A numbers and decimals can be defined as strings too. If a decimal number is defined using quotes ' ' , it will be saved as a string rather than as a float. This is true of whole numbers as well. Whole numbers defined using quotes will become strings just like decimal numbers defined using quotes. num = '5.2' type ( num ) < class ' str '> num = '2' type ( num ) < class ' str '> Complex numbers One final data type useful to engineers are complex numbers. A complex number is defined in Python using a real component + imaginary component j . The letter j must be used in the imaginary component. Using the letter i will return an error. Note how imaginary numbers can be added to integers and floats. comp = 4 + 2j type ( comp ) < class ' complex '> comp2 = 4 + 2 i &#94; SyntaxError : invalid syntax intgr = 3 type ( intgr ) < class ' int '> comp_sum = comp + intgr print ( comp_sum ) ( 7 + 2j ) flt = 2.1 comp_sum = comp + flt print ( comp_sum ) ( 6.1 + 2j ) Converting between different data types The number five can be an integer, or a float or a string depending on how it is assigned. Python has built in functions to convert between data types. The int() float() and str() methods will convert our 5 from one Python data type to another. int_num = 5 type ( int_num ) < class ' int '> float_num = float ( int_num ) type ( float_num ) < class ' float '> str_num = str ( int_num ) type ( str_num ) < class ' str '> str_num '5' Summary Data Type Python Class Description Examples integer int whole numbers: negative positive and zero 5 -2 0 floating point number float decimal number: negative positive and zero. Can contain an exponent 2.3 -0.05 4.5e8 boolean bool True or False True False string str sequence of letters, numbers, spaces and symbols Gabby Engineering! 5 complex number comp number with both real and imaginary components 4+2j 0-2j 6+0j","tags":"Orientation","url":"python-data-types.html"},{"title":"Unit conversions with Python and Pint","text":"Units and unit conversions are BIG in engineering. Engineers solve the world's problems in teams. Any problem solved has to have a context. How heavy can a rocket be and still make it off the ground? What thickness bodypannels keep occupants save during a crash? In engineering, a number without a unit is like a fish without water. It just flops around hopelessly without context around it is useless. How can we get help using units? Programming is one way. We are going to complete some uit conversion problmes using Python and Pint. Pint is a Python package used for unit conversions. See the ( Pint documentation ) for more examples. I recommend that undergraduate engineers use Python 3 (Python 2.7 is legacy python) and the Anaconda distribution. To use Pint , we need to install pint in our wroking version of Python. Open up the Anaconda Prompt : > pip install pint I am working on a Windows 10 machine. You can check your operating system and Python version using the code below: In [1]: import platform print ( 'Operating System: ' + platform . system () + platform . release ()) print ( 'Python Version: ' + platform . python_version ()) Operating System: Windows10 Python Version: 3.6.3 Before we can complete a unit conversion with the Pint package, we need to import the Pint module and instantiate a UnitRegistry object. The new ureg object contains all the units used in the examples below. In [2]: import pint ureg = pint . UnitRegistry () For our first problem, we will complete the following converison: Convert 252 kW to Btu/day We'll create a variable called power with units of kilowatts (kW). To create the kW unit, we'll use our ureg object. In [3]: power = 252 * ureg . kW print ( power ) 252 kilowatt To convert power to Btu/day, we use Pint's .to() method. The .to() method does not change the units of power in place. We need to assign the output of the .to() method to another variable power_in_Btu_per_day In [4]: power_in_Btu_per_day = power . to ( ureg . Btu / ureg . day ) print ( power_in_Btu_per_day ) 20636632.5971578 btu / day Another probem: Convert 722 MPa to ksi In [5]: stress = 722 * ureg . MPa In [6]: stress_in_ksi = stress . to ( ureg . ksi ) print ( stress_in_ksi ) 104.71724664121106 kip_per_square_inch Next problem: Convert 1.620 m/s 2 to ft/min 2 In [7]: accel = 1.620 * ureg . m / ( ureg . s ** 2 ) print ( accel ) 1.62 meter / second ** 2 This time we will use the .ito() method. Using .ito() will convert the units of accel in place. In [8]: accel . ito ( ureg . ft / ( ureg . min ** 2 )) print ( accel ) 19133.85826771654 foot / minute ** 2 Convert 14.31 x 10 8 kJ kg mm -3 to cal lb m / in 3 In [9]: quant = 14.31e8 * ureg . kJ * ureg . kg * ureg . mm ** ( - 3 ) print ( quant ) 1431000000.0 kilogram * kilojoule / millimeter ** 3 In [10]: quant . ito ( ureg . cal * ureg . lb / ( ureg . inch ** 3 )) print ( quant ) 1.2356155557389996e+16 calorie * pound / inch ** 3","tags":"engineering","url":"unit-conversions-with-pint.html"},{"title":"Bar charts with error bars using Python and matplotlib","text":"Bar charts with error bars are useful in engineering to show the confidence or precision in a set of measurements or calculated values. Bar charts without error bars give the illusion that a measured or calculated value is known to high precision or high confidence. In this post we will build a bar plot using Python and matplotlib. The plot will show the coefficient of thermal expansion (CTE) for three different materials based on a small data set. We will then add error bars to this chart based on the standard deviation of the data. A bar chart with error bars is shown below. Note the labels on the x-axis and the error bars at the top of each bar. In order to build this plot, we need a couple of things Asset Description Python (version 3.6) Run the program Anaconda Prompt create the virtual environment and install packages numpy calculate the mean and standard deviation matplotlib build the plot data set data to plot To get going, we'll use the Anaconda Prompt to create a new virtual environment. Select Anaconda Prompt from the windows start menu. (If using OSX or Linux, the terminal could also be used) Once you have the Anaconda Prompt open, type the following command to create a new virtual environment: conda create -n errorbars Then to activate our new virtual environment, type the following into the Anaconda Prompt conda activate errorbars Now that the errorbars virtual environment is active, you should see (errorbars) in parenthesis before the Anaconda Prompt . Next install matplotlib and numpy using conda . (pip will work to install these packages as well) You can write both packages on the same line or use two different conda install lines. conda install matplotlib numpy Make sure that our (errorbars) virtual environment has matplotlib and numpy installed: conda list Now create a new Python script called errorbars.py . At the top of the script we need to import numpy and matplotlib . #errorbars.py import numpy as np import matplotlib.pyplot as plt Next we need to read in our data. The chart below shows the measured coefficient of thermal expansion (CTE) of three metals: Aluminum, Copper and Steel. The units for coefficient of thermal expansion is per degrees C ( / °C) Coefficient of thermal expansion of three metals (units: / °C) Sample Aluminum Copper Steel 1 6.4e-5 4.5e-5 3.3e-5 2 3.01e-5 1.97e-5 1.21e-5 3 2.36e-5 1.6e-5 0.9e-5 4 3.0e-5 1.97e-5 1.2e-5 5 7.0e-5 4.0e-5 1.3e-5 6 4.5e-5 2.4e-5 1.6e-5 7 3.8e-5 1.9e-5 1.4e-5 8 4.2e-5 2.41e-5 1.58e-5 9 2.62e-5 1.85e-5 1.32e-5 10 3.6e-5 3.3e-5 2.1e-5 We'll put this data into three different numpy arrays, one array for each metal. Notice the syntax np.array([ ... ]) has a parenthesis ( followed by a square bracket [ . We are passing a Python list, [ denoted with square brackets ] into a the numpy array function (argument enclosed in parenthesis). # Enter in the raw data aluminum = np . array ([ 6.4e-5 , 3.01e-5 , 2.36e-5 , 3.0e-5 , 7.0e-5 , 4.5e-5 , 3.8e-5 , 4.2e-5 , 2.62e-5 , 3.6e-5 ]) copper = np . array ([ 4.5e-5 , 1.97e-5 , 1.6e-5 , 1.97e-5 , 4.0e-5 , 2.4e-5 , 1.9e-5 , 2.41e-5 , 1.85e-5 , 3.3e-5 ]) steel = np . array ([ 3.3e-5 , 1.2e-5 , 0.9e-5 , 1.2e-5 , 1.3e-5 , 1.6e-5 , 1.4e-5 , 1.58e-5 , 1.32e-5 , 2.1e-5 ]) Now we need to calculate the mean (or average) for each of the three materials using numpy's np.mean() function. The means will be the height of each bar in our chart. # Calculate the average Aluminum_mean = np . mean ( aluminum ) Copper_mean = np . mean ( copper ) Steel_mean = np . mean ( steel ) Next we'll calculate the standard deviation for each metal using numpy's np.std() function. On the plot, we will use the standard deviation as the height of our error bars. The positive error will be show as +1 standard deviation above the mean and the negative error will be shown as -1 standard deviation below the mean. aluminum_std = np . std ( aluminum ) copper_std = np . std ( copper ) steel_std = np . std ( steel ) There are a couple more things needed to build the plot. We need the names of the metals to go along our x-axis, one name below each bar. We'll assign names as list of strings in a variable called materials . We also need a variable that contains the means of the coefficients of thermal expansion, the data we are going to plot. We'll put these into a python list called CTEs . Our standard deviations will be used for the height of the error bars. Those will go together in a list called error . Let's code all of these list into our errorbars.py script. # Create Arrays for the plot materials = [ 'Aluminum' , 'Copper' , 'Steel' ] x_pos = np . arange ( len ( materials )) CTEs = [ aluminum_mean , copper_mean , steel_mean ] error = [ aluminum_std , copper_std , steel_std ] Now it's time to build the plot. We are going to build a bar chart with three different bars, one bar for each material: Aluminum, Copper and Steel. First we will create a figure object called fig and an axis object in that figure called ax using matplotlib's plt.subplots() function. Everything in our plot will be added to the ax (axis) object. Next we put a bar chart on our ax (axis) with the ax.bar() method. Note the arguments that go into this method: (x_pos, CTEs, yerr=error) . x_pos is the array with the count of the number of bars. CTEs is our array which contains the means or heights of the bars. yerr=error sets the heights of the error bars and the standard deviations. The subsequent arguments (align='center', alpha=0.5, ecolor='black', capsize=10) styles the plot. We'll put a label on the y-axis with the title \"Coefficient of thermal expansion (°C -1 )\" using ax.set_ylabel . We use ax.set_xticks() to feed in our number array to set the bars as numbers 1, 2, 3. Then we add labels to these numbered bars with ax.set_ticklabels() . ax.set_title() and ax.yaxis.grid(True) adds a title and horizontal grid lines. Finally, we we'll save the figure to a file called bar_plot_with_error_bars.png using matplotlib's plt.savefig() function. The plt.thight_layout() line ensures that the labels for our bars and axis don't get cut off and are visible. # Build the plot fig , ax = plt . subplots () ax . bar ( x_pos , CTEs , yerr = error , align = 'center' , alpha = 0.5 , ecolor = 'black' , capsize = 10 ) ax . set_ylabel ( 'Coefficient of Thermal Expansion ($\\degree C&#94;{-1}$)' ) ax . set_xticks ( x_pos ) ax . set_xticklabels ( materials ) ax . set_title ( 'Coefficent of Thermal Expansion (CTE) of Three Metals' ) ax . yaxis . grid ( True ) # Save the figure and show plt . tight_layout () plt . savefig ( 'bar_plot_with_error_bars.png' ) plt . show () The final plot looks like this:","tags":"matplotlib","url":"python-matplotlib-error-bars.html"},{"title":"Unicode characters for engineers in Python","text":"Unicode characters are very useful for engineers. A couple commonly used symbols in engineers include Omega and Delta. We can print these in python using unicode characters. From the Python interpreter we can type: >>> print('Omega: \\u03A9') Omega: Ω >>> print('Delta: \\u0394') Delta: Δ >>> print('sigma: \\u03C3') sigma: σ >>> print('mu: \\u03BC') mu: μ >>> print('epsilon: \\u03B5') epsilon: ε >>> print('degree: \\u00B0') degree: ° >>> print('6i\\u0302 + 4j\\u0302-2k\\u0302') 6î + 4ĵ-2k̂ All of these are unicode characters. Python has support for unicode characters built in. You can check if your system supports it by importing the sys module and calling the sys.getdefaultencoding() function >>> import sys >>> sys . getdefaulencoding () 'utf-8' If you see utf-8 , then your system supports unicode characters. To print any character in the Python interpreter, use a \\u to denote a unicode character and then follow with the character code. For instance, the code for β is 03B2, so to print β the command is print('\\u03B2') . There are a couple of special characters that will combine symbols. A useful one in engineering is the hat &#94; symbol. This is typically used to denote unit vectors. We can add a hat &#94; (also called a circumflex) by putting the unicode escape after the letter you want to add a hat to. For example to add a hat to i the command is print('i\\u0302') . Below is a list of symbols and greek letters and the corresponding unicode escape to produce the character in python. Useful unicode symbols in engineering unicode character description \\u0394 Δ GREEK CAPITAL LETTER DELTA \\u03A9 Ω GREEK CAPITAL LETTER OMEGA \\u03C0 π GREEK SMALL LETTER PI \\u03F4 ϴ GREEK CAPITAL THETA SYMBOL \\u03BB λ GREEK SMALL LETTER LAMDA \\u03B8 θ GREEK SMALL LETTER THETA \\u03B1 ° DEGREE SYMBOL i\\u0302 î i HAT j\\u0302 ĵ j HAT k\\u0302 k̂ k HAT u\\u0302 û u HAT Greek lower case letters unicode character description \\u03B1 α GREEK SMALL LETTER ALPHA \\u03B2 β GREEK SMALL LETTER BETA \\u03B3 γ GREEK SMALL LETTER GAMMA \\u03B4 δ GREEK SMALL LETTER DELTA \\u03B5 ε GREEK SMALL LETTER EPSILON \\u03B6 ζ GREEK SMALL LETTER ZETA \\u03B7 η GREEK SMALL LETTER ETA \\u03B8 θ GREEK SMALL LETTER THETA \\u03B9 ι GREEK SMALL LETTER IOTA \\u03BA κ GREEK SMALL LETTER KAPPA \\u03BB λ GREEK SMALL LETTER LAMDA \\u03BC μ GREEK SMALL LETTER MU \\u03BD ν GREEK SMALL LETTER NU \\u03BE ξ GREEK SMALL LETTER XI \\u03BF ο GREEK SMALL LETTER OMICRON \\u03C0 π GREEK SMALL LETTER PI \\u03C1 ρ GREEK SMALL LETTER RHO \\u03C2 ς GREEK SMALL LETTER FINAL SIGMA \\u03C3 σ GREEK SMALL LETTER SIGMA \\u03C4 τ GREEK SMALL LETTER TAU \\u03C5 υ GREEK SMALL LETTER UPSILON \\u03C6 φ GREEK SMALL LETTER PHI \\u03C7 χ GREEK SMALL LETTER CHI \\u03C8 ψ GREEK SMALL LETTER PSI \\u03C9 ω GREEK SMALL LETTER OMEGA Greek upper case letters unicode character description \\u0391 Α GREEK CAPITAL LETTER ALPHA \\u0392 Β GREEK CAPITAL LETTER BETA \\u0393 Γ GREEK CAPITAL LETTER GAMMA \\u0394 Δ GREEK CAPITAL LETTER DELTA \\u0395 Ε GREEK CAPITAL LETTER EPSILON \\u0396 Ζ GREEK CAPITAL LETTER ZETA \\u0397 Η GREEK CAPITAL LETTER ETA \\u0398 Θ GREEK CAPITAL LETTER THETA \\u0399 Ι GREEK CAPITAL LETTER IOTA \\u039A Κ GREEK CAPITAL LETTER KAPPA \\u039B Λ GREEK CAPITAL LETTER LAMDA \\u039C Μ GREEK CAPITAL LETTER MU \\u039D Ν GREEK CAPITAL LETTER NU \\u039E Ξ GREEK CAPITAL LETTER XI \\u039F Ο GREEK CAPITAL LETTER OMICRON \\u03A0 Π GREEK CAPITAL LETTER PI \\u03A1 Ρ GREEK CAPITAL LETTER RHO \\u03A3 Σ GREEK CAPITAL LETTER SIGMA \\u03A4 Τ GREEK CAPITAL LETTER TAU \\u03A5 Υ GREEK CAPITAL LETTER UPSILON \\u03A6 Φ GREEK CAPITAL LETTER PHI \\u03A7 Χ GREEK CAPITAL LETTER CHI \\u03A8 Ψ GREEK CAPITAL LETTER PSI \\u03A9 Ω GREEK CAPITAL LETTER OMEGA \\u03F4 ϴ GREEK CAPITAL THETA SYMBOL","tags":"python","url":"unicode-characters-in-python.html"},{"title":"Python Virtual Environments in OS X, Linux and Windows 10","text":"In this post, I'll review creating virtual environments on three different operating systems: Windows 10, Linux and Mac OSX. Using virtual environments is good programming practice when using Python. A virtual environment will separate the Python interpreter and installed modules from the main Python installation. I use three different operating systems on three different computers: Work: Windows 10 (no admin access) Home Office: Ubuntu 16.04 LTS Laptop: Mac OSX Setting up a Python virtual environment is different on each one of these operating systems. Let's see at what happens when we try and create a new virtual environment in each. Ubuntu 16.04 Linux should be the easiest to get a new virtualenv up and running. In Ubuntu 16.04, I have a terminal and admin access (can use sudo). But look what happens when I try to set up a new virtualenv without any flags or customization: $ mkvirtualenv webscrape $ source activate webscrape ( webscrape ) $ which python $ 2 .7.1 The default installation is legacy Python!? I don't want the legacy 2.7 version, I want at least Python 3.2 and would prefer Python 3.6. Let's delete that legacy Python environment. Make sure the virtual environment is deactivate d first. ( webscrape ) $ source deactivate $ rmvirtualenv webscrape Let's try to specify Python 3 with the -p python3 flag $ mkvirtualenv -p python3 webscrape $ error Now what? Path is too long? How is that possible? What happens when we see which Python version is the default python3? $ which python3 $ bin/usr/anaconda/python3 So that's the flag we need to use when the viruatlenv is created. The --python='which python3' flag will point virtualenvwrapper to the correct Python version. The new virtualenv is initiated with the full file path to our new environment ~/.virtualenvs/webscrape $ mkvirtualenv --python = 'which python3' ~/.virtualenvs/webscrape ( webscrape ) $ python Python 3 .6.2 Nice. Now we can pip install away. So what about creating a new virtual environment on a MacBook Air with OSX? Mac OSX Mac OSX has a terminal too. I get to it by going to the finder and clicking the search in the upper right or using [command] + [space] to bring up the spotlight search bar. Type terminal into the search bar. Setting up a virtualenv should be pretty easy right? $ mkvirtualenv webscrape $ source activate webscrape ( webscrape ) $ which python python 2 .7 Again!? More legacy Python?! Stop it already with the legacy Python. We want Python! Preferably 3.6. Gotta make sure that Python 3 is installed some where. rmvirtualenv that thing. ( webscrape ) $ source deactivate $ rmvirtualenv webscrape $ which python3 $ usr/bin/python $ virtualenv -p python3 webscrape $ source activate webscrape ( webscrape ) $ python python 3 .6.2 OK. Two down and one to go. Is this any easier on Windows 10? Especially with no admin access? Can't be right? Let's see. Windows 10 (no admin access) I have a Windows 10 machine at work with no admin access. I can't install any programs on my work computer that use the Windows active directory (which is most programs). The Python distribution that has worked out the best has been Anaconda . Besides coming with Python 3, and having a bunch of packages already installed, it also comes with a command line client call the Anaconda Prompt . The Anaconda Prompt operates a little like the terminal on Linux and Mac OSX, but some of the commands are a little different. To make a new virtual environment from the Anaconda Prompt type: $ conda create -n webscrape python = 3 .6 $ proceed ([ y ] /n ) ? $ conda activate webscrape ( webscrape ) $ python --version python 3 .6.3 :: Anaconda, Inc. Rockin' right? Turns out that the Windows 10 virtual environment was one of the easiest to set up. Who would have guessed that? That's one piece of magic from the Anaconda distribution. If you are using Windows, I think Anaconda is the way to go. End Note: Maybe it's best to use conda on both OSX and Linux too... You don't have to mess around with ~/.bash_profile or pointing virtualenv wrapper to the proper directory.","tags":"Orientation","url":"virtualenv-in-osx-linux-windows.html"},{"title":"How I Build This Site - Part 7","text":"This is the seventh part of a multi-part series on how I built this site. In last post , we added two new pages to our site. An About page and a Book page. In this post, we are going to deploy the site to github pages . Github pages is a place on github were documentation and static sites can be hosted. Steps in this post By the end of the post we are going to have a working static website hosted on github pages. To accomplish this, we will complete the following steps: Pull the most recent version of the site from gitub Run pelican's make html command to build the site and preview it with make serve Modify the publishconf.py file to include our github pages url and relative links Use pelican content -s publishconf.py to build a published version of the site in the output directory Add, commit and push the published contents to our master branch on github Make a gh-pages branch in our staticsite repo on github Use ghp-import output and git push origin gh-pages to push the output directory to the gh-pages branch View the freshly published site! OK, let's get started. Can't wait to see the published site live on github pages. Pull to the most recent version of the site from github Open a terminal and cd to the staticsite directory. Then activate the (staticsite) virtual environment with source activate staticsite . Once in the (staticsite) environment, pull the most recent version of the site down from github with git pull origin master . cd ~/Documents/staticsite source activate staticsite ( staticsite ) $ git pull origin master The staticsite directory should look something like this: staticsite ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── _nb_header.html ├── content ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins ├── pelican-themes ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Now we use the make html command to build a demo version of the site. This will place the static files ( html , css , javascript ) that forms the site in the output folder. We preview the site with make serve . ( staticsite ) $ make html ( staticsite ) $ make serve The demo version of our site can now be viewed by pointing a browser to: localhost:8000 Press ctr-c to stop the server. Modify the publishconf.py file to use the github pages url We need to edit the publishconf.py file to add our github pages url to SITEURL and set RELATIVE_URLS to True. The lines to change are: #publishconf.py SITEURL = 'https://username.github.io/staticsite' RELATIVE_URLS = True Make sure to set username to your github user name. Setting RELATIVE_URLS = True is necessary for the links on the site to work and for the css and javascript files run on github pages. When I initially set RELATIVE_URLS = False , the site looked terrible, had no formatting or css and none of the links worked. Setting RELATIVE_URLS = True fixed the problem. Create a published version of the site Up to this point, we used the make html command to build a demo version of the site. Now we are ready to publish the site. We publish the site by running the command: pelican content -s publishconf.py This creates a published version of the site with relative url's in the output directory. Add, commit, push to the master branch on github Before we can put the published version of the site up on github pages, we need to push the current version of the site up to the master branch. ( staticsite ) $ git add . ( staticsite ) $ git commit -m \"first published version\" ( staticsite ) $ git push origin master Create a gh-pages branch in our staticsite repo on github Up to this point, we saved our work to the master branch of the staticsite repository on github. To host the site on github pages, we need to create a new branch in the staticsite repo called gh-pages . The master branch still houses the code,settings, markup files, notebooks, images, etc. to build the site. However, in the gh-pages branch of the staticsite repo any html, css and javascript files will be served like a regular website. To create the new branch, go the main staticsite repository page on github and click the [Branch: Master] drop down menu on the upper left hand side. Enter the name of the new branch: gh-pages Use ghp-import to post the contents of the output directory to the gh-pages branch As shown in the Pelican documentation , you can use a Python package called ghp-import to help posting the contents of the output directory to the gh-pages branch of our repo on github. If ghp-import isn't installed yet, use pip . Make sure you are in the (staticsite) virtual environment when you run pip . ( staticsite ) $ pip install ghp-import Now we'll use the ghp-import package to help us post the site. The command ghp-import output will assign the contents of the output directory to the gh-pages branch of our local git repository. The we push the contents of the local gh-pages branch up to the remote gh-pages branch on github. ( staticsite ) $ ghp-import output ( staticsite ) $ git push origin gh-pages I had trouble with this set of commands. Depending on which computer I was using, I would get the following error: ! [ rejected ] gh-pages -> gh-pages ( fetch first ) error: failed to push some refs to 'https://github.com/professorkazarinoff/staticsite.git' hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: ( e.g., 'git pull ...' ) before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. I tried git stash and that didn't work. I also tried git pull origin gh-pages but this ended up putting everything from the output directory into my root staticsite directory which made a big old mess. The way I got around it was to use the -f (force) flag. I don't think this is the most elegant or preferred way to get the contents of the output directory up to the gh-pages branch. I just don't really understand how git works well enough to know how to get around the problem without a forced commit. If you get the error above try: pelican content - s publishconf . py git add . git commit - m \"published\" git push origin master ghp - import output git push - f origin gh - pages That has worked so far for me. View the site on github pages. Awesome! The site is now hosted for everyone to see on github pages! Pretty cool right? Point a browser to the github pages url and take a look: https://username.github.io/staticsite Change username to your github user name. My site (the one that you are reading) is hosted here: https://professorkazarinoff.github.io/staticsite Thanks for reading to the end! It was quite a bit of work to get the site up and running, but I am pleased with the results. Now I need to read up on git . . .","tags":"This site","url":"how-i-built-this-site-7.html"},{"title":"How I Build This Site - Part 6","text":"This is the sixth part in a multi-part series on how I built this site. In the last post , we put a search bar at the top right of each page and some css and javascript in order to make tables on the site look better. In this post we are going to add two new pages to our static site: an About page and a Book page. These new pages will have menu entries at the top of our site. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a site with two new pages and two new menu items. Activate our staticsite virtual environment Pull the most recent version of our site from github Add two new pages ( .md files) to our content folder Modify the pelicanconf.py file to use the new pages Build and preview the site with Pelican Add, commit and push the changes to github Let's get started. Activate our virtual environment and pull the most recent version of the site down from github $ cd ~/Documents/staticsite $ source activate staticsite ( staticsite ) $ git pull origin master The staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── fourth_post.md │ ├── code │ ├── sample_notebook.ipynb │ ├── extra │ ├── custom.css │ ├── custom.js ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Create two new pages ( .md files) Up to this point, the top of our site has a menu item for [This site], which isn't very useful. We are going to add two new menu items that link to two new pages . These new menu items will be [About] and [Book]. First we'll create a pages folder in the staticsite/content directory (staticsite) $ cd ~/Documents/staticsite/content (staticsite) $ mkdir pages (staticsite) $ cd pages (staticsite) $ pwd Now we create two new .md files. Note that the header in this file is different from the other posts we've written. It has a very simple header; just one line: Title. We don't need to put in a date or a slug in the header of pages , just in the header of posts . The first markdown file is the about page about.md Title : About Why I started this blog My background My family My hobbies The second page is for the book I am writing, Python Programming for Undergraduate Engineers . The text for the page is going to look something like: book.md Title : Book ### Coming in Fall 2018 Book : ** Python Programming for Undergraduate Engineers ** This books is for undergraduate engineers learning programming . It is focused on using Python and programming to solve engineering problems . ### Chapter List * Preface * Chapter 1 : Orientation * Chapter 2 : Engineering 101 * Chapter 3 : Statics * Chapter 4 : Circuits I * Chapter 5 : Strengths * Chapter 6 : Circuits II * Chapter 7 : Dynamics * Chapter 8 : Circuits III * Chapter 9 : Capstone * Appendix ### Pre - order will be available soon After the pages are saved, our staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── pages │ ├── about.md │ ├── book.md │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── fourth_post.md │ ├── code │ ├── sample_notebook.ipynb │ ├── extra │ ├── custom.css │ ├── custom.js ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Modify pelicanconf.py to include the two new pages. Pelican needs to know about the two \"pages\" files. Modify the pelicanconf.py file to include the lines: #pelicanconf.py # Paths PATH = 'content' PAGE_PATHS = ['pages'] ARTICLE_PATHS = ['posts'] # Top menus DISPLAY_CATEGORIES_ON_MENU = False DISPLAY_PAGES_ON_MENU = True Build and preview the site with Pelican With the two new page .md files created and the changes to pelicanconf.py in place, let's preview the site again. We build the site and serve up the contents in the output folder with: make html make serve To view the site, point a browser to localhost:8000 localhost:8000 Use ctrl-c to stop the server. Add and commit the changes then push them to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Commit those changes with git commit and add the -m \"added about and book pages\" flag to supply a commit message (make sure to use double quotes \"commit message\"). Push the changes up to github with git push origin master git add . git commit -m \"added about and book pages\" git push origin master In the next post we will publish the site to github pages. Once the site is published, it will be live and public. Available to any one with an internet connection. An actual, real, published, live static site!","tags":"This site","url":"how-i-built-this-site-6.html"},{"title":"How I Build This Site - Part 5","text":"This is the fifth part in a multi-part series on how I built this site. In the last post , we installed a couple of plugins to add extra functionality to the site. These plugins enabled embedded jupyter notebooks and posts in a series. In this post we'll put a search bar at the top right of each page and add some css and javascript in order to make tables on the site look better. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a site with a working search bar and nice looking tables. Activate our staticsite virtual environment Pull the most recent version of our site from github Modify the pelicanconf.py file to use the 'tipue_search' plugin Add custom css and javascript to make tables look better Build and preview the site with Pelican Add, commit and push the changes to github Let's get started. Activate our virtual environment and pull the most recent version of the site down from github $ cd ~/Documents/staticsite $ source activate staticsite ( staticsite ) $ git pull origin master The staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── code │ ├── sample_notebook.ipynb ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Add the 'tipue_search' plugin to the pelicanconf.py file Now we need to modify the pelicanconf.py file to use the 'tipue_search' plugin. This plugin will give us the ability to add a search bar to our site menu at the top right of each page. Add 'tipue_search' to the PLUGINS = [ ] list in the pelicanconf.py file. Make sure each plugin is separated with commas and surrounded by quotes . #pelicanconf.py PLUGINS = [ 'i18n_subsites', 'series', 'tag_cloud', 'liquid_tags.youtube', 'liquid_tags.notebook', 'liquid_tags.include_code', 'render_math', 'pelican-ipynb.markup', 'tipue_search' ] To use the 'tipue_search' plugin, we also need to add the following line to the pelicanconf.py file: #pelicanconf.py # for Tique Search Plugin DIRECT_TEMPLATES = ('index','tags', 'categories', 'authors', 'archives', 'search') Add some custom css and javascript to make tables look good. Even with a great theme like pelican-bootstrap3, there are some changes to make to the look of the site. One of these changes is to make tables look better, like the tables on github readme pages look. Let's make a new post in the content/posts directory. This post will contain a markdown table using the | (pipe) character and a header row with pipes separated by three dashes --- . fourth_post.md Title : Fourth Post - Part 4 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog , tables Slug : fourth - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 4 Summary : This is the fourth post of a series of posts . It will demonstrate tables . This is the fourth post of a series of posts . It will demonstrate tables . | Column Header | Column Header | | --- | ---| | Row 1 | Data 1 | | Row 2 | Data 2 | After the post is saved, our staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── fourth_post.md │ ├── code │ ├── sample_notebook.ipynb ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid To change the way that tables are rendered, we will add some custom css and javascript that is not included with the pelican-bootstrap3 theme. First create a new folder in the staticsite/content directory called extra . cd ~/Dcouments/staticsite/content mkdir extra && cd extra Inside the extra folder, create a new .css file called custom.css . Insert the following style changes in custom.css : . table { width : inherit ; max-width : 100 % ; margin-bottom : 21 px ; padding : 6 px 13 px ; } Now create a new javascript file in the content/extra directory called custom.js . This file contains extra javascript that will be injected into pages when the .html is generated by Pelican. var tables, i; tables = document.getElementsByTagName('table'); for (i=0;i<tables.length;i++) { tables[i].className = 'table table-bordered table-hover table-striped table-responsive'; } With the addition of these two new files, the contents of the staticsite directory will look something like: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md │ ├── second_post.md │ ├── third_post.md │ ├── fourth_post.md │ ├── code │ ├── sample_notebook.ipynb │ ├── extra │ ├── custom.css │ ├── custom.js ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Pelican needs to know about the two new \"custom\" files. Modify the pelicanconf.py file to include the lines: #pelicanconf.py CUSTOM_CSS = 'static/css/custom.css' CUSTOM_JS = 'static/js/custom.js' STATIC_PATHS = [ 'extra' ] EXTRA_PATH_METADATA = { 'extra/custom.css': {'path': 'static/css/custom.css'}, 'extra/custom.js': {'path': 'static/js/custom.js'} } When the site is built, Pelican will read in custom.css and custom.js siting in the extra folder. Pelican will then copy these two files in the appropriate places in the output directory (static/css/custom.css and static/css/custom.js) for the theme to use. Then the code from the css and javascript files will be used by the .html pages in the output directory along with the other css and javascript from the bootstrap3 theme. This will make tables look more like tables in github readme pages. Build and preview the site with Pelican With the search plugin configured, a new posts containing a table written, plus our custom.js and custom.css in place, let's preview the site again. We build the site and serve up the contents in the output folder with: make html make serve To view the site, point a browser to localhost:8000 localhost:8000 use ctrl-c to stop the server. Add and commit the changes then push them to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Commit those changes with git commit and add the -m \"added search and tables\" flag to supply a commit message (make sure to use double quotes \"commit message\"). Push the changes up to github with git push origin master git add . git commit -m \"added search and tables\" git push origin master In the next post we will add two new menu items across the top of our site. These new menu items will link to an [About] page and a [Book] page.","tags":"This site","url":"how-i-built-this-site-5.html"},{"title":"How I Build This Site - Part 4","text":"This is the fourth part in a multi-part series on how I built this site. In the last post , we installed the pelican-bootstrap3 theme and made our site mobile responsive. Now the site looks good on all devices. In this post we are going to install a couple of plugins to add extra functionality to our site. These plugins will allow our site to have a series of post that are linked together, create a working search bar, add youtube videos to posts, view LaTeX math and add embedded jupyter notebooks in posts. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a great looking website that contains a two-part series, a post with an embedded youtube video and a post that contains an embedded jupyter notebook. Activate our staticsite virtual environment Pull the most recent version of our site from github Install jupyter in our staticsite environment Modify the pelicanconf.py file to use new plugins Build some posts that will allow us to view the new plugins Build and preview the site with Pelican Add and commit the changes then push those changes to github Seems like a lot to do, so let's get started. Activate our virtual environment and pull the most recent version of the site down from github $ source activate staticsite ( staticsite ) $ cd ~/Documents/staticsite ( staticsite ) $ pwd ( staticsite ) $ git pull origin master Install the jupyter package in our staticsite virtual environment. I like using jupyter notebooks to build code and solve engineering problems with Python. A jupyter notebook can contain Python code, the output produced when this code is run and markup text (used for documentation). Jupyter notebooks can also easily display matplotlib plots and pandas data frames. These two Python packages are very useful for engineers solving problems in teams. As the jupyter package is in the main conda channel, we can install it into our virtual environment using the conda install command. (staticsite) $ conda install jupyter We can see all of the modules installed in our (staticsite) environment with: (staticsite) $ pip freeze The output should look something like: appnope==0.1.0 bleach==2.1.1 blinker==1.4 certifi==2017.11.5 decorator==4.1.2 docutils==0.14 entrypoints==0.2.3 feedgenerator==1.9 html5lib==0.999999999 ipykernel==4.6.1 ipython==6.2.1 ipython-genutils==0.2.0 ipywidgets==7.0.5 jedi==0.11.0 Jinja2==2.10 jsonschema==2.6.0 jupyter-client==5.1.0 jupyter-console==5.2.0 jupyter-core==4.4.0 Markdown==2.6.9 MarkupSafe==1.0 mistune==0.8.1 nbconvert==5.3.1 nbformat==4.4.0 notebook==5.2.2 pandocfilters==1.4.2 parso==0.1.0 pelican==3.7.1 pexpect==4.3.0 pickleshare==0.7.4 prompt-toolkit==1.0.15 ptyprocess==0.5.2 Pygments==2.2.0 python-dateutil==2.6.1 pytz==2017.3 pyzmq==16.0.3 qtconsole==4.3.1 simplegeneric==0.8.1 six==1.11.0 terminado==0.6 testpath==0.3.1 tornado==4.5.2 traitlets==4.3.2 Unidecode==0.4.21 wcwidth==0.1.7 webencodings==0.5.1 widgetsnbextension==3.0.8 Add new plugins to the pelicanconf.py file Now we need to modify the pelicanconf.py file to use a couple new plugins. The plugins we will add are: 'series' 'tag_cloud', 'liquid_tags.youtube' 'liquid_tags.notebook', 'liquid_tags.include_code', 'render_math' 'pelican-ipynb.markup' We add these to the PLUGINS = [ ] list in the pelicanconf.py file and separate them with commas. #pelicanconf.py PLUGINS = [ 'i18n_subsites', 'series', 'tag_cloud', 'liquid_tags.youtube', 'liquid_tags.notebook', 'liquid_tags.include_code', 'render_math', 'pelican-ipynb.markup' ] Build some posts that use the newly installed plugins Now we will build a couple of posts which use our newly installed plugins. First we'll modify our content directory with a new folder called posts . We'll keep all the posts in this directory. Then we'll make a couple of new .md files. I'll copy our first post to this new directory with the cp (copy) shell command and then remove the old .md file with the rm command. pwd cd content mkdir posts cp first_post.md posts/first_post.md rm first_post.md Now let's modify the first_post.md file with a couple new lines in the header. The Series: and Series_index: lines will put this first post in series of posts using the series plugin. first_post.md Title : First Post - Part 1 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog Slug : first - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 1 Summary : This is the first post of a series of demonstration posts . This is the first post of a series of demonstration posts . After the post is saved, we can go back to the terminal and copy it to create our second post. The contents of our staticsite directory should look something like this: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content │ ├── posts │ ├── first_post.md ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins │ ├── i18n_subsites │ ├── liquid_tags │ ├── pelican-ipynb │ ├── tipue_search ├── pelican-themes │ ├── pelican-bootstrap3 ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Let's make two new posts in the content/posts directory. cd ~/Documents/staticsite/content/posts cp first_post.md second_post.md cp first_post.md third_post.md Now we'll edit second_post.md so it's part of a series and contains an embedded YouTube video. second_post.md Title : Second Post - Part 2 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog Slug : second - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 2 Summary : This is the second post of a series of posts . It will show series and an embeded youtube video . This is the second post of a series of posts . It will show series and an embedded youtube video . {% youtube https :// www . youtube . com / watch ? v = Qq - 5 frjUfK0 [ 560 ] [ 315 ] %} We'll create a sample jupyter notebook in a new folder called code in our content folder. The jupyter notebook will go in our third post. To create the code folder and bring up a new jupyter notebook in our web browser use: (staticsite) $ pwd (staticsite) $ mkdir content/code (staticsite) $ cd content/code (staticsite) $ jupyter notebook Let's put one markdown cell, one code cell and produce one output cell in our jupyter notebook . We'll save it as example_notebook.ipynb . My sample_notebook.ipynb looks like: Now we will put our example_notebook.ipynb into our third post. Including a juypter notebook requires the use of the line notebook path/to/notebook.ipynb surrounded with a { % % } . third_post.md Title : Third Post - Part 3 Date : 2017 - 11 - 30 12 : 40 Modified : 2017 - 11 - 30 12 : 40 Status : published Category : example posts Tags : python , pelican , blog Slug : third - post Authors : Peter D . Kazarinoff Series : example - post - series Series_index : 3 Summary : This is the third post of a series of posts . It will show series an jupyter notebook . This post contains a jupyter notebook . {% notebook ../ code / sample_notebook . ipynb %} Build and preview the site with Pelican With a couple new pelican-plugins configured and three new posts written, it is time to preview our site again. We can build the site and can view it with a web browser using: make html make serve To view the site, point a browser to localhost:8000 localhost:8000 use ctrl-c to stop the server. Add and commit the changes then push them to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Then we commit those changes with git commit and add the -m \"added plugins\" flag to give supply a commit message (make sure to use double quotes \"commit message\"). To push those changes up to github use git push origin master git add . git commit -m \"added plugins\" git push origin master In the next post we will customize the site. We'll add some css in order to make tables on the site look better and put a search bar at the top of the page.","tags":"This site","url":"how-i-built-this-site-4.html"},{"title":"How I Build This Site - Part 3","text":"This is the third part in a multi-part series on how I built this site. In the last post , we used pelican-quickstart to build the framework of the site and wrote a short first post, then viewed a demo version of the site on localhost:8000. In this post we will add a custom theme to the site called pelican-bootstrap3. The pelican-bootstrap3 theme looks great and is mobile reponsive so it will make the site look good on phones and tablets. Then we'll add some custom css to personalize the look of the theme. Steps in this post We are going to accomplish the following in this post. By the end of the post we are going to have a a static site with a great looking bootstrap3 theme which is mobile responsive and looks great on desktops, tablets and phones. Activate our staticsite virtual environment Pull the most recent version of our site from github Add a git submodule to our staticsite folder and bring in the pelican-themes repo from github Add a git submodule to our staticsite folder and bring in the pelican-plugins repo from github Modify the pelicanconf.py file to point to our new theme, and add a new plugin Build and preview the site with Pelican Add and commit the changes then push those changes to github Big steps, it's really going to look like a website when we are done. Activate our virtual environment and pull from github Open the Anaconda Prompt and activate the (staticsite) virtual environment $ source activate staticsite Then cd into the staticsite directory and bring in the most up to date version of the site stored on github. (staticsite) $ cd ~ (staticsite) $ cd Documents/staticsite (staticsite) $ git pull origin master Use git submodule add to pull all of the themes into our local staticsite/pelican-themes directory There are a bunch of different themes available for static site built with Pelican. The three I was most interested in were: material voidy_bootstrap pelican-bootstrap3 We can bring in all of the Pelican themes stored on github by creating a git submodule . A git submodule is a sub-repository within a git repository that is linked to another repository. It is a way to bring in something else from github within a local repository and not have to keep a local copy up to date. Each time we \"pull\" from the submodule, we get the newest version of the pelican-themes repo on github. We don't have to manually track any changes to these themes and incorporate them to our local version. When the changes are made to the themes on github, we just pull those changes down to our local version. The lines git submodule init and git submodule update --init --recursive are important to call. If those two commands are not moved we'll end up with empty folders within the staticsite/pelican-themes directory. A lot of the themes are submodules themselves so the --recursive option has to be used to pull all of these submodules down. Without --recursive you can end up with empty folders. To create the folder for our pelican-themes git submodule, ensure you are in the staticsite folder, then call: $ pwd $ git submodule add https://github.com/getpelican/pelican-themes.git $ git submodule init $ git submodule update --init --recursive Ensure that we are still in the staticsite directory and pull down the pelican-plugins repo form github. $ pwd $ git submodule add https://github.com/getpelican/pelican-plugins.git $ git submodule init $ git submodule update --init --recursive Now the contents of the staticsite folder should look something like: staticsite/ ├── LICENSE ├── Makefile ├── README.md ├── __pycache__ ├── content ├── develop_server.sh ├── fabfile.py ├── output ├── pelican-plugins ├── pelican-themes ├── pelican.pid ├── pelicanconf.py ├── publishconf.py └── srv.pid Modify the pelicanconf.py file, so that we can use a new theme. So far our pelicanconf.py file contains only default lines of code that Pelican built for us. In order to use a new theme, we need to edit this configuration file. After we edit the configuration file, the make html command will produce new .html pages in the output directory. The relevant lines to add and modify in the pelicanconf.py are: #pelicanconf.py PLUGIN_PATHS = ['pelican-plugins'] THEME = 'pelican-themes/pelican-bootstrap3' BOOTSTRAP_THEME = 'flatly' PLUGIN_PATHS = ['/path/to/git/pelican-plugins'] JINJA_ENVIRONMENT = {'extensions': ['jinja2.ext.i18n']} PLUGINS = [ 'i18n_subsites'] I18N_TEMPLATES_LANG = 'en' Taken directly from the pelicin-bootstrap3 README.md ... this template can be translated (see Translations below). You also need to activate a plugin that initializes the i18n jinja extension. One possibility is an up to date version of the i18n_subsites plugin. So we need to make sure to include the i18n plugin in our pelicanonf.py file. Again from the from the pelicin-bootstrap3 README.md If you are using i18n_subsites and you are not using English as your default language, make sure to also correctly specify the default language of the theme. Otherwise the translations will not be used on your default site. Build and preview the site with Pelican With the pelican-plugins and pelican-themes repos downloaded and the pelicanconf.py file edited, we can build the site and take a look at it with a web browser: make html make serve To view the site, point a brower to localhost:8000 localhost:8000 Now, the site should look something like this: use ctrl-c to shut down the server. Add and commit the changes then push those changes to github When we are done editing the the site, we add all of the changes to our local git repo using git add . . Then we commit those changes with git commit and add the -m \"added pelican_bootstrap3 theme\" flag to give supply a commit message (make sure to use double quotes \"commit message\"). To push those changes up to github use git push origin master git add . git commit -m \"added pelican_bootstrap3 theme\" git push origin master In the next post we will add some additional pelican-plugins to bring extra functionality to the site and add the ability to include jupyter notebooks in posts.","tags":"This site","url":"how-i-built-this-site-3.html"},{"title":"How I Build This Site - Part 2","text":"This is the second part in a multi-part series on how I built this site. In the last post , we set up our development environment including Python, a new virtual environment, installed the pelican and markdown packages and set up git. In this post, we will use the pelican-quickstart command to get the blog off the ground. We are also going to create a first_post.md file and serve up the website locally so we can take a look at it. Steps in this post We are going to accomplish the following in this post. By the end of the post, we will have a working website with one blog post served up locally and an updated github repo with all the changes saved. Activate our staticsite virtual environment Pull the most recent version of our site from github Use the pelican-quickstart command to make a first version of the site Write a first post in markup language (.md) Build the site using the make html command Serve the site locally using make serve and view with a web browser Add and commit the changes then push those changes to github That's a lot to do, so let's get started. Activate our staticsite virtual environment I highly recommend installing the Anaconda distribution of python. If you followed along with the previous post , you already installed Anaconda and can pull up the Anaconda prompt. Open the Anaconda Prompt and see which virtual environments are available. $ conda info --envs You should see a list of all the virtual environments conda has created on your machine. It should look something like: staticsite C:\\Users\\user.name\\AppData\\Local\\Continuum\\Anaconda3\\envs\\staticsite root * C:\\Users\\user.name\\AppData\\Local\\Continuum\\Anaconda3 The staticsite virtual environment is the one we set up to create our site. Activate it with: $ source activate staticsite You should now see (staticsite) before the command prompt. This means we are operating in the staticsite virtual environment. View installed packages We installed pelican, markdown and fabric in the last post. Let's make sure they are installed in our (staticsite) virtual environment. (staticsite)$ pip freeze Make sure you see the following modules are installed: beautifulsoup4==4.6.0 Jinja2==2.9.6 Fabric==1.14.0 Markdown==2.6.9 pelican==3.7.1 Pygments==2.2.0 Pelican Quickstart - make the site! We are now going to build the site! Exciting stuff. With the virtual environment and packages in place, we just need to make sure we are in a directory where we want our site to live. (staticsite)$ cd ~ (staticsite)$ cd Documents (staticsite)$ cd staticsite You can confirm you are working in the staticsite directory by typing pwd which stands for print working directory : (staticsite)$ pwd Now we can spin up the settings and structure of our pelican build. Start the process with the command: (staticsite)$ pelican-quickstart Pelican will ask us a bunch of questions at the start. The initial settings I used are below. Make sure to change the title, author, URL prefix, and timezone: > Where do you want to create your new web site? [.] > What will be the title of this web site? Python Programming for Undergraduate Engineers > Who will be the author of this web site? Peter D. Kazarinoff > What will be the default language of this web site? [English] > Do you want to specify a URL prefix? e.g., http://example.com (Y/n) Y > What is your URL prefix? (see above example; no trailing slash) https://username.github.io/staticsite > Do you want to enable article pagination? (Y/n) Y > How many articles per page do you want? [10] 5 > What is your time zone? [Europe/Paris] America/Los_Angeles > Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) Y > Do you want to upload your website using FTP? (y/N) N > Do you want to upload your website using SSH? (y/N) N > Do you want to upload your website using Dropbox? (y/N) N > Do you want to upload your website using S3? (y/N) N > Do you want to upload your website using Rackspace Cloud Files? (y/N) N > Do you want to upload your website using GitHub Pages? (y/N) y > Is this your personal page (username.github.io)? (y/N) N Now we can create and view the site. The command make html will create the site and the command make serve will spin up a local webserver that allows us to view the site. (staticsite)$ make html (staticsite)$ make serve Point a web browser to: localhost:8000 The site will look something like: We can shut down the server by typing ctrl-c Write a first post in markup language (.md) Time to write our first post. The contents of the staticsite directory should look something like: staticsite/ │ develop_server.sh │ fabfile.py │ Makefile │ pelicanconf.py │ publishconf.py │ ├───content ├───output └───__pycache__ To make a new post, we need to add a markup file (.md file) to the content folder. Let's call our first post first_post.md . Depending on the computer I'm using, I create .md files with different programs. One Windows 10, I have been using Code Writer. On Mac OSX and Linux, I use PyCharm . The first_post.md file saved in the content folder needs to have the form: Title : First Post Date : 2017 - 10 - 13 12 : 40 Modified : 2017 - 10 - 13 12 : 40 Status : published Category : This site Tags : python , markdown , blog Slug : first - post Authors : Peter D . Kazarinoff Summary : This is the summary of the first post This is the very first post ! After saving the file first_post.md in the content folder, the static site folder should look something like: staticsite/ │ develop_server.sh │ fabfile.py │ Makefile │ pelicanconf.py │ publishconf.py │ ├───content │ first_post.md │ ├───output └───__pycache__ Let's build the site again and take a look at our new post (staticsite)$ make html (staticsite)$ make serve Again, point a web browser to: localhost:8000 The site will look something like: It works! I can see the first post! We can shut down the server by typing ctrl-c Add and commit the changes then push the changes to github When we are done editing the posts and the site, we add all of the changes to our local git repo using git add . Then we commit these changes with git commit and use the -m \"created pelcian static site\" flag to supply a commit message (make sure to use double quotes \"commit message\"). Push those changes up to github with git push origin master git add . git commit -m \"created pelican static site\" git push origin master In the next post , we will customize the site with a pelican-theme called pelican-bootstrap3 .","tags":"This site","url":"how-i-built-this-site-2.html"},{"title":"How I Build This Site - Part 1","text":"This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environment, installing Python, virtual environments, installing the necessary packages and setting up git. Setting up the development environment What does that even mean? Before I started building this site I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a development environment . To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below: An operating system: This website was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS). Python: Python 3.6 (legacy Python is version 2.7) Anaconda: The Anaconda Prompt and the Anaconda Python distribution Github.com and git: Four different computers were used build the site. Github is the central place where the most up-to-date version of the site is kept. Pelican: A static site generator written in Python. Pelican will build the site from a settings file (pelicanconf.py) and posts written in markdown (.md files) Markdown: the posts on this website are written in markdown, or .md format fabric and make: fabric is a Python package to automate builds and tasks. Fabric works on Windows. Make is used on MacOSX and Linux to build the site and serve up a demo version of the site. Installing Python (the Anaconda distribution) I highly recommend installing the Anaconda distribution of Python. I have the Anaconda distribution installed on all the computers I used to build this site: Windows 10 Desktop at work Mac OSX laptop at work Mac OSX laptop at home Linux (Ubuntu 16.04 LTS) Desktop at home. An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. Download the latest release at: https://www.anaconda.com/download The Anaconda distribution of Python comes with an up-to-date and stable version of Python (Python 3.6) and the Anaconda Prompt . The Anaconda Prompt is useful because it allows me to run shell commands on my Windows 10 machine at work. These are the same commands I would run in the terminal on my Mac OSX or Linux boxes. The Anaconda Prompt makes creating and logging into virtual environments easy and allows me to use git on Windows 10. Follow this post to install the Anaconda on Windows 10. Create a new virtual environment Before downloading Pelican, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment staticsite . The conda create command creates the environment and the -n staticsite flag adds the name. $ conda create -n staticsite This creates a new virtual environment called staticsite . Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment staticsite is created, we need to activate it and start using it with the command: On Mac OSX or Linux $ source activate staticsite or on Windows 10 activate staticsite We should now see (staticsite) before the terminal prompt. This means we are using the (staticsite) virtual environment. Install Pelican Time for some fun! Installing Pelican. Pelican is a Python package that creates static websites. Static sites are websites that only have html, css and javascript. A static site is not connected to a database and there is no code run on the server side. The server just serves static files (html, css, javascript) to the client when the client requests them. In order to install Pelican, we need to install pip first. On my Linux and Mac OSX machines, the command line tool git is already installed. If using Windows 10, git may not be available. To keep the development environments the same when using Windows 10, you will also need conda to install git . (staticsite)$ conda install pip (staticsite)$ conda install git Once pip is installed, we can install pelican and markdown . These are two of the core pieces we need to build the website. fabric3 is also installed because we'll use it to build and demo the site on Windows. bs4 is the beautiful soup package. Some of the pelican plugins to be installed later will depend on bs4 to function properly. (staticsite)$ pip install pelican (staticsite)$ pip install markdown (staticsite)$ pip install fabric3 (staticsite)$ pip install bs4 (staticsite)$ pip install ghp-import Create a github account and create a new repository While I was making the site, it became clear that I had to keep track of version control . I would make some changes to the site on my computer at work, then come home and make more changes to the site. Bringing a USB thumb drive back and forth was hard. I would forget the thumb drive at work or home and then could not edit the site. Or worse, I'd edit the site in both places and try to remember which changes were made where and which was the best version. Ah! The solution is to use git and github . Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. Github.com is the where the site content and settings are remotely stored and integrates easily with git. To sign up for a github.com account go here: https://github.com/join The account activation screen looks something like: Once the account is set up, log in and create a new repository. Use the + button on the upper right-hand menu: I named the new repository: staticsite and included both a README.md and a GNU General Public License v3.0 . Make a directory for the site and link it to github Once the github repo (short for repository, basically a folder with files on github.com) is set up, the last step to complete the development environment is to link the remote repo on github to the local version of the site on my computer. The local version is in a folder call staticsite in the Documents folder. The staticsite folder will contain all the files used to build the site and the output files created by Pelican that are the site. (staticsite)$ cd ~ (staticsite)$ cd Documents (staticsite)$ mkdir staticsite (staticsite)$ cd staticsite We can set up git to keep the contents of the local staticsite folder in sync with the contents of the staticsite repo on github.com. The command git init will initiate or create the local repository. The command git remote add origin followed by the url of our github repo links local folder to the remote repo on github. Note the web address ends in .git . If you are following along and want to build your own static site, make sure to change username to your github username and reponame to your github repo name. git init git remote add origin https://github.com/username/reponame.git Now for the git magic. On github.com we have a README.md file and a licence. But the local staticsite folder on the computer is empty. So the two folders aren't in sync. To make the contents of each folder identical, we pull the files from github onto the local computer. A pull \"pulls\" or gets the files from github and copies them to the local staticsite folder. (staticsite)$ git pull origin master If you look in the local staticsite folder you should now see the following two files: staticsite ├── LICENSE ├── README.md The development environment is set! On to building the site! Now each time I work on the site, I navigate to the staticsite folder on whatever computer I am using. Before any editing, I key in the command: git pull origin master After the pull , the staticsite folder is up-to-date with the newest version of all the files on github. Then I go about editing files, writing posts, changing settings, etc. After the edits, the last thing I do before shutting down the computer for the day is add all the changes to git with git add . (note there is a space between the add and the period . ). Then commit those changes locally with the line git commit -m \"commit message\" (note there are double quotes \"commit message\" used around the commit message), and finally push the changes up to github.com with git push origin master . Now the version of the site up on github.com is the same as the version of the site on my local machine. git add . git commit -m \"commit message\" git push origin master This ensures all of my computers and the github repo contain the same version of the site. In the next post we will use the pelican-quickstart command to get the blog off the ground, write our first post and view a demo version of the site.","tags":"this site","url":"how-i-built-this-site-1.html"},{"title":"Create a new virtual environment with Conda","text":"To start a new Python project, it is best practice to create a new virtual environment. I have the Anaconda distribution of Python installed on my Windows 10 machine at work. When you install Anaconda , it comes with the very useful Anaconda Prompt . Using the Anaconda Prompt is a bit like using the terminal on a Mac OSX or Linux. To start the Anaconda Prompt on Windows 10, go to the Windows start button on the lower left and select Anaconda Prompt . To create the new environment, we need to issue the following command at the prompt: conda create --name webscrape python=3.6 The conda create command builds the new virtual environment. The --name webscrape flag gives our new virtual environment the name webscrape . I like to name my virtual environments the same name as the project that I will use that environment for, or after the name of the package that will be used the most. Including python=3.6 ensures that your virtual environment has an up to date version of python. Conda will tell us: The following NEW packages will be INSTALLED: certifi: 2016.2.28-py36_0 pip: 9.0.1-py36_1 python: 3.6.2-0 setuptools: 36.4.0-py36_0 vs2015_runtime: 14.0.25420-0 wheel: 0.29.0-py36_0 wincertstore: 0.2-py36_0 Proceed ([y]/n)? y Type y to confirm that you want to create the new virtual environment. To use the new virtual environment webscrape you need to activate it by typing: activate webscrape You know you are in your virtual environment webscrape when (webscrape) is in parenthesis at the start of the prompt: (webscrape) tribilium@Den-PC:~$ To deactivate an active environment, use: deactivate For power-users using the terminal on Mac or Linux, you must use source activate to enter into the virtual environment. source activate webscrape and source deactivate webscrape If you see the (webscrape) in parenthesis before the command prompt, that means you set up the new virtual environment and are now using it. You can view a list of your virtual environments using the conda info --envs or conda env list command. conda info --envs # conda environments: # matplotlib /home/tribilium/anaconda3/envs/matplotlib webscrape * /home/tribilium/anaconda3/envs/pelican root /home/tribilium/anaconda3 Notice the * asterisk on the line with webscrape . The virtual environment with the * is currently active. To exit the virtual environment, use the command deactivate . If you run conda env list again, you'll see there is no * in front of webscrape . That's because you are not currently in that virtual environment. conda env list # conda environments: # matplotlib /home/tribilium/anaconda3/envs/matplotlib webscrape /home/tribilium/anaconda3/envs/pelican root * /home/tribilium/anaconda3 We can spin up the virtual environment again with the activate command. Want to use pip and virtualenv / virtuelenv wrapper instead? Great. Those will work too. For windows and computers with locked down active directories, I prefer conda . It just seems to make things easier. For a great post about the differences between conda and pip see this post by Jake VanderPlas.","tags":"Orientation","url":"new-virtual-environment-with-conda.html"},{"title":"Installing Anaconda on Windows","text":"In this post, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Steps: Visit Anaconda.com/downloads Select Windows Download the .exe installer Open and run the .exe installer Open the Anaconda prompt and run some Python code 1. Visit the Anaconda downloads page Go to the following link: Anaconda.com/downloads The Anaconda Downloads Page will look something like this: 2. Select the Windows Select Windows where the three opperating systems are listed. 3. Download Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version. You may be prompted to enter your email. You can still download Anaconda if you click No Thanks and don't enter your Work Email address. The download is quite large (over 500 MB) so it may take a while for the download to complete. 4. Open and run the installer Once the download completes, open and run the .exe installer At the beginning of the install you will need to click Next to confirm the installation and agree to the license At the Advanced Installation Options screen, I recommend that you do not check \"Add Anaconda to my PATH environment variable\" 5. Open the Conda prompt from the Windows start menu After the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt This will open up the Anaconda prompt, which is often called the Conda prompt . Anaconda is the Python distribution and the Conda prompt is a command line tool (a program where you type in your commands instead of using a mouse). It doesn't look like much, but it is really helpful for an undergraduate engineer using Python. At the Anaconda prompt, type python . This will start the Python interperater. Note the Python version. You should see something like Python 3.6.1 . With the interperter running, you will see a set of greater-than symbols >>> before the cursor. Now you can type Python commands. Try typing import this . You should see the Zen of Python by Tim Peters To close the Python interperater, type exit() at the interperator prompt >>> . Note the double parenthesis at the end of the command. The () is needed to stop the Python interperator and get back out to the Conda Prompt. To close the Conda prompt, you can either close the window with the mouse, or type exit . Congratulations! You installed the Anaconda distribution on your Windows computer! When you want to use the Python interperater again, just click the Windows Start button and select the Anaconda Prompt and type python .","tags":"Orientation","url":"installing-anaconda-on-windows.html"}]}