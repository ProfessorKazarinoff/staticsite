{"pages":[{"title":"About","text":"I started this blog after teaching a course on Engineering Programming at Portland Community College (ENGR214). In the course, we used MATLAB. But this cost students $49 for a student version. As we strive to move towards open education resources, I wanted to reduce the cost for students to take the course. This lead me to Python. My goal is to help reduce student cost and investigate how Python could be used in an engineering programming course instead of MATLAB. I earned my PhD in Material Science and Engineering from the University of Washington. Currently, I work as a Professor of Engineering and Engineering Technology at Portland Community College in Portland, OR. Teaching at a community college is my dream job. I have two inquisitive daughters and a wonderful and supportive wife. Coding downstairs in the den after the kids go to bed would not be possible without the my wife's gracious support. In my garage is sitting a '76 Scout II. It barely runs, is rusty all over and smells like a cheap oil change. I hope to get it on the road this summer. I play soccer and follow the Seattle Sounders and Portland Timbers.","tags":"pages","url":"pages/about.html"},{"title":"Book","text":"Coming in Fall 2018 Book: Python Programming for Undergraduate Engineers This books is for undergraduate engineers learning programming. It is focused on using Python and programming to solve engineering problems. Chapter List Preface Chapter 1: Orientation Chapter 2: Engineering 101 Chapter 3: Statics Chapter 4: Circuits I Chapter 5: Strengths Chapter 6: Circuits II Chapter 7: Dynamics Chapter 8: Circuits III Chapter 9: Capstone Appendix Pre-order will be available soon","tags":"pages","url":"pages/book.html"},{"title":"How I build this site - Part 1","text":"This is the first part of a multi-part series on how I built this site. In this first post, we'll review the development environment, installing Python, virtual environments, installing the necessary packages and setting up git. Setting up the development environment What does that even mean? Before I started building this site I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a development environment . To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below: An operating system: This website was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS). Python: Python 3.6 (legacy Python is version 2.7) Anaconda: The Anaconda Prompt and the Anaconda Python distribution Github.com and git: Four different computers were used build the site. Github is the central place where the most up to date version of the site is kept. Pelican: A static site generator written in Python. Pelican will build the site from a settings file (pelicanconf.py) and posts written in markdown (.md files) Markdown: the posts on this website are written in markdown, or .md format fabric and make: fabric is a python package to automate builds and tasks. Fabric works on Windows. Make is used on MacOSX and Linux to build the site and serve up a demo version of the site. Installing Python (the Anaconda distribution) I highly recommend installing the Anaconda distribution of Python. I have the Anaconda distribution installed on all the computers I used to build the site: Windows 10 Desktop at work Mac OSX laptop at work Mac OSX laptop at home Linux (Ubuntu 16.04 LTS) Desktop at home. An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. Download the lastest release at: https://www.anaconda.com/download The Anaconda distribution of Python comes with an up to date and stable version of Python (Python 3.6) and the Anaconda Prompt . The Anaconda Prompt is useful because it allows me to run shell commands on my Windows 10 machine at work. These are the same commands I would run in the terminal on my Mac OSX or Linux boxes. The Anaconda Prompt makes creating and logging into virtual environments easy and allows me to use git on Windows 10. Follow this post to install the Anaconda on Windows 10. Create a new virtual environment Before downloading Pelican, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment staticsite . The create command creates the environment and the -n staticsite flag adds the name. $ conda create -n staticsite This creates a new virtual environment called staticsite . Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment staticsite is created, we need to activate it and start using it with the command: $ source activate staticsite We should now see (staticsite) before the terminal prompt. This means we are using the (staticsite) virtual environment. Install Pelican Time for some fun! Installing Pelican. Pelican is a Python package that creates static websites. Static sites are websites that only have html, css and javascript. A static site is not connected to a database and there is no code run on the server side. The server just serves static files (html, css, javascript) to the client when the client requests them. In order to install Pelican, we need to install pip first. (staticsite)$ conda install pip Once pip is installed, we can install pelican and markdown . These are two of the core pieces we need to build the website. fabric is also installed because we'll use it to build and demo the site on Windows. (staticsite)$ pip install pelican (staticsite)$ pip install markdown (staticsite)$ pip install fabric Create a github account and create a new repository While I was making the site, it became clear that I had to keep track of version control . I would make some changes to the site on my computer at work, then come home and make more changes to the site. Bringing a USB thumb drive back and forth was hard. I would forget the thumb drive at work or home and then could not edit the site. Or worse, I'd edit the site in both places and try to remember which changes were made where and which was the best version. Ah! The solution is to use git and github . Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. Github.com is the where the site content and settings are remotely stored and integrates easily with git. To sign up for a github.com account go here: https://github.com/join The account activation screen looks something like: Once the account is set up, log in and create a new repository. Use the + button on the upper right-hand menu: I named the new repository: staticsite and included both a README.md and a GNU General Public License v3.0 . Make a directory for the site and link it to github Once the github repo (short for repository, basically a folder with files on github.com) is set up, the last step to complete the development environment is to link the remote repo on github to the local version of the site on my computer. The local version is in a folder call staticsite in the Documents folder. The staticsite folder will contain all the files used to build the site and the output files created by Pelican that are the site. (staticsite)$ cd ~ (staticsite)$ cd Documents (staticsite)$ mkdir staticsite (staticsite)$ cd staticsite We can set up git to keep the contents of the local staticsite folder in sync with the contents of the staticsite repo on github.com. The command git init will initiate or create the local repository. The command git add origin followed by the url of our github repo links the folder to the repo on github. Note the web address ends in .git . If you are following along and want to build your own static site, make sure to change username to your github username and reponame to your github repo name. git init git remote add origin https://github.com/username/reponame.git Now for the git magic. On github.com we have a README.md file and a licence. But the local staticsite folder on the computer is empty. So the two folders aren't in sync. To make the contents of each folder identical, we pull the files from github onto the local computer. A pull \"pulls\" or gets the files from github and copies them to the local staticsite folder. (staticsite)$ git pull origin master If you look in the local staticsite folder you should now see the following two files: staticsite ├── LICENSE ├── README.md The development environment is set! On to building the site! Now each time I work on the site, I navigate to the staticsite folder on whatever computer I am using. Before any editing, I key in the command: git pull origin master The after the pull the staticsite folder is up to date with the newest version of all the files on github. Then I go about editing files, writing posts, changing settings, etc. After the edits, the last thing I type before shutting down the computer for the day is: git push origin master This ensures all of my computers and the github repo contain the same version of the site.","tags":"this site","url":"how-built-site-1.html"},{"title":"Create a new virtual environment with Conda","text":"To start a new project, it is best practice to create a new virtual environment. I have the Anaconda distribution of Python installed on my machine at work and it comes with the very useful conda prompt . Using the conda prompt is a bit like using the terminal on a Mac or Linux. To start the conda prompt on Windows, go to the Windows start button on the lower left and select Anaconda Prompt. To make the new environment we need to issue the following command at the prompt: conda create --name webscrape python=3.6 The conda create command builds the new virtual environment. The --name webscrape flag gives our new virtual environment the name webscrape . I like to name my virtual environments the same name as the project that I will use that environment for, or after the name of the package that will be used the most. Including python=3.6 ensures that your virtual environment has an up to date version of python. Conda will tell us: The following NEW packages will be INSTALLED: certifi: 2016.2.28-py36_0 pip: 9.0.1-py36_1 python: 3.6.2-0 setuptools: 36.4.0-py36_0 vs2015_runtime: 14.0.25420-0 wheel: 0.29.0-py36_0 wincertstore: 0.2-py36_0 Proceed ([y]/n)? y Type y to confirm that you want to create the new virtual environment. To use the new virtual environment webscrape you need to activate it by typing: activate webscrape You know you are in your virtual environment webscrape when (webscrape) is in parenthesis at the start of the conda prompt (webscrape) tribilium@Den-PC:~$ To deactivate an active environment, use: deactivate For power-users using bash on Mac or Linux, you must source . source activate webscrape and source deactivate webscrape If you see the (webscrape) in parenthesis before the command prompt, that means you set up the new virtual environment and are now using it. You can view a list of your virtual environments using the conda info --envs or conda env list command. conda info --envs # conda environments: # matplotlib /home/tribilium/anaconda3/envs/matplotlib webscrape * /home/tribilium/anaconda3/envs/pelican root /home/tribilium/anaconda3 Notice the * asterisk on the line with webscrape . The virtual environment with the * is currently active. To exit the virtual environment, use the command deactivate . If run conda env list again, you will see that there is no * in front of webscrape because you currently not in that virtual environment. # conda environments: # matplotlib /home/tribilium/anaconda3/envs/matplotlib webscrape /home/tribilium/anaconda3/envs/pelican root * /home/tribilium/anaconda3 We can spin up the virtual environment again with the activate command.","tags":"Orientation","url":"new-virtual-environment-with-conda.html"},{"title":"Installing Anaconda on Windows","text":"In this post, we will run through installing the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the the best option for undergraduate engineers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Steps: Visit Anaconda.com/downloads Select Windows Download the .exe installer Open and run the .exe installer Open the Anaconda prompt and run some Python code 1. Visit the Anaconda downloads page Go to the following link: Anaconda.com/downloads The Anaconda Downloads Page will look something like this: 2. Select the Windows Select Windows where the three opperating systems are listed. 3. Download Download the Python 3.6 distribution. Python 2.7 is legacy Python. For undergraduate engineers, select the Python 3.6 version. You may be prompted to enter your email. You can still download Anaconda if you click No Thanks and don't enter your Work Email address. The download is quite large (over 500 MB) so it may take a while for the download to complete. 4. Open and run the installer Once the download completes, open and run the .exe installer At the beginning of the install you will need to click Next to confirm the installation and agree to the license At the Advanced Installation Options screen, I recommend that you do not check \"Add Anaconda to my PATH environment variable\" 5. Open the Conda prompt from the Windows start menu After the Anaconda install is complete, you can go to the Windows start menu and select the Anaconda Prompt This will open up the Anaconda prompt, which is often called the Conda prompt . Anaconda is the Python distribution and the Conda prompt is a command line tool (a program where you type in your commands instead of using a mouse). It doesn't look like much, but it is really helpful for an undergraduate engineer using Python. At the Anaconda prompt, type python . This will start the Python interperater. Note the Python version. You should see something like Python 3.6.1 . With the interperter running, you will see a set of greater-than symbols >>> before the cursor. Now you can type Python commands. Try typing import this . You should see the Zen of Python by Tim Peters To close the Python interperater, type exit() at the interperator prompt >>> . Note the double parenthesis at the end of the command. The () is needed to stop the Python interperator and get back out to the Conda Prompt. To close the Conda prompt, you can either close the window with the mouse, or type exit . Congratulations! You installed the Anaconda distribution on your Windows computer! When you want to use the Python interperater again, just click the Windows Start button and select the Anaconda Prompt and type python .","tags":"Orientation","url":"installing-anaconda-on-windows.html"}]}