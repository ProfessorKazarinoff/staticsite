<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python for Undergraduate Engineers - jupyter</title><link href="https://professorkazarinoff.github.io/staticsite/" rel="alternate"></link><link href="https://professorkazarinoff.github.io/staticsite/feeds/jupyter.atom.xml" rel="self"></link><id>https://professorkazarinoff.github.io/staticsite/</id><updated>2018-05-27T12:40:00-07:00</updated><entry><title>Adding Google OAuth and system service to a Jupyter Hub server</title><link href="https://professorkazarinoff.github.io/staticsite/add-google-oauth-and-system-service-to-jupyterhub.html" rel="alternate"></link><published>2018-05-27T12:40:00-07:00</published><updated>2018-05-27T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-27:/staticsite/add-google-oauth-and-system-service-to-jupyterhub.html</id><summary type="html">&lt;p&gt;This is the sixth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we will set up &lt;strong&gt;jupyterhub&lt;/strong&gt; to run as a system service in the background which will allow us to work on the server and run &lt;strong&gt;jupyterhub&lt;/strong&gt; at the same time. Then we will add an authentication system so that users can log into our Jupyter Hub server using github usernames and passwords. Finally we will modify the authentication system so that users can log into our Jupyer Hub server using their google usernames and passwords. The same user name and password a student uses to access their college email.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the sixth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we will set up &lt;strong&gt;jupyterhub&lt;/strong&gt; to run as a system service in the background which will allow us to work on the server and run &lt;strong&gt;jupyterhub&lt;/strong&gt; at the same time. Then we will add an authentication system so that users can log into our Jupyter Hub server using github usernames and passwords. Finally we will modify the authentication system so that users can log into our Jupyer Hub server using their google usernames and passwords. The same user name and password a student uses to access their college email.&lt;/p&gt;
&lt;h3 id="posts-in-this-series"&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;Create ssh key, save to documents/ssh-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/new-digital-ocean-droplet.html"&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/installing-jupyter-hub.html"&gt;Install Jupyter Hub on the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/add-ssl-and-domain-name-to-jupyterhub.html"&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect OAuth to Jupyter Hub&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Pre-populate each new user's directory tree to include three notebook assignments.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="last-time"&gt;Last time&lt;/h3&gt;
&lt;p&gt;In the last post, we succeeded in getting &lt;strong&gt;jupyterhub&lt;/strong&gt; to run on https and use SSL certificates. We created SSL certificates, modified the nginx config and modified the &lt;strong&gt;jupyterhub&lt;/strong&gt; config. At the end of it we were able to get a working version of jupyter hub running SSL security.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;strong&gt;jupterhub&lt;/strong&gt; as a system service&lt;/li&gt;
&lt;li&gt;Test local OAuth&lt;/li&gt;
&lt;li&gt;Acquire github OAuth credentials&lt;/li&gt;
&lt;li&gt;Modify jupyterhub_config.py to use github OAuth&lt;/li&gt;
&lt;li&gt;Acquire google OAuth credentials&lt;/li&gt;
&lt;li&gt;Modify jupyterhub_config.py to use google OAuth&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="1-run-jupterhub-as-a-system-service"&gt;1. Run &lt;strong&gt;jupterhub&lt;/strong&gt; as a system service&lt;/h3&gt;
&lt;p&gt;Working off of &lt;a href="https://github.com/jupyterhub/jupyterhub/wiki/Run-jupyterhub-as-a-system-service"&gt;this wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run &lt;strong&gt;jupyterhub&lt;/strong&gt; as a system service, we need to create a service file in the &lt;code&gt;/etc/systemd/system&lt;/code&gt; directory. &lt;code&gt;cd&lt;/code&gt; into the directory and have a look around. You should see a couple files that end in &lt;code&gt;.service&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/systemd/system
$ ls
cloud-init.target.wants                network-online.target.wants
dbus-org.freedesktop.thermald.service  paths.target.wants
default.target.wants                   sockets.target.wants
final.target.wants                     sshd.service
getty.target.wants                     sysinit.target.wants
graphical.target.wants                 syslog.service
iscsi.service                          timers.target.wants
multi-user.target.wants
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll create a new &lt;code&gt;.service&lt;/code&gt; file called &lt;code&gt;jupyterhub.service&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nano jupyterhub.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the file, add the following. Note that as part of the &lt;code&gt;PATH&lt;/code&gt; environment variable &lt;code&gt;/home/peter/anaconda3/bin&lt;/code&gt; is included. This is the path to our &lt;strong&gt;Anaconda&lt;/strong&gt; environment. As part of the &lt;code&gt;ExecStart&lt;/code&gt; we include a flag for our &lt;code&gt;jupyterhub_config.py&lt;/code&gt; file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Jupyterhub&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog.target network.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/home/peter/anaconda3/bin&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/peter/anaconda3/bin/jupyterhub -f /home/peter/jupyterhub_config.py&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and exit with [Ctrl-c] + [y]. Now we need to reload the system daemon and run &lt;strong&gt;jupyterhub&lt;/strong&gt; as a system process using the command: &lt;code&gt;sudo systemctl &amp;lt;start|stop|status&amp;gt; jupyterhub&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl daemon-reload
$ sudo systemctl start jupyterhub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see if &lt;strong&gt;jupyterhub&lt;/strong&gt; is running with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl status jupyterhub

 Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/etc/systemd/system/jupyterhub.service&lt;span class="p"&gt;;&lt;/span&gt; 
 Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="2-test-local-oauth"&gt;2. Test local OAuth&lt;/h3&gt;
&lt;p&gt;Now we can go to the server and log in as our non-root user, and log in as the other user we created &lt;code&gt;kendra&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A couple times I thought that &lt;strong&gt;jupyterhub&lt;/strong&gt; was running after using &lt;code&gt;systemctl start jupyterhub&lt;/code&gt;, but the hub wasn't working when I went to the hub's web address. It turned out that &lt;strong&gt;jupyterhub&lt;/strong&gt; wasn't running when I keyed in &lt;code&gt;systemctl status jupyterhub&lt;/code&gt;. Most times looking for an error and tracking down the the error worked, but one time it seemed to be a problem with the http-configurable-proxy. The following command will shut down the proxy if you get stuck like I did (insert the number corresponding to the configurable-http-proxy process after the &lt;code&gt;kill&lt;/code&gt; command):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep configurable-http-proxy
$ &lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="c1"&gt;#### &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="3-acquire-github-oauth-credentials"&gt;3. Acquire Github OAuth credentials&lt;/h3&gt;
&lt;p&gt;A problem now is that if we go to the admin page on jupyter hub, we can't add new users. The users have to be added to the server using PuTTY first and then can be added to &lt;strong&gt;jupyterhub&lt;/strong&gt; with the admin panel. This is OK for a small team or a couple users, but for a college class, creating a new user on the server for each student, then emailing out passwords... Ah! what a mess. So we need to give &lt;strong&gt;jupyterhub&lt;/strong&gt; the authority to create new users from the admin panel and we need a way to have users login with a user name and password they already have.&lt;/p&gt;
&lt;p&gt;One of the ways students could log into Jupyter Hub is using their github credentials. This would require each student to have a github account. A github account for each student might be worth it to give students exposure to git and github as a tools. So let's give the github authenticator a whirl. The github authenticator is also pretty well documented for Jupyter Hub, so it's good authenticator to try first.&lt;/p&gt;
&lt;p&gt;To use the github authenticator, we need to install &lt;strong&gt;oauthenticator&lt;/strong&gt;. I couldn't find oauthenticator on conda-forge. If it's on conda-forge, I would install it from there rather than PyPI. But for this one, I used &lt;strong&gt;pip&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install conda install oauthenticator
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to log into github and create an OAuth App and copy the Client ID and Client Secret. The short version is:&lt;/p&gt;
&lt;p&gt;github profile --&amp;gt; settings --&amp;gt; Developer Settings --&amp;gt; OAuth Apps --&amp;gt; Register a new application&lt;/p&gt;
&lt;p&gt;&lt;img alt="github settings" src="/posts/jupyterhub/github_settings.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="github developer settings" src="/posts/jupyterhub/github_developer_settings.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="github register new applicaiton" src="/posts/jupyterhub/github_register_new_application.png"&gt;&lt;/p&gt;
&lt;p&gt;Set the &lt;strong&gt;Homepage URL&lt;/strong&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://notebooks.yourdomain.com/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set the &lt;strong&gt;Authorization call-back URL&lt;/strong&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://notebooks.yourdomain.com/hub/oauth_callback
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="github register new app" src="/posts/jupyterhub/github_register_oauth_app.png"&gt;&lt;/p&gt;
&lt;p&gt;in the App Settings page, we need to copy two settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client ID&lt;/li&gt;
&lt;li&gt;Client Secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="github client id and secret" src="/posts/jupyterhub/github_client_id_and_secret.png"&gt;&lt;/p&gt;
&lt;p&gt;These two long strings will need to be pasted into the jupyterhub_config.py file. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="4-modify-jupyterhub_configpy-to-use-github-oauth"&gt;4. Modify jupyterhub_config.py to use github OAuth&lt;/h3&gt;
&lt;p&gt;Now we'll edit the &lt;code&gt;jupyterhub_config.py&lt;/code&gt; file to include a couple additional lines. Note in the configuration below, &lt;code&gt;#c.Authenticator.whitelist&lt;/code&gt; is commented out. We want to see if a github user can log onto the server (which will automatically create a new user and spawn a jupyter notebook server) and run notebooks. Once we know the server is working, we can uncomment the white list and only allow in specific github usernames. Note &lt;code&gt;c.LocalGitHubOAuthenticator.client_id&lt;/code&gt; and &lt;code&gt;c.LocalGitHubOAuthenticator.client_secret&lt;/code&gt; are the long strings from our github OAuth App.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#jupyterhub_config.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;oauthenticator.github&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LocalGitHubOAuthenticator&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticator_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LocalGitHubOAuthenticator&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGitHubOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oauth_callback_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://notebooks.problemsolvingwithpython.com/hub/oauth_callback&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGitHubOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxxxxxxxxxxxxxxxxxx&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGitHubOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGitHubOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_system_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="c1"&gt;#c.Authenticator.whitelist = {&amp;#39;peter&amp;#39;,&amp;#39;kendra&amp;#39;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;peter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart &lt;strong&gt;jupyterhub with&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl stop jupyterhub
$ sudo systemctl start jupyterhub
$ sudo systemctl status jupyterhub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Browse over to the hub's URL and we should be able to log in with a github username and password. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Sign in with GitHub" src="/posts/jupyterhub/sign_in_with_github.PNG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="4-google-authenticator"&gt;4. Google Authenticator&lt;/h3&gt;
&lt;p&gt;Now that the github authenticator works, we are going to get into the weeds of getting the google authenticator to work. Why google authenticator instead of github? Our college uses the gmail suite for both staff and students. When students log onto their college email, they are logging into gmail. Students can use google calendar and google drive with their college email account as well. So it is probably best that students log into juypter hub using the same google login that they use to access their college email, google drive and calendar. &lt;/p&gt;
&lt;p&gt;First up we need to set up a google OAuth instance. I did this using my personal gmail account rather than my college gmail account. Some parts of google suite are not available in my college profile like youtube and developer tabs. &lt;/p&gt;
&lt;p&gt;To obtain the google OAuth credentials, we need to log into the google API console &lt;a href="https://console.developers.google.com/"&gt;https://console.developers.google.com/&lt;/a&gt; and select [Credentials] on the lefthand menu.&lt;/p&gt;
&lt;p&gt;&lt;img alt="google oauth credentials" src="/posts/jupyterhub/google_oauth_credentials.png"&gt;&lt;/p&gt;
&lt;p&gt;Next we'll create a new OAuth credential under [Credentials] --&amp;gt; [Create Credentials] --&amp;gt; [OAuth client ID]:&lt;/p&gt;
&lt;p&gt;&lt;img alt="google create credentials" src="/posts/jupyterhub/google_oauth_create_credentials.png"&gt;&lt;/p&gt;
&lt;p&gt;To create a set of google OAuth credentials you will need to input:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authorized JavaScript origins: https://notebooks.yourdomain.com&lt;/li&gt;
&lt;li&gt;callback url: https://notebooks.yourdomain.com/hub/oauth_callback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="google js origins and callback url" src="/posts/jupyterhub/google_oauth_javascript_origins_redirect_uri.png"&gt;&lt;/p&gt;
&lt;p&gt;After creating a new set of google OAuth credentials, note the:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client ID&lt;/li&gt;
&lt;li&gt;client secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="google client ID and secret" src="/posts/jupyterhub/google_oauth_client_id_and_secret.png"&gt;&lt;/p&gt;
&lt;p&gt;These two longs strings will be included in our revised &lt;strong&gt;jupyterhub&lt;/strong&gt; configuration.&lt;/p&gt;
&lt;p&gt;Once we get our google OAuth credentials, we need to edit &lt;code&gt;jupyterhub_conf.py&lt;/code&gt;. Note the google OAuth credentials need to replace &lt;code&gt;'xxxxxxxxxxxxxxx'&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#jupyterhub_conf.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spawner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/peter/anaconda3/bin/jupyterhub-singleuser&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# For Google OAuth Authentication&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;oauthenticator.google&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticator_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_system_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosted_domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yourcollege.edu&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Your College Name&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oauth_callback_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://notebooks.yourserver.com/hub/oauth_callback&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oauth_client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxxxxxxxxxxxxxxxxx&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalGoogleOAuthenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oauth_client_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#c.JupyterHub.cookie_secret_file = &amp;#39;/srv/jupyterhub/jupyterhub_cookie_secret&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_user_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;adduser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--gecos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--disabled-password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--force-badname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;studnet.username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;faculty.username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;faculty.username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This little line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.Authenticator.add_user_cmd = [&amp;#39;adduser&amp;#39;, &amp;#39;-q&amp;#39;, &amp;#39;--gecos&amp;#39;, &amp;#39;&amp;quot;&amp;quot;&amp;#39;, &amp;#39;--disabled-password&amp;#39;, &amp;#39;--force-badname&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;was a real gottacha. Our college email addresses are in the form:&lt;/p&gt;
&lt;p&gt;firstname.lastname@college.edu &lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;jupyterhub&lt;/strong&gt; was trying to create users with dots &lt;code&gt;.&lt;/code&gt; in their usernames. This doesn't work in linux. I tried creating a new user with a dot in their username and it asked me to use the &lt;code&gt;--force-badname&lt;/code&gt; flag. So that is what we'll add to the &lt;code&gt;c.Authenticator.add_user_cmd&lt;/code&gt; list. Otherwise the users will be able to authenticate, buy they won't get a new account on the server and they won't be able to run notebooks.&lt;/p&gt;
&lt;p&gt;Restart &lt;strong&gt;jupyterhub&lt;/strong&gt; and browse to the web address attached to the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl stop jupyterhub
$ sudo systemctl start jupyterhub
$ sudo systemctl status jupyterhub
&lt;span class="c1"&gt;# [Ctrl + c] to exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The login window should look something like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sign in with google" src="/posts/jupyterhub/sign_in_with_google.PNG"&gt;&lt;/p&gt;
&lt;p&gt;We can log in with our google user name and password (college username and password). Pretty sweet.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post, we set &lt;strong&gt;jupyterhub&lt;/strong&gt; to run as a system service in the background which allowed us to work on the server and run &lt;strong&gt;jupyterhub&lt;/strong&gt; at the same time. Then we added a github authentication system so that users could log into our Jupyter Hub server using their github usernames and passwords. Then we modified the authentication system to use google user names and passwords even if the usernames contained a dot. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="next-steps"&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;Up next we will see if we can populate each new user's working directory tree with a couple of notebooks that will be the assignments for the quarter. We'll see if we can pull these down from github so that the assignments can be edited by instructors and viewed by the students before the quarter starts.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Adding SSL and a domain name to Jupyter Hub</title><link href="https://professorkazarinoff.github.io/staticsite/add-ssl-and-domain-name-to-jupyterhub.html" rel="alternate"></link><published>2018-05-25T12:40:00-07:00</published><updated>2018-05-25T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-25:/staticsite/add-ssl-and-domain-name-to-jupyterhub.html</id><summary type="html">&lt;p&gt;This is the fifth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we are going to link a domain name to our server IP address, add SSL security and configure nginx to run as a proxy in between users and &lt;strong&gt;jupyterhub&lt;/strong&gt;. Then we'll run &lt;strong&gt;jupyterhub&lt;/strong&gt; over https using the SSL security we created.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the fifth part of a multi-part series that shows how to set up Jupyter Hub for a college class. In this post, we are going to link a domain name to our server IP address, add SSL security and configure nginx to run as a proxy in between users and &lt;strong&gt;jupyterhub&lt;/strong&gt;. Then we'll run &lt;strong&gt;jupyterhub&lt;/strong&gt; over https using the SSL security we created.&lt;/p&gt;
&lt;h3 id="posts-in-this-series"&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;Create ssh key, save to documents/ssh-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/new-digital-ocean-droplet.html"&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/installing-jupyter-hub.html"&gt;Install Jupyter Hub on the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Connect OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to Jupyter Hub as student&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="last-time"&gt;Last time&lt;/h3&gt;
&lt;p&gt;In the &lt;a href="({filename}/posts/jupyterhub/installing_jupyterhub.md)"&gt;last post&lt;/a&gt;, we installed &lt;strong&gt;Anaconda&lt;/strong&gt; on the server using a shell script. Then we installed some extra Python packages such as &lt;strong&gt;pint&lt;/strong&gt;, &lt;strong&gt;pyserial&lt;/strong&gt; and &lt;strong&gt;schemdraw&lt;/strong&gt; to our base conda environment. Next we installed &lt;strong&gt;jupyterhub&lt;/strong&gt;, opened up port 8000 and ran &lt;strong&gt;jupyterhub&lt;/strong&gt; for the first time! And remember &lt;strong&gt;we shut down jupyter hub very quickly&lt;/strong&gt; because we ran it without any SSL security.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Link domain name to server IP address&lt;/li&gt;
&lt;li&gt;Install nginx and modify ufw&lt;/li&gt;
&lt;li&gt;Obtain SSL certificates with certbot&lt;/li&gt;
&lt;li&gt;Create a cookie secret and a proxy auth token&lt;/li&gt;
&lt;li&gt;Modify nginx config&lt;/li&gt;
&lt;li&gt;Generate jupyterhub_config.py and modify&lt;/li&gt;
&lt;li&gt;Restart nginx and start jupyterhub, see if we can login&lt;/li&gt;
&lt;li&gt;Create an new user and restart &lt;strong&gt;jupyterhub&lt;/strong&gt;. See if the new user can log in.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="1-link-domain-name-to-server-ip-address"&gt;1. Link domain name to server IP address&lt;/h3&gt;
&lt;p&gt;When we started Jupyter Hub in the previous post, it ran, we could log in, and we could run Python code. What's not to like, right? Well, security is the big problem. &lt;/p&gt;
&lt;p&gt;In the initial setup, Jupyter Hub was running under regular http, not https. With a web application that has usernames and passwords, like Jupyter Hub, having https and SSL security is best (or maybe manditory). In order to use https, we need to get an SSL certificate. And that SSL certificate should correspond to the domain name linked to our server. So the first step is getting the domain name and pointing it at Digital Ocean. The next step is linking the domain name to our Jupyter Hub server.&lt;/p&gt;
&lt;h4 id="google-domains"&gt;Google Domains&lt;/h4&gt;
&lt;p&gt;I purchased the domain &lt;em&gt;problemsolvingwithpython.com&lt;/em&gt; from &lt;a href="https://domains.google.com"&gt;google domains&lt;/a&gt;. It costs $12/year which seems pretty reasonable and was easy to set up. After purchasing the domain, I added the Digital Ocean DNS servers as a set of custom name servers to my domain options on google domains.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Google Domains Dashboard" src="/posts/jupyterhub/google_domains_list.png"&gt;&lt;/p&gt;
&lt;p&gt;To add a set of custom name servers, click the button with the two bars under the DNS header. This will bring up a page where you can enter in the Digital Ocean DNS servers. The name servers to add are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ns1.digitalocean.com
ns2.digitalocean.com
ns3.digitalocean.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Google Domains Dashboard" src="/posts/jupyterhub/google_domains_dns_routing.png"&gt;&lt;/p&gt;
&lt;p&gt;Make sure to click the radio button [Use custom name servers] and click [save].&lt;/p&gt;
&lt;h4 id="digital-ocean-dns"&gt;Digital Ocean DNS&lt;/h4&gt;
&lt;p&gt;Now we are going to set our domain &lt;em&gt;problemsolvingwithpython.com&lt;/em&gt; to link to the IP address of our server on Digital Ocean. Log into Digital Ocean and in the upper right select [Create] --&amp;gt; [Domains/DNS]&lt;/p&gt;
&lt;p&gt;&lt;img alt="DO Domains/DNS" src="/posts/jupyterhub/DO_manage_domains.png"&gt;&lt;/p&gt;
&lt;p&gt;In the [Add a domain] field, type in the domain name without http, but including .com (or .edu/.org/.net) then click [Add Domain].&lt;/p&gt;
&lt;p&gt;&lt;img alt="DO Domains/DNS" src="/posts/jupyterhub/DO_add_domain.png"&gt;&lt;/p&gt;
&lt;p&gt;This will bring up a panel where we can add a DNS record. I want the notebook server to have the web address &lt;/p&gt;
&lt;p&gt;https://notebooks.problemsovlingwithpython.com&lt;/p&gt;
&lt;p&gt;So I entered &lt;code&gt;notebooks&lt;/code&gt; in the text field. Then selected the droplet (server) that the web address will to route to.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DO Domains/DNS" src="/posts/jupyterhub/DO_sub_domain.png"&gt;&lt;/p&gt;
&lt;p&gt;After completing this step, there will be a number of new DNS records. The ones I set up are below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="DO Domains/DNS" src="/posts/jupyterhub/DO_domains_routed.png"&gt;&lt;/p&gt;
&lt;p&gt;It takes a couple minutes for the DNS switchover to complete. &lt;a href="https://www.whatsmydns.net"&gt;https://www.whatsmydns.net&lt;/a&gt; can be used to check the NS and A records of your domain and see if the domain name is getting through. The first time I set up DNS on Digital Ocean, I added the custom DNS servers to google domains but neglected to select the [use custom name servers] radio button on the google domains dashboard. It looked like the domain was routing to Digital Ocean, but actually the domain was just staying with google. Once I clicked the [use custom name servers] radio button and waited a couple minutes, the change over happened. It did take a bit of time though; not hours, but more than a few minutes.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="2-install-nginx-and-modify-ufw"&gt;2. Install nginx and modify ufw&lt;/h3&gt;
&lt;p&gt;Now that the domain name is set up, the next step is to install and configure nginx. Nginx is an open source web server that can handle many concurrent web connections at the same time. For the nginx installation, I followed &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04"&gt;this tutorial&lt;/a&gt; from Digital Ocean.&lt;/p&gt;
&lt;p&gt;Use PuTTY to connect to the server with the non-root sudo user we set up before. Once logged in, we can update the system and install nginx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Digital Ocean installs a firewall application called ufw. Check out which apps the ufw firewall can work with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ufw app list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We see a list of available ufw configurations to work with nginx. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Available applications:
  Nginx Full
  Nginx HTTP
  Nginx HTTPS
  OpenSSH
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to allow in both http and https requests. Once a http request comes in, we'll use nginx to convert the http connection to a https connection. Select nginx full. Note the Capitalization in the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ufw allow &lt;span class="s1"&gt;&amp;#39;Nginx Full&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can check out which ports ufw is allowing through with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ufw status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note in the output how ufw is allowing nginx full and requests over port 8000. We opened port 8000 earlier, so we could see how &lt;strong&gt;jupyterhub&lt;/strong&gt; works without a domain name or SSL.  Once we get nginx running and hooked up to &lt;strong&gt;jupyterhub&lt;/strong&gt;, we need to remember to close off port 8000 in ufw.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;

&lt;span class="n"&gt;To&lt;/span&gt;                         &lt;span class="n"&gt;Action&lt;/span&gt;      &lt;span class="n"&gt;From&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;                         &lt;span class="o"&gt;------&lt;/span&gt;      &lt;span class="o"&gt;----&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;                         &lt;span class="n"&gt;LIMIT&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt;
&lt;span class="mi"&gt;2375&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;                   &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt;
&lt;span class="mi"&gt;2376&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;                   &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt;
&lt;span class="mi"&gt;8000&lt;/span&gt;                       &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt;
&lt;span class="n"&gt;Nginx&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt;                 &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;                    &lt;span class="n"&gt;LIMIT&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2375&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;              &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2376&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;              &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;                  &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Nginx&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;            &lt;span class="n"&gt;ALLOW&lt;/span&gt;       &lt;span class="n"&gt;Anywhere&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nginx will start running as soon at it is installed. We can see the status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl status nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the output, we should see something like below. This mean nginx is running.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Active: active (running) since Thu 2018-05-17 04:51:16 UTC; 15min ago
Main PID: 17126 (nginx)
  CGroup: /system.slice/nginx.service
    ├── 17126 nginx: master process /usr/sbin/nginx -g daemon on; master_pr
    └── 17127 nginx: worker process
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can browse over to the domain (the domain we set up with Digital Ocean and google domains) and see the nginx start page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="nginx welcome page" src="/posts/jupyterhub/welcome_to_nginx.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="3-obtain-ssl-certificates-with-certbot"&gt;3. Obtain SSL certificates with certbot&lt;/h3&gt;
&lt;p&gt;With a domain name hooked up to our server, we'll now able to obtain an SSL certificate. I followed &lt;a href="https://www.slideshare.net/willingc/jupyterhub-tutorial-at-jupytercon"&gt;this presentation&lt;/a&gt; to install certbot, a program used to generate SSL certificates. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~
$ mkdir certbot
$ &lt;span class="nb"&gt;cd&lt;/span&gt; certbot
$ wget https://dl.eff.org/certbot-auto
$ chmod a+x certbot-auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we can run certbot, we need to turn off nginx. When I first tried to run certbot, I was thrown an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Problem binding to port 80: Could not bind to IPv4 or IPv6.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we installed nginx earlier, and we confirmed that it's running, that means that port 80 is currently in use by nginx. We need to open up port 80 to certbot by temporarily shutting down nginx. Once nginx is stopped, we can run certbot and get our SSL certificate. We'll eventually have to restart nginx, but this can wait until after we change the nginx configuration file. If you are following along, make sure to change &lt;code&gt;notebooks.problemsolvingwithpython.com&lt;/code&gt; to your domain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl stop nginx
$ sudo systemctl status nginx
&lt;span class="c1"&gt;# [Ctrl] + [c] to exit&lt;/span&gt;
$ ./certbot-auto certonly --standalone -d notebooks.problemsolvingwithpython.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it worked and we got our SSL certificate, the output will be something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/notebooks.problemsolvingwithpython.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/notebooks.problemsolvingwithpython.com/privkey.pem
   Your cert will expire on 2018-08-15. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the location of the &lt;code&gt;fullchain.pem&lt;/code&gt; and &lt;code&gt;privkey.pem&lt;/code&gt; files. We'll need to put these locations into the nginx configuration.&lt;/p&gt;
&lt;p&gt;We also need to allow nginx to access these files. I had trouble getting nginx to run and &lt;a href="https://www.youtube.com/watch?v=alaGteCPZU8&amp;amp;t=1721s"&gt;this presentation&lt;/a&gt; showed a way to give nginx access to the SSL key files. There is probably a more "Linuxy" way of giving nginx access to the cert files, but I messed around with the permission settings for a while, and this way worked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/letsencrypt
$ ls
accounts  archive  csr  keys  live  renewal  renewal-hooks
$ sudo chmod &lt;span class="m"&gt;777&lt;/span&gt; -R archive/
$ sudo chmod &lt;span class="m"&gt;777&lt;/span&gt; -R live/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="4-create-a-cookie-secret-and-a-proxy-auth-token"&gt;4. Create a cookie secret and a proxy auth token&lt;/h3&gt;
&lt;p&gt;In addition to the SSL certificate, the &lt;a href="http://jupyterhub.readthedocs.io/en/latest/getting-started/security-basics.html"&gt;Jupyter Hub docs on security basics&lt;/a&gt; specify that a cookie secret and poxy auth token should be created. To create the cookie secret:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /srv
$ &lt;span class="nb"&gt;cd&lt;/span&gt; jupyterhub            &lt;span class="c1"&gt;#if not present, mkdir it&lt;/span&gt;
$ openssl rand -hex &lt;span class="m"&gt;32&lt;/span&gt; &amp;gt; /srv/jupyterhub/jupyterhub_cookie_secret
$ ls
$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; jupyterhub_cookie_secret
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had trouble with the cookie secret file because I missed where the &lt;a href="http://jupyterhub.readthedocs.io/en/latest/getting-started/security-basics.html#generating-and-storing-as-a-cookie-secret-file"&gt;jupyterhub docs&lt;/a&gt; show:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The file must not be readable by group or other or the server won’t start. The recommended permissions for the cookie secret file are 600 (owner-only rw).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we have a cookie secret file. We need to make note of the location because we'll add this location to the jupyterhub_config.py file later.&lt;/p&gt;
&lt;p&gt;To generate the proxy auth token, we can use the same command, but point to a different file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="c1"&gt;# should be in /srv/jupyterhub&lt;/span&gt;
$ openssl rand -hex &lt;span class="m"&gt;32&lt;/span&gt; &amp;gt; proxy_auth_token
$ sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; proxy_auth_token
$ ls
cookie_secret  proxy_auth_token
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if we list the contents of &lt;code&gt;~/srv/jupyterhub&lt;/code&gt; we should see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/srv/jupyterhub/
├── jupyterhub_cookie_secret
└── proxy_auth_token
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also we can generate a dhparam.pem file. I'm not exactly sure what the dhparam.pem file is, but I think it's good for security. First we need to &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;/etc/nginx&lt;/code&gt; and create a new &lt;code&gt;ssl&lt;/code&gt; directory. Next give the &lt;code&gt;ssl&lt;/code&gt; directory 777 permissions and &lt;code&gt;touch&lt;/code&gt; a new file called dhparam.pem. After that we can use openssl to generate the dhparams.pem file. Note the location of this file as we will add it to the nginx config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /etc/nginx
sudo mkdir ssl
sudo chmod 777 -R ssl/
touch ssl/dhparam.pem
sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="5-modify-nginx-config"&gt;5. Modify nginx config&lt;/h3&gt;
&lt;p&gt;The next step is to modify the nginx config file so that nginx uses our SSL certificates and routes requests on to &lt;strong&gt;jupyterhub&lt;/strong&gt;. This was the hardest part for me when I set up the first server. The nginx config file isn't Python code or bash script. I went through many different configurations until I got one that worked. The big initial problem that I copied the sample nginx config that's up on the Jupyter Hub docs. But the nginx config posted on the &lt;strong&gt;jupyterhub&lt;/strong&gt; docs is not a complete nginx config, it contains just the server portion. I didn't know that the whole server portion needed to be enclosed in another frame.&lt;/p&gt;
&lt;p&gt;To modify &lt;code&gt;nginx.conf&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/etc/nginx&lt;/code&gt; directory. The nginx.conf file should be there along with a couple other files and directories.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx
$ ls
conf.d          koi-utf     nginx.conf    sites-available  ssl
fastcgi.conf    koi-win     proxy_params  sites-enabled    uwsgi_params
fastcgi_params  mime.types  scgi_params   snippets         win-utf
$ sudo nano nginx.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The nginx config that eventually worked for me is below. It can also be found &lt;a href="https://github.com/ProfessorKazarinoff/jupyterhub-svr/blob/master/nginx.conf"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Note the line which shows the path to the SSL certificates. This will change based on your domain and where certbot saved the .pem files to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## Based on: https://github.com/calpolydatascience/jupyterhub-deploy-data301/blob/master/roles/nginx/templates/nginx.conf.j2

user www-data;
worker_processes 4;
pid /run/nginx.pid;

events {
        worker_connections 1024;
        # multi_accept on;
}

http {
        include /etc/nginx/mime.types;

        default_type application/octet-stream;

    #top-level http config for websocket headers
    # from https://github.com/jupyterhub/jupyterhub/blob/master/docs/source/referen$
    map $http_upgrade $connection_upgrade {
        default upgrade;
            &amp;#39;&amp;#39;      close;
    }


    # All regular http requests on port 80 become SSL/HTTPS requests on port 32
    server {
        listen 80;
        server_name notebooks.problemsolvingwithpython.com;

        # Tell all requests to port 80 to be 302 redirected to HTTPS
        return 302 https://$host$request_uri;
    }

    server {
        #listen 443 ssl default_server;
        listen 443;
        ssl on;
        server_name notebooks.problemsovlingwithpython.com;

        ## SSL Protocals
        ssl_certificate /etc/letsencrypt/live/notebooks.problemsolvingwithpython.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/notebooks.problemsolvingwithpython.com/privkey.pem;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # Make site accessible from http://localhost/
        #server_name localhost;

        # certs sent to the client in SERVER HELLO are concatenated in
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;

        # modern configuration. tweak to your needs.
        ssl_ciphers &amp;#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&amp;#39;;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000;

        location / {
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;

            #proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
        }

        location ~ /.well-known {
            allow all;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and exit with [Ctrl] + [c] and [y]&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="6-generate-jupyterhub_configpy-and-modify"&gt;6. Generate jupyterhub_config.py and modify&lt;/h3&gt;
&lt;p&gt;Next, we'll generate a jupyterhub_config.py file and modify it a little bit. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~
$ jupyterhub --generate-config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll modify the jupyterhub_config.py file to allow local spawners and include our user &lt;code&gt;peter&lt;/code&gt; as an admin user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nano jupyterhub_config.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There will be a lot of commented out text in the file. At the top of the file, add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#jupyterhub_config.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spawner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/peter/anaconda3/bin/jupyterhub-singleuser&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Cookie Secret Files&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JupyterHub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookie_secret_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/srv/jupyterhub/jupyterhub_cookie_secret&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigurableHTTPProxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/srv/jupyterhub/proxy_auth_token&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whitelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;peter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;admin_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;peter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="7-restart-nginx-and-start-jupyterhub-see-if-we-can-login"&gt;7. Restart nginx and start jupyterhub, see if we can login&lt;/h3&gt;
&lt;p&gt;Now we'll restart nginx and start jupyterhub. Not that this time when we start jupyter hub we don't need to use the &lt;code&gt;--no-ssl&lt;/code&gt; flag because we have SSL running on nginx. If it seems like nginx isn't working, try &lt;code&gt;$ sudo systemctl status nginx&lt;/code&gt; and see if nginx really started. If it didn't, try the command &lt;code&gt;nginx -t&lt;/code&gt;. This will print out any error messages if nginx failed to start. I had to do this many different times before I got nginx to work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl stop nginx
$ sudo systemctl start nginx

$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~
$ jupyterhub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can browse to our domain and see Jupyter Hub running in its full SSL glory. Log in with the non-root sudo username and password (same user that's running the PuTTY session).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="8-create-an-new-user-and-restart-jupyterhub-see-if-the-new-user-can-log-in"&gt;8. Create an new user and restart &lt;strong&gt;jupyterhub&lt;/strong&gt;. See if the new user can log in.&lt;/h3&gt;
&lt;p&gt;OK, it's all well and good that we can log into &lt;strong&gt;jupyterhub&lt;/strong&gt;. But the purpose of setting of this up is for multiple students to be able to log into &lt;strong&gt;jupyterhub&lt;/strong&gt;. If &lt;strong&gt;jupyterhub&lt;/strong&gt; is still running, it can be stopped with [Ctrl] + [c].  Let's create a new user and see if we can log in as her.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo adduser kendra
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go through the prompts and remember the UNIX password. Now we'll modify jupyterhub_conf.py to include our new user &lt;code&gt;kendra&lt;/code&gt; and add &lt;code&gt;peter&lt;/code&gt; (our non-root sudo user) as an administrator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c.Authenticator.whitelist = {&amp;#39;peter&amp;#39;,&amp;#39;kendra&amp;#39;}
c.Authenticator.admin_users = {&amp;#39;peter&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart &lt;strong&gt;jupyterhub&lt;/strong&gt; and try and login as &lt;code&gt;kendra&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jupyterhub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Amazing! right? Jupyter Hub running on our own domain using SSL security and https. Pretty cool. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post we created an SSL certificate with certbot. We modified the nginx config to use our SSL certificate and modified jupyterhub_config.py. At the end of all of that we were able to get a working version of &lt;strong&gt;jupyterhub&lt;/strong&gt; running on https using SSL security and can log into &lt;strong&gt;jupyterhub&lt;/strong&gt; as two different users.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="next-steps"&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;Up next will add an authentication system so that users can log into our Jupyter Hub server using their college usernames and passwords. We will also set &lt;strong&gt;jupyterhub&lt;/strong&gt; to run as a system service in the background which will allow us to work on the server and run &lt;strong&gt;jupyterhub&lt;/strong&gt; at the same time.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Installing Jupyterhub</title><link href="https://professorkazarinoff.github.io/staticsite/installing-jupyter-hub.html" rel="alternate"></link><published>2018-05-24T12:40:00-07:00</published><updated>2018-05-24T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-24:/staticsite/installing-jupyter-hub.html</id><summary type="html">&lt;p&gt;This is the fourth part of a multi-part series that shows how to set up Jupyter Hub for a college class. The goal is to have a running version of Jupyter Hub that students in the class can log into when given a simple web link. In this post, we'll get to the fun stuff: installing &lt;strong&gt;jupyterhub&lt;/strong&gt; on the server, installing &lt;strong&gt;Python&lt;/strong&gt; packages and spinning up Jupyter Hub for the first time.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the fourth part of a multi-part series that shows how to set up Jupyter Hub for a college class. The goal is to have a running version of Jupyter Hub that students in the class can log into when given a simple web link. In this post, we'll get to the fun stuff: installing &lt;strong&gt;jupyterhub&lt;/strong&gt; on the server, installing &lt;strong&gt;Python&lt;/strong&gt; packages and spinning up Jupyter Hub for the first time.&lt;/p&gt;
&lt;h3 id="posts-in-this-series"&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;Create SSH keys, save to documents/ssh-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/new-digital-ocean-droplet.html"&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install Jupyter Hub on the server&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/li&gt;
&lt;li&gt;Connect OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to Jupyter Hub as student&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-last-post"&gt;The last post&lt;/h3&gt;
&lt;p&gt;In the last post, we created a new server on Digital Ocean (called a &lt;em&gt;droplet&lt;/em&gt;) and made sure to add our public SSH key to the setup options. Then we logged into the server as &lt;code&gt;root&lt;/code&gt;  with our private SSH key. As &lt;code&gt;root&lt;/code&gt;, we set up a new user with sudo privileges and added our public SSH key to the new users profile. Then we logged into the server as the new user and checked the new user's home directory.&lt;/p&gt;
&lt;h3 id="this-post"&gt;This post&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Update packages on the server&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;Python&lt;/strong&gt; packages and &lt;strong&gt;jupyterhub&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Run a very unsecured instance of Jupyter Hub just to see if it works&lt;/li&gt;
&lt;li&gt;Shut down Jupyter Hub very quickly because of no SSL security&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="1-update-packages-on-the-server"&gt;1. Update Packages on the Server&lt;/h3&gt;
&lt;p&gt;It is probably best to update the packages installed on the server in case there are changes and updates to the operating system since the server was created. This is probably a reflex for those that use Linux a lot. Open PuTTY and log into the server as the non-root sudo user we created in the last post. Then update the system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="2-install-anaconda"&gt;2. Install Anaconda&lt;/h3&gt;
&lt;p&gt;Next we'll install &lt;strong&gt;Anaconda&lt;/strong&gt;. When I installed &lt;strong&gt;Anaconda&lt;/strong&gt; on Windows10, I used an msi installer. But for installation of &lt;strong&gt;Anaconda&lt;/strong&gt; on the cloud server we'll use a shell script. The first time I set up Jupyter Hub, I installed &lt;strong&gt;Anaconda&lt;/strong&gt; in the &lt;code&gt;/opt&lt;/code&gt; directory. I don't think this is the best setup. When I installed Anaconda in &lt;code&gt;/opt&lt;/code&gt;, I ended up with all sorts of permission problems when I tried to run &lt;strong&gt;conda&lt;/strong&gt; and &lt;strong&gt;jupyterhub&lt;/strong&gt;. For me it caused less problems to install &lt;strong&gt;Anaconda&lt;/strong&gt; in the non-root user's home directory(&lt;code&gt;/home/peter/&lt;/code&gt;). The user's home directory is also the default Anaconda3 installation location.&lt;/p&gt;
&lt;p&gt;I followed &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-the-anaconda-python-distribution-on-ubuntu-16-04"&gt;this tutorial&lt;/a&gt; from Digital Ocean.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href="https://repo.continuum.io/archive/"&gt;https://repo.continuum.io/archive/&lt;/a&gt; and look down the list of installs for the newest installer that corresponds to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anaconda 3 (not Anaconda 2, we don't want legacy Python version 2.7)&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;x86&lt;/li&gt;
&lt;li&gt;64 (bit)&lt;/li&gt;
&lt;li&gt;.sh (linux shell script)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the time of writing, the shell script was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Anaconda3-5.1.0-Linux-x86_64.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/tmp&lt;/code&gt; directory and download the script. Then run the script and follow the prompts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
$ curl -O https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh
$ bash Anaconda3-5.1.0-Linux-x86_64.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to be able to run &lt;strong&gt;conda&lt;/strong&gt; from the command line. So make sure to allow &lt;strong&gt;Anaconda&lt;/strong&gt; to append your PATH during the installation. After installation, we need to reload the &lt;code&gt;.bashrc&lt;/code&gt; file because &lt;strong&gt;Anaconda&lt;/strong&gt; made changes to &lt;code&gt;.bashrc&lt;/code&gt; during the install (when it added &lt;strong&gt;conda&lt;/strong&gt; to our PATH).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we should be able to run &lt;strong&gt;conda&lt;/strong&gt;. Try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see output, that means &lt;strong&gt;conda&lt;/strong&gt; was installed and can be run by the non-root user.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="3-install-python-packages-and-jupyterhub"&gt;3. Install &lt;strong&gt;Python&lt;/strong&gt; packages and &lt;strong&gt;jupyterhub&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We have a full installation of &lt;strong&gt;Anaconda&lt;/strong&gt; which includes a lot of useful packages for engineers including: &lt;strong&gt;numpy&lt;/strong&gt;, &lt;strong&gt;pandas&lt;/strong&gt;, &lt;strong&gt;matplotlib&lt;/strong&gt;, &lt;strong&gt;scipy&lt;/strong&gt;, &lt;strong&gt;sympy&lt;/strong&gt;, &lt;strong&gt;bokeh&lt;/strong&gt; and &lt;strong&gt;holoviews&lt;/strong&gt;. &lt;strong&gt;Anaconda&lt;/strong&gt; also includes other useful packages such as &lt;strong&gt;requests&lt;/strong&gt;, &lt;strong&gt;beautiful soup&lt;/strong&gt; and &lt;strong&gt;attrs&lt;/strong&gt;. And for student who want to go further, the &lt;strong&gt;Anaconda&lt;/strong&gt; distribution comes with &lt;strong&gt;django&lt;/strong&gt;, &lt;strong&gt;flask&lt;/strong&gt;, &lt;strong&gt;tk&lt;/strong&gt;, &lt;strong&gt;tornado&lt;/strong&gt; and &lt;strong&gt;scikit-learn&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are a couple other packages I want to install in addition to the standard &lt;strong&gt;Anaconda&lt;/strong&gt; packages. First are some extra packages useful for engineers: &lt;strong&gt;pint&lt;/strong&gt;, &lt;strong&gt;pyserial&lt;/strong&gt; and &lt;strong&gt;schemdraw&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install -c conda-forge pint
$ conda install -c anaconda pyserial
$ pip install SchemDraw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we'll install Jupyter Hub! Since we are using &lt;strong&gt;conda&lt;/strong&gt; to install &lt;strong&gt;jupyterhub&lt;/strong&gt; (rather than pip), we don't need to install node and configurable-http-proxy separately. &lt;strong&gt;Conda&lt;/strong&gt; installs the non-python dependencies (like node and configurable-http-proxy) that jupyter hub relies upon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install -c conda-forge jupyterhub
$ conda install notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="4-run-a-very-unsecured-instance-of-jupyter-hub-just-to-see-if-it-works"&gt;4. Run a very unsecured instance of Jupyter Hub just to see if it works&lt;/h3&gt;
&lt;p&gt;OK let's give it a whirl. Start &lt;strong&gt;jupyterhub&lt;/strong&gt; for the first time. Note the &lt;code&gt;--no-ssl&lt;/code&gt; flag at the end. This needs to be included or you won't be able to browse to the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jupyterhub --no-ssl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see some output in the PuTTY window. The last line should be something like &lt;code&gt;JupyterHub is now running at http://:8000/&lt;/code&gt;. The first time I set up Jupyter Hub, I wasn't able to see the site using a web browser. Nothing would come up and the connection would time out.&lt;/p&gt;
&lt;p&gt;&lt;img alt="anaconda in start menu" src="/posts/jupyterhub/site_can't_be_reached.png"&gt;&lt;/p&gt;
&lt;p&gt;Why? It turns out Digital Ocean installs a firewall called &lt;strong&gt;ufw&lt;/strong&gt; by default and turns the &lt;strong&gt;ufw&lt;/strong&gt; firewall on. When the server was created, ufw was configured to only allow incoming connections on ports 22, 80 and 433. This output is shown when we first log into the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;ufw&amp;quot; has been enabled. All ports except 22 (SSH), 80 (http) and 443 (https)
have been blocked by default.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But &lt;strong&gt;jupyterhub runs on port 8000&lt;/strong&gt; - it tells us so when &lt;strong&gt;jupyterhub&lt;/strong&gt; starts. So we need to configure &lt;strong&gt;ufw&lt;/strong&gt; to allow connections on port 8000 (at least for now, just to see if &lt;strong&gt;jupyterhub&lt;/strong&gt; works). To allow communication on port 8000 and restart &lt;strong&gt;jupyterhub&lt;/strong&gt;, type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ufw allow &lt;span class="m"&gt;8000&lt;/span&gt;
$ jupyterhub --no-ssl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can browse to the server IP address appended with &lt;code&gt;:8000&lt;/code&gt;. The web address should look something like: http://165.228.68.178:8000. You can find the IP address of the server by going into the Digital Ocean dashboard. We should see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyter hub no ssl login" src="/posts/jupyterhub/jupyterhub_no_ssl_login.png"&gt;&lt;/p&gt;
&lt;p&gt;Awesome! Quick log into &lt;strong&gt;jupyterhub&lt;/strong&gt; using the username and password for the non-root sudo user (in my case &lt;code&gt;peter&lt;/code&gt;) that we set up and are using in our current PuTTY session. You should see the typical notebook file browser with all the files you can see when you run &lt;code&gt;ls ~/&lt;/code&gt;. Try creating and running a new notebook. The notebook work just like a &lt;strong&gt;jupyter notebook running locally&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="start my server" src="/posts/jupyterhub/start_my_server.PNG"&gt;
&lt;img alt="jupyter file browser" src="/posts/jupyterhub/jupyter_file_browser.PNG"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="5-quick-log-out-and-shut-down-jupyterhub"&gt;5. Quick! Log out and shut down jupyterhub&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Quick! Log out and shut down jupyterhub&lt;/strong&gt;. (does quick really matter in internet security?) The site is running without any ssl security over regular HTTP not HTTPS. Key in [Ctrl] + [c] to stop jupyterhub.&lt;/p&gt;
&lt;div class="alert alert-warning" role="alert"&gt;
  &lt;strong&gt;Warning!&lt;/strong&gt; You should not run JupyterHub without SSL encryption on a public network.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post we installed &lt;strong&gt;Anaconda&lt;/strong&gt; on the server using a shell script. We added &lt;strong&gt;conda&lt;/strong&gt; to our path and reloaded our .bashrc file. Then we installed some extra &lt;strong&gt;Python&lt;/strong&gt; packages such as &lt;strong&gt;pint&lt;/strong&gt; and &lt;strong&gt;pyserial&lt;/strong&gt;. Finally we installed &lt;strong&gt;jupyterhub&lt;/strong&gt;, opened up port 8000 and ran &lt;strong&gt;jupyterhub&lt;/strong&gt; for the first time! Remember we &lt;strong&gt;shut down jupyter hub very quickly&lt;/strong&gt; because we ran it without any SSL security.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="next-steps"&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;In the next post we will build SSL security into our Jupyter Hub deployment and connect the server to domain name. Plus we'll customize the &lt;strong&gt;jupyterhub&lt;/strong&gt; config file and install and use nginx as a proxy server.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Creating a new Digital Ocean Droplet</title><link href="https://professorkazarinoff.github.io/staticsite/new-digital-ocean-droplet.html" rel="alternate"></link><published>2018-05-20T12:40:00-07:00</published><updated>2018-05-20T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-20:/staticsite/new-digital-ocean-droplet.html</id><summary type="html">&lt;p&gt;This is the third part of a multi-part series on how to set up Jupyter Hub for a class.  My goal is to have a running version of Jupyter Hub that students can access using a simple web link. I am primarily writing to my future self as I may need to set up Jupyter Hub again for a future class. In this post, we are going to create a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and create a non-root user with sudo privileges. Then we'll SSH into the droplet with PuTTY as the non-root user.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the third part of a multi-part series on how to set up Jupyter Hub for a class.  My goal is to have a running version of Jupyter Hub that students can access using a simple web link. I am primarily writing to my future self as I may need to set up Jupyter Hub again for a future class. In this post, we are going to create a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and create a non-root user with sudo privileges. Then we'll SSH into the droplet with PuTTY as the non-root user.&lt;/p&gt;
&lt;h3 id="posts-in-this-series"&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;Create ssh key, save to documents/ssh-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Install Jupyter Hub on the server&lt;/li&gt;
&lt;li&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/li&gt;
&lt;li&gt;Connect OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to Jupyter Hub as student&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-last-post"&gt;The last post&lt;/h3&gt;
&lt;p&gt;In the &lt;a href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html"&gt;previous post&lt;/a&gt;, we created a public/private SSH key pair using PuTTYgen. We saved the SSH keys in the Documents/ssh-keys directory. We also copied contents of the public SSH key to the clipboard.&lt;/p&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Sign up for a Digital Ocean Account&lt;/li&gt;
&lt;li&gt;Create a new Digital Ocean Droplet (will be called &lt;em&gt;the server&lt;/em&gt; from here on out)&lt;/li&gt;
&lt;li&gt;Log into the server as root over SSH using PuTTY. &lt;/li&gt;
&lt;li&gt;Create a non-root sudo user&lt;/li&gt;
&lt;li&gt;Log into to the server as the non-root sudo user using PuTTY&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="1-sign-up-for-a-digital-ocean-account"&gt;1. Sign up for a Digital Ocean Account&lt;/h3&gt;
&lt;p&gt;Digital Ocean is a cloud service provider like Amazon Web Services (AWS), Google Cloud, Microsoft Azure and Linode. Digital Ocean provides virtual private servers (called &lt;em&gt;droplets&lt;/em&gt; in Digital Ocean-speak) and online storage of static files (called &lt;em&gt;spaces&lt;/em&gt; in Digital Ocean-speak). We are going to run the Jupyter Hub server on a Digital Ocean &lt;em&gt;droplet&lt;/em&gt;. I like Digital Ocean's prices and web interface. The documentation on Digital Ocean is pretty good too. I already have a Digital Ocean account. I don't remember exactly how I did it, but going to this link:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/"&gt;https://www.digitalocean.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and selecting [Create Account --&amp;gt;] should work.&lt;/p&gt;
&lt;h3 id="2-create-a-new-digital-ocean-droplet"&gt;2. Create a new Digital Ocean Droplet&lt;/h3&gt;
&lt;p&gt;To create a new Digtial Ocean Droplet (a new server), log in here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloud.digitalocean.com/login"&gt;https://cloud.digitalocean.com/login&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Ocean Login" src="/posts/jupyterhub/digital_ocean_login.png"&gt;&lt;/p&gt;
&lt;p&gt;After logging in, I got a verify screen and had to go to my email and retrive a six digit code. Ah... the joys of two-factor authentication.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Ocean Verify" src="/posts/jupyterhub/digital_ocean_verify.png"&gt;&lt;/p&gt;
&lt;p&gt;The welcome screen looks like this. To create a new server select [Create Droplet]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Ocean Create Droplet" src="/posts/jupyterhub/digital_ocean_create_droplet.png"&gt;&lt;/p&gt;
&lt;p&gt;There are a number of choices to make. These are the ones I selected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image: Ubuntu 16.04.4 x64&lt;/li&gt;
&lt;li&gt;Size: 1 GB Memory 25GB SSD $5/month&lt;/li&gt;
&lt;li&gt;Datacenter: San Fransisco 2&lt;/li&gt;
&lt;li&gt;Add your SSH keys: New SSH Key&lt;/li&gt;
&lt;li&gt;Finalize: 1 Droplet, Hostname: jupyter-hub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_create_droplets_choices.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_size_choices.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_data_center_choices.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_ssh_key__choices.png"&gt;&lt;/p&gt;
&lt;h4 id="add-an-ssh-key"&gt;Add an SSH Key&lt;/h4&gt;
&lt;div class="alert alert-warning" role="alert"&gt;
  &lt;strong&gt;Important!&lt;/strong&gt; You need to add the public SSH key BEFORE creating the droplet
&lt;/div&gt;

&lt;p&gt;The public SSH key we created needs to be shown on the list of keys and the radio box beside it needs to be checked. If the SSH key isn't listed or the SSH key box left  unchecked, the SSH key will not be added to the server when the server is first created (and then we won't be able to log in with PuTTY). We need to add our public SSH key and check the key box so we can log onto the server with PuTTY.&lt;/p&gt;
&lt;p&gt;Under [Add your SSH keys], click [New SSH Key]. A dialog window pops up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Droplet Choices" src="/posts/jupyterhub/digital_ocean_droplet_new_ssh_key_dialog.png"&gt;&lt;/p&gt;
&lt;p&gt;Paste the contents of the public SSH key into the [New SSH Key] dialog box.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplet_enter_ssh_key__details.png"&gt;&lt;/p&gt;
&lt;p&gt;Enter a name for the SSH key that will be saved on Digital Ocean. I choose the name &lt;code&gt;jupyter-hub-ssh-key&lt;/code&gt;. Then click [Add SSH Key]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplet_ssh_key_name_and_add.png"&gt;&lt;/p&gt;
&lt;p&gt;Then you should see the new SSH Key in the [Add your SSH Keys?] region of the new droplets page. Make sure that the radio box for the SSH key we just added is checked. &lt;/p&gt;
&lt;p&gt;A problem I had when I set up my first &lt;em&gt;droplet&lt;/em&gt; was that I did not have the SSH Key was radio button selected. Therefore, when the server was created, no SSH keys were installed. I ended up going through this long process of copying the public SSH key into pastbin.com (which is definitely &lt;strong&gt;not a safe thing to do&lt;/strong&gt;), and using &lt;code&gt;wget&lt;/code&gt; to past the raw contents from the pastebin into the server file system, then using &lt;code&gt;cp&lt;/code&gt; to copy the publish SSH key into the correct file name. This required using the Digital Ocean console, which is sort of like a bash terminal that pops up in a web browser. I couldn't figure out a way to copy and paste into the Digital Ocean console and the console is slow and laggy. &lt;/p&gt;
&lt;p&gt;It is &lt;em&gt;way easier&lt;/em&gt; to insert SSH keys into the server when the server is created. It is &lt;em&gt;way harder&lt;/em&gt; to add an SSH key after the server is created.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_see_new_ssh_key.png"&gt;&lt;/p&gt;
&lt;p&gt;OK, I think it's time to actually create the &lt;em&gt;droplet&lt;/em&gt;. Click the long green [Create] button at the bottom of the page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplet_create.png"&gt;&lt;/p&gt;
&lt;p&gt;This will bring you back the the Digital Ocean main dashboard and you should see your new droplet under [Resources] --&amp;gt; [Droplets]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/digital_ocean_droplets_1.png"&gt;&lt;/p&gt;
&lt;p&gt;Note the IP address of the new droplet. We need to IP address to log into our server with PuTTY.&lt;/p&gt;
&lt;h3 id="3-log-into-the-server-as-root-over-ssh-using-putty"&gt;3. Log into the server as root over SSH using PuTTY.&lt;/h3&gt;
&lt;p&gt;Open PuTTY from the Windows start menu. A couple other parameters need to be set before we log onto the server.&lt;/p&gt;
&lt;table class="table table-striped table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IP Address&lt;/td&gt;
&lt;td&gt;IP of &lt;em&gt;droplet&lt;/em&gt; ex: 168.97.14.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; SSH --&amp;gt; Auth --&amp;gt; Private key file&lt;/td&gt;
&lt;td&gt;private SSH key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; Data --&amp;gt; Auto-login username&lt;/td&gt;
&lt;td&gt;root&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/putty_in_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;Under Connect --&amp;gt; SSH --&amp;gt; Auth --&amp;gt; Private key file for authentication:, click [Browse]. &lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTY Auth SSH private key" src="/posts/jupyterhub/putty_Auth_SSH_private_key.png"&gt;&lt;/p&gt;
&lt;p&gt;Navigate to the SSH private key in Documents/ssh-keys. The private key ends in a .ppk extension. I had trouble finding the key when I first set up PuTTY. It turned out that when the key was saved in Programfiles/PuTTY. The key was not visible in the Windows file browser because I don't have administrator permissions on my machine at work. I ended up having to create a new SSH key and save the new key in Documents/ssh-key (I can access Documents/ssh-key without administrator privaleges).&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTY browse to private SSH key" src="/posts/jupyterhub/putty_browse_private_ssh_key.png"&gt;&lt;/p&gt;
&lt;p&gt;Under Connection --&amp;gt; Data --&amp;gt; Auto-login username: &lt;code&gt;root&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty login details" src="/posts/jupyterhub/putty_login_details.png"&gt;&lt;/p&gt;
&lt;p&gt;Back in [Sessions] (the top-most menu item or main page), add the IP address and Port = 22, click [Open]&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty IP address and Port" src="/posts/jupyterhub/puTTY_IP_and_Port.png"&gt;&lt;/p&gt;
&lt;p&gt;This should bring up a new window that is a terminal for our server:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PyTTY SSH window open" src="/posts/jupyterhub/putty_ssh_window_open.png"&gt;&lt;/p&gt;
&lt;h3 id="4-create-a-non-root-sudo-user"&gt;4. Create a non-root sudo user&lt;/h3&gt;
&lt;p&gt;Digital Ocean recommends that the servers are run by non-root user that have sudo access. So one of the first things we'll do on our server is create a non-root sudo user. First though, let's make sure everything is up to date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I followed &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart"&gt;this tutorial&lt;/a&gt; at Digital Ocean to create a non-root sudo user.&lt;/p&gt;
&lt;p&gt;Create the new user with the &lt;code&gt;adduser&lt;/code&gt; command. I called my new user &lt;code&gt;peter&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adduser &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set a new password and confirm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The user details can be skipped by pressing [Enter]. Then [Y] to complete the new user setup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Changing the user information for username
Enter the new value, or press ENTER for the default
    Full Name []:
    Room Number []:
    Work Phone []:
    Home Phone []:
    Other []:
Is the information correct? [Y/n]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's give our new user sudo privaleges:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ usermod -aG sudo &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new user account is created and the new user has sudo privalges. We can switch accounts and become the new user with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo su - &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new user should have &lt;code&gt;sudo&lt;/code&gt; privileges. That means when acting as &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; we should be able to look in the &lt;code&gt;/root&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ls -la /root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you can see the contents of &lt;code&gt;/root&lt;/code&gt; then the new user is set up with sudo access.&lt;/p&gt;
&lt;h4 id="add-ssh-keys-to-new-users-profile"&gt;Add SSH keys to new user's profile&lt;/h4&gt;
&lt;p&gt;Before we log off, we need to add our SSH keys to our new user's profile on the server. The second time I set up JupyterHub, I had trouble logging in as the non-root user using PuTTY. I could log in as &lt;code&gt;root&lt;/code&gt; just fine, but I couldn't log in as the newly created user &lt;code&gt;peter&lt;/code&gt;. When Digital Ocean created the server, the SSH keys (specified on the creation page) were added to the &lt;code&gt;root&lt;/code&gt; profile. The new user &lt;code&gt;peter&lt;/code&gt; didn't exist when the server was created. The only user was &lt;code&gt;root&lt;/code&gt; at creation time. Therefore no SSH keys were added to the &lt;code&gt;peter&lt;/code&gt; profile at server creation time, because the user &lt;code&gt;peter&lt;/code&gt; didn't exist yet. Since we want to log into our server as the new non-root user &lt;code&gt;peter&lt;/code&gt;, we need to add the same SSH keys saved in the &lt;code&gt;root&lt;/code&gt; profile to the &lt;code&gt;peter&lt;/code&gt; profile. The SSH keys belong in a file located at &lt;code&gt;/home/peter/.ssh/authorized_keys&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I followed &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-ssh-keys-with-putty-to-connect-to-a-vps"&gt;this tutorial&lt;/a&gt; from Digital Ocean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/.ssh
$ chmod &lt;span class="m"&gt;0700&lt;/span&gt; ~/.ssh
$ touch ~/.ssh/authorized_keys
$ chmod &lt;span class="m"&gt;0644&lt;/span&gt; ~/.ssh/authorized_keys
$ nano /home/peter/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the right mouse button to paste in the public SSH key from the clipboard into the PuTTY window. If the SSH key is not saved in the clipboard, then you can retrieve it with PuTTYgen --&amp;gt; load or go to Digital Ocean, click in the upper right on the profile picture --&amp;gt; settings --&amp;gt; security --&amp;gt; ssh-key --&amp;gt; edit dropdown --&amp;gt; edit. You can paste into the PuTTY window using the right mouse button. Use [Ctrl-x] and [y] to save and exit. &lt;/p&gt;
&lt;p&gt;I tried to use &lt;code&gt;cp&lt;/code&gt; to copy the &lt;code&gt;authorized_keys&lt;/code&gt; file from &lt;code&gt;/root/.ssh/&lt;/code&gt; to &lt;code&gt;/home/peter/.ssh&lt;/code&gt; but there was a problem with permissions and write access to the &lt;code&gt;authorized_keys&lt;/code&gt; file. I couldn't get PuTTY to login as &lt;code&gt;peter&lt;/code&gt; until I removed the file, recreated an empty one and pasted in the SSH key. This is probably also possible with &lt;code&gt;cat file1 &amp;gt;&amp;gt; file2&lt;/code&gt;. Manually copying and pasting with the right mouse button was the way I got it to work. &lt;/p&gt;
&lt;p&gt;Now we can exit out of the &lt;code&gt;peter&lt;/code&gt; profile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should bring us back to the &lt;code&gt;root&lt;/code&gt; user. Restart the server to enact the changes with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might need to wait a minute or two for the server to restart.&lt;/p&gt;
&lt;h3 id="4-connect-to-the-server-as-the-non-root-sudo-user-using-putty"&gt;4. Connect to the server as the non-root sudo user using PuTTY&lt;/h3&gt;
&lt;p&gt;Now that the non-root sudo user is set up and our ssh keys are in /home/&lt;user&gt;/.ssh/authorized_keys, let's start a new PuTTY session and log into the server as the new user. Like before, open PuTTY from the Windows Start menu and add the following settings, but this time the Auto-login user name is the name of our new non-root sudo user:&lt;/p&gt;
&lt;table class="table table-striped table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;parameter&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IP Address&lt;/td&gt;
&lt;td&gt;IP of &lt;em&gt;droplet&lt;/em&gt; ex: 168.97.14.19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; SSH --&amp;gt; Auth --&amp;gt; Private key file&lt;/td&gt;
&lt;td&gt;private SSH key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection --&amp;gt; Data --&amp;gt; Auto-login username&lt;/td&gt;
&lt;td&gt;peter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I also saved the PuTTY session details at this point so that I wouldn't have to re-enter all of the parameters each time I want to log into the server. Enter a name into [Saved Sessions] and click [Save]. Once the parameters are saved in PuTTY, you can simply double-click the profile name and you will log into the server.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTY save profile" src="/posts/jupyterhub/putty_save_session.PNG"&gt;&lt;/p&gt;
&lt;p&gt;Log into the server with Sessions --&amp;gt; [Open]&lt;/p&gt;
&lt;p&gt;You should see the Digital Ocean login screen again. Note the prompt, it should have the new user's name before the &lt;code&gt;@&lt;/code&gt; symbol. &lt;/p&gt;
&lt;p&gt;&lt;img alt="server terminal as peter" src="/posts/jupyterhub/putty_ssh_window_open_as_peter.png"&gt;&lt;/p&gt;
&lt;p&gt;Check to see which directory you land in. It should be &lt;code&gt;/home/&amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/&amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see the non-root user's home directory. Let's make sure we can also see into the &lt;code&gt;root&lt;/code&gt; user's home directory to ensure we have sudo privileges as the non-root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ls -la /root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To log out of the server simply type &lt;code&gt;exit&lt;/code&gt;. This should close the PuTTY session.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this post we created a new Digital Ocean server (called a &lt;em&gt;droplet&lt;/em&gt;) and made sure to add our public SSH key to the setup options before we hit [Create]. Then we logged into the server as &lt;code&gt;root&lt;/code&gt;  with our private SSH key. As &lt;code&gt;root&lt;/code&gt;, we set up a new user with sudo privileges and added our public SSH key to the new user's profile in &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;. Then we logged into the server as the new user and checked the new user's home directory and ensured the new user has sudo privileges.&lt;/p&gt;
&lt;h3 id="next-steps"&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;In the next post, we will get to the fun stuff: installing &lt;strong&gt;Anaconda and jupyterhub&lt;/strong&gt; on our new server and starting Jupyter Hub for the first time! (but only keep it open for a couple seconds because we don't have SSL set up yet).&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Create an SSH Key with PuTTYgen</title><link href="https://professorkazarinoff.github.io/staticsite/ssh-keys-with-putty.html" rel="alternate"></link><published>2018-05-19T12:40:00-07:00</published><updated>2018-05-19T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-19:/staticsite/ssh-keys-with-putty.html</id><summary type="html">&lt;p&gt;This is the second part of a multi-part series on how to set up Jupyter Hub for a class. This is my first time setting up a Jupyter Hub server. I am primarily writing to my future self as I may need to set up Jupyter Hub again for another class. In this post, we are going to create an SSH key on a Windows 10 machine using PuTTYgen.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second part of a multi-part series on how to set up Jupyter Hub for a class. This is my first time setting up a Jupyter Hub server. I am primarily writing to my future self as I may need to set up Jupyter Hub again for another class. In this post, we are going to create an SSH key on a Windows 10 machine using PuTTYgen.&lt;/p&gt;
&lt;h3 id="posts-in-this-series"&gt;Posts in this series&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html"&gt;Why Jupyter Hub?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create ssh key, save to documents/ssh-keys&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;Create a new Digital Ocean Droplet with a non-root sudo user&lt;/li&gt;
&lt;li&gt;Install Jupyter Hub on the server&lt;/li&gt;
&lt;li&gt;Apply SSL, link a domain name to the server and configure nginx&lt;/li&gt;
&lt;li&gt;Connect OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to Jupyter Hub as student&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="steps-in-this-post"&gt;Steps in this post&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download PuTTY for Windows&lt;/li&gt;
&lt;li&gt;Start PuTTYgen and create SSH key&lt;/li&gt;
&lt;li&gt;Save SSH public and private keys to Documents folder&lt;/li&gt;
&lt;li&gt;Copy the public key to clipboard&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="why-ssh-keys-puttygen-and-why-do-this-first"&gt;Why SSH keys, PuTTYgen and why do this first?&lt;/h3&gt;
&lt;p&gt;When I set up the server on Digital Ocean the first time, one of the initial server setup steps was to add SSH keys so the server has them when it initialized. &lt;/p&gt;
&lt;p&gt;I tried to create and save the keys to the Digital Ocean dashboard so the SSH keys would be on the server when it first started. But I goofed up somehow and the server started without any SSH keys. It was a BIG PAIN adding SSH keys after the server started for the first time. &lt;/p&gt;
&lt;p&gt;I ended up copying the public key into pastebin.com, logging onto the server with the Digital Ocean console and using &lt;code&gt;wget&lt;/code&gt; to bring a textfile of the SSH key from pastebin.com onto the server and then &lt;code&gt;mv&lt;/code&gt; to copy the key name into the right location.&lt;/p&gt;
&lt;p&gt;I'm pretty sure that pasting a public SSH key into pastebin.com is not the best way to initially set up a server. So to make sure that doesn't happen again, I am going to generate the SSH keys first and set up the server second. &lt;/p&gt;
&lt;p&gt;SSH keys are needed to use PuTTY (regular PuTTY not PuTTYgen) to log into the server. Since I'm working on Windows, using PuTTYgen (a program that comes with PuTTY that generates SSH keys) seems like the easiest solution. &lt;/p&gt;
&lt;h4 id="1-download-putty"&gt;1. Download PuTTY&lt;/h4&gt;
&lt;p&gt;I already have PuTTY installed on my Windows 10 machines at home and at work. The download link is below:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.putty.org/"&gt;Download PuTTY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PuTTY seems to want you to install lots of extra stuff when you run the installer. I didn't install any of the "offers" that popped up during installation.&lt;/p&gt;
&lt;h4 id="2-start-puttygen-and-create-ssh-key"&gt;2. Start PuTTYgen and create SSH key&lt;/h4&gt;
&lt;p&gt;I went through this tutorial to about setting SSH key on Windows for Digital Ocean when I created the first SSH key:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users"&gt;How To Use SSH Keys with PuTTY on DigitalOcean Droplets (Windows users)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using the Windows start menu, open PuTTYgen (not regular PuTTY):&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen in Windows Start Menu" src="/posts/jupyterhub/puttygen_in_start_menu.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Putty in Windows Start Menu" src="/posts/jupyterhub/puttygen_key_generator.png"&gt;&lt;/p&gt;
&lt;p&gt;Use the following parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type of key to generate: RSA&lt;/li&gt;
&lt;li&gt;Number of bits in generated key: 2048&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then click [generate]&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen generate" src="/posts/jupyterhub/puttygen_generate.png"&gt;&lt;/p&gt;
&lt;p&gt;This will bring up a dialog to move the mouse around the empty area to generate some randomness. This is my favorite part. Just move the mouse around the dialog box until the progress bar ends. Fun.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen key generator" src="/posts/jupyterhub/puttygen_key_generator.png"&gt;&lt;/p&gt;
&lt;p&gt;When the next screen pops up, right-click and copy the contents of the Public Key. We'll need the public key contents available to paste into the server's SSH &lt;code&gt;authorized_keys&lt;/code&gt; file. Include the rsa line in the text copied to the clipboard.&lt;/p&gt;
&lt;h4 id="3-save-ssh-public-and-private-keys-to-documents-folder"&gt;3. Save SSH public and private keys to Documents folder&lt;/h4&gt;
&lt;p&gt;In the [Actions] section click [Save public key] and click [Save private key]&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen save public and private keys" src="/posts/jupyterhub/puttygen_save_public_private_key.png"&gt;&lt;/p&gt;
&lt;p&gt;Make sure to save both the public and the private keys. Save these keys to an accessible folder. The first time I generated SSH keys, I saved the keys in the default location and couldn't access them later. The second time I created SSH keys, I created a folder in the Documents folder called ssh-keys and saved the public and private keys in Documents/ssh-keys. I saved the public key with the name: &lt;code&gt;public_key_jupyter_hub.txt&lt;/code&gt;. The Digital Ocean documentation recommends a .txt file extension for the public key (so you can open it and copy the contents). The private key should have a .ppk file extension.&lt;/p&gt;
&lt;p&gt;&lt;img alt="PuTTYgen save public key name" src="/posts/jupyterhub/puttygen_public_key_save_name.png"&gt;&lt;/p&gt;
&lt;h4 id="4-copy-the-public-key-to-clipboard"&gt;4. Copy the public key to clipboard&lt;/h4&gt;
&lt;p&gt;Before closing PuTTYgen, make sure to copy the contents of the Public Key to the clipboard. We'll need this when we create the server. Copy all of the contents including the rsa line. &lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;After completing these steps, we have a public and private SSH key pair saved in Documents/ssh-keys. We also have the contents of the public SSH key saved to the clipboard.&lt;/p&gt;
&lt;h3 id="next-steps"&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;Next, we'll create a new server on Digital Ocean (called a &lt;em&gt;droplet&lt;/em&gt;). Then we'll use the SSH keys we just created to log into the server and create a non-root sudo user.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry><entry><title>Why Jupyter Hub?</title><link href="https://professorkazarinoff.github.io/staticsite/why-jupyter-hub.html" rel="alternate"></link><published>2018-05-17T12:40:00-07:00</published><updated>2018-05-17T12:40:00-07:00</updated><author><name>Peter D. Kazarinoff</name></author><id>tag:professorkazarinoff.github.io,2018-05-17:/staticsite/why-jupyter-hub.html</id><summary type="html">&lt;p&gt;This is the first part of a multi-part series that shows how to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for an engineering programming class. This is my first time setting up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. I am primarily writing to my future self as I may need to set up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server again for a different class in another quarter. I hope the lessons learned will also help other instructors tackle the same problem if they want to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for their own class or team.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first part of a multi-part series that shows how to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for an engineering programming class. This is my first time setting up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. I am primarily writing to my future self as I may need to set up a &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server again for a different class in another quarter. I hope the lessons learned will also help other instructors tackle the same problem if they want to set up &lt;strong&gt;Jupyter Hub&lt;/strong&gt; for their own class or team.&lt;/p&gt;
&lt;h3 id="why-jupyter-hub"&gt;Why Jupyter Hub?&lt;/h3&gt;
&lt;p&gt;Why &lt;strong&gt;Jupyter Hub&lt;/strong&gt;? I am teaching an intro engineering course this summer. The course has a lab component and three of the labs are devoted to computer programming. In previous quarters, I've taught MATLAB for the three computer programming labs. But this summer, I want to try teaching &lt;strong&gt;Python&lt;/strong&gt; and cover the same concepts and learning outcomes.&lt;/p&gt;
&lt;p&gt;If we use &lt;strong&gt;Python&lt;/strong&gt; in the three programming labs this summer, I would like to spend the lab time coding and solving problems. I don't want to spend time during the class downloading Python, creating virtual environments, troubleshooting installs, dealing with system vs. non-system versions of Python, installing packages, dealing with folder structure, explaining the difference between conda and pip, teaching command-line commands, going over Python on Windows compared to Python on MacOSX... &lt;/p&gt;
&lt;p&gt;I imagine the first programming lab of the quarter runs like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is a .pdf or google doc posted on a shared google drive folder with a link to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Students click the link and bring up the login page&lt;/li&gt;
&lt;li&gt;Students log-in with their college usernames and passwords&lt;/li&gt;
&lt;li&gt;Students type &lt;code&gt;import this&lt;/code&gt; press [Shift+Enter] and their first code cell just runs.&lt;/li&gt;
&lt;li&gt;Students can use &lt;strong&gt;Jupyter Hub&lt;/strong&gt; from any computer with a web browser and an internet connection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jupyter Hub&lt;/strong&gt; looks and runs the same on all student computers&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="this-is-theoretically-possible-with-jupyter-hub"&gt;This is theoretically possible with Jupyter Hub&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Jupyter Hub&lt;/strong&gt; can be installed on a Digital Ocean droplet (a cloud server, like AWS or Google Cloud). The version of &lt;strong&gt;Python&lt;/strong&gt; running the notebooks created by &lt;strong&gt;Jupyter Hub&lt;/strong&gt; can contain the full &lt;strong&gt;Anaconda&lt;/strong&gt; distribution of packages plus some extra packages like &lt;strong&gt;pint&lt;/strong&gt; and &lt;strong&gt;pyserial&lt;/strong&gt;. All of the notebooks will use the same environment. The installed packages will be the same for each student. One Digital Ocean droplet will be able to run all of the notebooks at the same time (hopefully, there will be about 24 students). Student's work will be saved on the server under their user account. Students can download the .ipynb files and upload them to google drive or save the .ipynb files on a thumb drive. After the students login, folders and notebooks can be in place and used as starting points in lab and as lab exercises. After the course ends, students will still be able to log in and use &lt;strong&gt;Jupyter Hub&lt;/strong&gt; and practice writing and running Python code to solve engineering problems.&lt;/p&gt;
&lt;h3 id="what-will-it-take-to-make-jupyter-hub-a-reality"&gt;What will it take to make Jupyter Hub a reality?&lt;/h3&gt;
&lt;p&gt;This list will surely change as I go through the process of setting up the &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server. Below are the steps I expect to take and software/hardware needed at each step.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sign up for a Digital Ocean Account (already done)&lt;/li&gt;
&lt;li&gt;Create a new Digital Ocean Droplet (will be called &lt;em&gt;the server&lt;/em&gt; from here on out)&lt;/li&gt;
&lt;li&gt;Connect to the server over SSH and set up SSH keys&lt;/li&gt;
&lt;li&gt;Create a non-root sudo user on the server&lt;/li&gt;
&lt;li&gt;Get a public url, hook up the server DNS record to the public URL&lt;/li&gt;
&lt;li&gt;Install Anaconda on the server&lt;/li&gt;
&lt;li&gt;Install the other packages on the server like jupyter hub, node, pyserial and pint&lt;/li&gt;
&lt;li&gt;Edit permissions of files and directories on the server&lt;/li&gt;
&lt;li&gt;Create and implement SSL certificates on the server&lt;/li&gt;
&lt;li&gt;Run Jupyter Hub as a non-root sudo user&lt;/li&gt;
&lt;li&gt;Connect google OAuth to Jupyter Hub&lt;/li&gt;
&lt;li&gt;Connect to the server as student and celebrate teaching &lt;strong&gt;Python&lt;/strong&gt; without worrying about installation and virtual environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="will-this-work-how-much-time-will-it-take"&gt;Will this work? How much time will it take?&lt;/h3&gt;
&lt;p&gt;Will this work? I hope so. Other people have done it. There was a JupyterCon talk about it, there are &lt;a href="http://jupyterhub.readthedocs.io/en/latest/gallery-jhub-deployments.html"&gt;example implementations&lt;/a&gt; up on github. A large data science class at UC Berkeley ran &lt;strong&gt;Jupyter Hub&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;I don't really know how long it will take. The only real step that takes time is the DNS connection. The rest of the steps are in the minute time frame of computing time and probably days if not weeks of troubleshooting time. I'm just going to try and complete a step per day or a step per week and see if I can get the server going by the end of the spring quarter.&lt;/p&gt;
&lt;h3 id="next-steps"&gt;Next Steps:&lt;/h3&gt;
&lt;p&gt;The next step is really the first step:&lt;/p&gt;
&lt;p&gt;Create SSH keys. We'll need a public/private SSH key pair to be able to log into the &lt;strong&gt;Jupyter Hub&lt;/strong&gt; server over SSH.&lt;/p&gt;</content><category term="jupyter"></category><category term="jupyter hub"></category><category term="jupyter notebooks"></category><category term="python"></category></entry></feed>